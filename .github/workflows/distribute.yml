name: Distribute

on:
  workflow_dispatch:
    inputs:
      group:
        description: 'Die zu aktualisierende Gruppe. Per default werden "ALL (alle Workflows)" aktualisiert'
        type: choice
        required: true
        default: ALL
        options:
          - ALL
          - errorcodes
          - mslib
          - simple
          - standard
          - zap
          - test

jobs:
  errorcodes:
    if: ${{ github.event.inputs.group == 'errorcodes' || github.event.inputs.group == 'ALL' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repository:
          - { name: md-error-codes, branch: main, group: errorcodes, workflows: "../check, build" }
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Distribute Workflows
        id: distributeWorkflows
        uses: ./.github/actions/distribute-workflows
        with:
          repositoryName: ${{ matrix.repository.name }}
          repositoryGroup: ${{ matrix.repository.group }}
          repositoryBranch: ${{ matrix.repository.branch }}
          workflows: ${{ matrix.repository.workflows }}
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  mslib:
    if: ${{ github.event.inputs.group == 'mslib' || github.event.inputs.group == 'ALL' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repository:
          - { name: mslib-aws, branch: develop, group: mslib, workflows: "../check, build, ../encoding, postBuild" }
          - { name: mslib-rest, branch: develop, group: mslib, workflows: "../check, build, ../encoding, postBuild" }
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Distribute Workflows
        id: distributeWorkflows
        uses: ./.github/actions/distribute-workflows
        with:
          repositoryName: ${{ matrix.repository.name }}
          repositoryGroup: ${{ matrix.repository.group }}
          repositoryBranch: ${{ matrix.repository.branch }}
          workflows: ${{ matrix.repository.workflows }}
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  simple:
    if: ${{ github.event.inputs.group == 'simple' || github.event.inputs.group == 'ALL' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repository:
          - { name: mcbs-logging, branch: develop, group: simple, workflows: "../check, build" }
          - { name: mcbscore-billing-data-importer, branch: main, group: simple, workflows: "../encoding" }
          - { name: mcbscore-billing-performance-monitor, branch: main, group: simple, workflows: "../encoding" }
          - { name: mcbscore-gatling-compare, branch: main, group: simple, workflows: "../encoding" }
          - { name: mcbscore-yaml-transform-plugin, branch: develop, group: simple, workflows: "../check, build, ../encoding" }
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Distribute Workflows
        id: distributeWorkflows
        uses: ./.github/actions/distribute-workflows
        with:
          repositoryName: ${{ matrix.repository.name }}
          repositoryGroup: ${{ matrix.repository.group }}
          repositoryBranch: ${{ matrix.repository.branch }}
          workflows: ${{ matrix.repository.workflows }}
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  standard:
    if: ${{ github.event.inputs.group == 'standard' || github.event.inputs.group == 'ALL' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repository:
          - { name: mcbscore-billing-prototype-ca, branch: develop, group: standard, workflows: "../check, build, ../encoding" }
          - { name: mcbscore-bot, branch: develop, group: standard, workflows: "../check, build, ../encoding, postBuild" }
          - { name: mcbscore-changelog-editor, branch: develop, group: standard, workflows: "../check, build, ../encoding, postBuild" }
          - { name: mcbscore-compare-cp-contract-ui, branch: develop, group: standard, workflows: "../check, build, ../encoding" }
          - { name: mcbscore-contentprovider-ui, branch: develop, group: standard, workflows: "../check, build, ../encoding" }
          - { name: mcbscore-customerproduct-and-contract-service-ui, branch: develop, group: standard, workflows: "../check, build, ../encoding" }
          - { name: mcbscore-customer-search-index, branch: develop, group: standard, workflows: "../check, build, ../encoding, postBuild" }
          - { name: mcbscore-db-replica, branch: develop, group: standard, workflows: "../check, build, ../encoding, postBuild" }
          - { name: mcbscore-es-plugin-collection, branch: develop, group: standard, workflows: "../check, build, ../encoding, postBuild" }
          - { name: mcbscore-framework, branch: develop, group: standard, workflows: "../check, build, ../encoding, postBuild" }
          - { name: mcbscore-usageprices-ui, branch: develop, group: standard, workflows: "../check, build, ../encoding" }
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Distribute Workflows
        id: distributeWorkflows
        uses: ./.github/actions/distribute-workflows
        with:
          repositoryName: ${{ matrix.repository.name }}
          repositoryGroup: ${{ matrix.repository.group }}
          repositoryBranch: ${{ matrix.repository.branch }}
          workflows: ${{ matrix.repository.workflows }}
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  zap:
    if: ${{ github.event.inputs.group == 'zap' || github.event.inputs.group == 'ALL' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repository:
          - { name: mcbscore-business-transaction-service, branch: develop, group: zap, workflows: "../check, build, ../encoding, postBuild" }
          - { name: mcbscore-contract-service, branch: develop, group: zap, workflows: "../check, build, ../encoding, postBuild" }
          - { name: mcbscore-fee-service, branch: develop, group: zap, workflows: "../check, build, ../encoding, postBuild" }
          - { name: mcbscore-invoice-service, branch: develop, group: zap, workflows: "../check, build, ../encoding, postBuild" }
          - { name: mcbscore-mark-service, branch: develop, group: zap, workflows: "../check, build, ../encoding, postBuild" }
          - { name: mcbscore-network-service, branch: develop, group: zap, workflows: "../check, build, ../encoding, postBuild" }
          - { name: mcbscore-party-service, branch: develop, group: zap, workflows: "../check, build, ../encoding, postBuild" }
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Distribute Workflows
        id: distributeWorkflows
        uses: ./.github/actions/distribute-workflows
        with:
          repositoryName: ${{ matrix.repository.name }}
          repositoryGroup: ${{ matrix.repository.group }}
          repositoryBranch: ${{ matrix.repository.branch }}
          workflows: ${{ matrix.repository.workflows }}
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  test:
    if: ${{ github.event.inputs.group == 'test' || github.event.inputs.group == 'ALL' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repository:
          - { name: mcbscore-github-test-repo, branch: main, group: mslib, workflows: "../check, build, ../encoding, postBuild" }
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Distribute Workflows
        id: distributeWorkflows
        uses: ./.github/actions/distribute-workflows
        with:
          repositoryName: ${{ matrix.repository.name }}
          repositoryGroup: ${{ matrix.repository.group }}
          repositoryBranch: ${{ matrix.repository.branch }}
          workflows: ${{ matrix.repository.workflows }}
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
