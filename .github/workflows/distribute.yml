name: Distribute
run-name: Distribute f√ºr "${{ github.event.inputs.group }}"

on:
  schedule:
    # jeden Sonntag, 05:00h
    - cron: "0 5 * * 6"
  workflow_dispatch:
    inputs:
      group:
        description: 'Die zu aktualisierende Gruppe. Per default werden "ALL (alle Workflows)" aktualisiert'
        type: choice
        required: true
        default: ALL
        options:
          - ALL
          - aws
          - errorcodes
          - framework
          - mandel
          - mcbs
          - metis
          - ms
          - ms-cicd
          - mslib
          - proxy
          - rating
          - restclient
          - simple
          - standard
          - zap
          - test
          - spotless

jobs:
  aws:
    if: ${{ github.event.inputs.group == 'aws' || github.event.inputs.group == 'ALL' || github.event_name == 'schedule' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repository:
          - { name: aws-ms-events, branch: develop, group: aws, workflows: "build, deployment, deployment_dev, deployment_git, deployment_playground, deployment_prod, remove, remove_dev, remove_git, remove_playground, remove_prod" }
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Distribute Workflows
        uses: ./.github/actions/distribute-workflows
        with:
          repositoryName: ${{ matrix.repository.name }}
          repositoryGroup: ${{ matrix.repository.group }}
          repositoryBranch: ${{ matrix.repository.branch }}
          workflows: ${{ matrix.repository.workflows }}
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  errorcodes:
    if: ${{ github.event.inputs.group == 'errorcodes' || github.event.inputs.group == 'ALL' || github.event_name == 'schedule' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repository:
          - { name: md-error-codes, branch: main, group: errorcodes, workflows: "../check, build" }
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Distribute Workflows
        uses: ./.github/actions/distribute-workflows
        with:
          repositoryName: ${{ matrix.repository.name }}
          repositoryGroup: ${{ matrix.repository.group }}
          repositoryBranch: ${{ matrix.repository.branch }}
          workflows: ${{ matrix.repository.workflows }}
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  mandel:
    if: ${{ github.event.inputs.group == 'mandel' || github.event.inputs.group == 'ALL' || github.event_name == 'schedule' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repository:
          - { name: mcbscore-mandel, branch: develop, group: mandel, workflows: "../check, build, ../encoding, postBuild" }
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Distribute Workflows
        uses: ./.github/actions/distribute-workflows
        with:
          repositoryName: ${{ matrix.repository.name }}
          repositoryGroup: ${{ matrix.repository.group }}
          repositoryBranch: ${{ matrix.repository.branch }}
          workflows: ${{ matrix.repository.workflows }}
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  mcbs:
    if: ${{ github.event.inputs.group == 'mcbs' || github.event.inputs.group == 'ALL' || github.event_name == 'schedule' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repository:
          - { name: mcbs-master, branch: develop, group: mcbs, workflows: "../check, preCheck, build, dbChanges, deployment, ../developerPortal, ../encoding, postBuild_MCBS, postBuild_MS, sonarqube, MCBS-Freigabe, refcalls_deployment, setPRIssueDone" }
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Distribute Workflows
        uses: ./.github/actions/distribute-workflows
        with:
          repositoryName: ${{ matrix.repository.name }}
          repositoryGroup: ${{ matrix.repository.group }}
          repositoryBranch: ${{ matrix.repository.branch }}
          workflows: ${{ matrix.repository.workflows }}
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  metis:
    if: ${{ github.event.inputs.group == 'metis' || github.event.inputs.group == 'ALL' || github.event_name == 'schedule' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repository:
          - { name: metis-test, branch: develop, group: metis, workflows: "../check, test/build, ../encoding" }
          - { name: metis-ui, branch: develop, group: metis, workflows: "../check, ui/build, ui/deployment, ui/deployment_dev, ui/deployment_test, ui/deployment_prod, ui/deployment_k8s, ../encoding" }
          - { name: metis, branch: develop, group: metis, workflows: "../check, ../encoding, backend/build, backend/postBuild, backend/dbChanges, backend/deployment, ../ms/deployment_k8s_only, backend/rest-deployment, backend/database-init" }
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Distribute Workflows
        uses: ./.github/actions/distribute-workflows
        with:
          repositoryName: ${{ matrix.repository.name }}
          repositoryGroup: ${{ matrix.repository.group }}
          repositoryBranch: ${{ matrix.repository.branch }}
          workflows: ${{ matrix.repository.workflows }}
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  ms-cicd:
    if: ${{ github.event.inputs.group == 'ms-cicd' || github.event.inputs.group == 'ALL' || github.event_name == 'schedule' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repository:
          - { name: ms-cicd, branch: main, group: ms-cicd, workflows: "../check, ../encoding, cicd_build, cicd_check_code, cicd_check_pull_request, cicd_postBuild, cicd_release, deployment, setPRIssueDone" }
          - { name: ms-commondata, branch: develop, group: ms-cicd, workflows: "../check, ../developerPortal, ../encoding, cicd_build, cicd_check_code, cicd_check_pull_request, cicd_postBuild, cicd_release, deployment, setPRIssueDone" }
          - { name: ms-contentprovider, branch: develop, group: ms-cicd, workflows: "../check, ../developerPortal, ../encoding, cicd_build, cicd_check_code, cicd_check_pull_request, cicd_postBuild, cicd_release, deployment, setPRIssueDone" }
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Distribute Workflows
        uses: ./.github/actions/distribute-workflows
        with:
          repositoryName: ${{ matrix.repository.name }}
          repositoryGroup: ${{ matrix.repository.group }}
          repositoryBranch: ${{ matrix.repository.branch }}
          workflows: ${{ matrix.repository.workflows }}
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  ms:
    if: ${{ github.event.inputs.group == 'ms' || github.event.inputs.group == 'ALL' || github.event_name == 'schedule' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repository:
          - { name: ms-admin-dashboard, branch: develop, group: ms, workflows: "../check, build, deployment, deployment_b2b, deployment_dev, deployment_git, deployment_prod, ../encoding, postBuild,setPRIssueDone" }
          - { name: ms-agreement, branch: develop, group: ms, workflows: "../check, build, deployment, deployment_dev, ../encoding, postBuild,setPRIssueDone" }
          - { name: ms-alteration, branch: develop, group: ms, workflows: "../check, build, deployment, deployment_dev, deployment_git, deployment_prod, ../encoding, postBuild,setPRIssueDone" }
          - { name: ms-appcheck, branch: develop, group: ms, workflows: "../check, build, deployment, deployment_dev, deployment_git, deployment_prod, ../developerPortal, ../encoding, postBuild,setPRIssueDone" }
          - { name: ms-authorities-information, branch: develop, group: ms, workflows: "../check, build, deployment, deployment_dev, deployment_git, deployment_prod, ../developerPortal, ../encoding, postBuild,setPRIssueDone" }
          - { name: ms-billingaccount-frontend, branch: develop, group: ms, workflows: "../check, build, deployment, deployment_b2b, deployment_dev, deployment_git, deployment_prod, ../developerPortal, ../encoding, postBuild,setPRIssueDone" }
          - { name: ms-businessinteraction-router, branch: develop, group: ms, workflows: "../check, build, deployment, deployment_dev, deployment_git, postBuild,setPRIssueDone" }
          - { name: ms-businesstransaction, branch: develop, group: ms, workflows: "../check, build, deployment, deployment_dev, deployment_git, deployment_prod, ../developerPortal, ../encoding, postBuild,setPRIssueDone" }
          - { name: ms-configserver, branch: develop, group: ms, workflows: "../check, build, deployment, deployment_b2b, deployment_dev, deployment_git, deployment_prod, ../encoding, postBuild,setPRIssueDone" }
          - { name: ms-customerchange, branch: develop, group: ms, workflows: "../check, build, dbChanges, deployment, deployment_dev, deployment_git, deployment_prod, ../developerPortal, ../encoding, postBuild,setPRIssueDone" }
          - { name: ms-customerproduct, branch: develop, group: ms, workflows: "../check, build, ../encoding" }
          - { name: ms-delegate, branch: develop, group: ms, workflows: "../check, build, deployment, deployment_dev, deployment_git, deployment_prod, ../developerPortal, ../encoding, postBuild,setPRIssueDone" }
          - { name: ms-discovery, branch: develop, group: ms, workflows: "../check, build, deployment, deployment_b2b, deployment_dev, deployment_git, deployment_prod, ../encoding, postBuild,setPRIssueDone" }
          - { name: ms-elasticupdate, branch: develop, group: ms, workflows: "../check, build, deployment, deployment_b2b, deployment_dev, deployment_git, deployment_prod, ../developerPortal, ../encoding, postBuild,setPRIssueDone" }
          - { name: ms-event-relay, branch: develop, group: ms, workflows: "../check, build, deployment, deployment_dev, deployment_git, deployment_prod, ../developerPortal, postBuild, setPRIssueDone" }
          - { name: ms-find, branch: develop, group: ms, workflows: "../check, build, deployment, deployment_dev, deployment_git, deployment_prod, ../developerPortal, ../encoding, postBuild,setPRIssueDone" }
          - { name: ms-freeprint-router, branch: develop, group: ms, workflows: "../check, build, deployment, deployment_dev, deployment_git, postBuild,setPRIssueDone" }
          - { name: ms-gateway, branch: develop, group: ms, workflows: "../check, build, deployment, deployment_b2b, deployment_dev, deployment_git, deployment_prod, ../encoding, postBuild,setPRIssueDone" }
          - { name: ms-homer, branch: develop, group: ms, workflows: "../check, build, deployment, deployment_b2b, deployment_dev, deployment_git, deployment_prod,  ../developerPortal, ../encoding, postBuild,setPRIssueDone" }
          - { name: ms-invoice, branch: develop, group: ms, workflows: "../check, build, deployment, deployment_b2b, deployment_dev, deployment_git, deployment_prod, ../developerPortal, ../encoding, postBuild,setPRIssueDone" }
          - { name: ms-mandel, branch: develop, group: ms, workflows: "../check, build, deployment, deployment_dev, ../encoding, postBuild,setPRIssueDone" }
          - { name: ms-mark, branch: develop, group: ms, workflows: "../check, build, deployment, deployment_dev, deployment_git, deployment_prod, ../developerPortal, ../encoding, postBuild,setPRIssueDone" }
          - { name: ms-note-router, branch: develop, group: ms, workflows: "../check, build, deployment, deployment_dev, deployment_git, postBuild,setPRIssueDone" }
          - { name: ms-oidc, branch: develop, group: ms, workflows: "../check, build, dbChanges, deployment, deployment_dev, deployment_git, ../developerPortal, postBuild,setPRIssueDone" }
          - { name: ms-oms-router, branch: develop, group: ms, workflows: "../check, build, deployment, deployment_dev, deployment_git, postBuild,setPRIssueDone" }
          - { name: ms-proxy-support, branch: develop, group: ms, workflows: "../check, build, deployment, deployment_dev, deployment_git, deployment_prod, ../encoding, postBuild,setPRIssueDone" }
          - { name: ms-rating, branch: develop, group: ms, workflows: "../check, build, deployment, deployment_b2b, deployment_dev, deployment_git, deployment_prod, ../developerPortal, ../encoding, postBuild,setPRIssueDone" }
          - { name: ms-user, branch: develop, group: ms, workflows: "../check, build, dbChanges, deployment, deployment_b2b, deployment_dev, deployment_git, deployment_prod, ../developerPortal, ../encoding, postBuild,setPRIssueDone" }
          - { name: ms-user-cleanup, branch: develop, group: ms, workflows: "../check, build, deployment_k8s_only, ../encoding, postBuild,setPRIssueDone" }

          # ms-deployment/deployment_k8s: Kubernetes Namespace Konfig
          - { name: ms-deployment, branch: main, group: ms-deployment, workflows: "deployment_k8s" }
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Distribute Workflows
        uses: ./.github/actions/distribute-workflows
        with:
          repositoryName: ${{ matrix.repository.name }}
          repositoryGroup: ${{ matrix.repository.group }}
          repositoryBranch: ${{ matrix.repository.branch }}
          workflows: ${{ matrix.repository.workflows }}
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  mslib:
    if: ${{ github.event.inputs.group == 'mslib' || github.event.inputs.group == 'ALL' || github.event_name == 'schedule' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repository:
          - { name: mslib-aws, branch: develop, group: mslib, workflows: "../check, build, ../encoding, postBuild" }
          - { name: mslib-rest, branch: develop, group: mslib, workflows: "../check, build, ../encoding, postBuild" }
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Distribute Workflows
        uses: ./.github/actions/distribute-workflows
        with:
          repositoryName: ${{ matrix.repository.name }}
          repositoryGroup: ${{ matrix.repository.group }}
          repositoryBranch: ${{ matrix.repository.branch }}
          workflows: ${{ matrix.repository.workflows }}
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  proxy:
    if: ${{ github.event.inputs.group == 'proxy' || github.event.inputs.group == 'ALL' || github.event_name == 'schedule' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repository:
          - { name: mcbscore-authorities-information-proxy, branch: develop, group: proxy, workflows: "../check, build, deployment, deployment_b2b, deployment_b2b_km, deployment_b2b_md, deployment_dev, deployment_dev_km, deployment_dev_md, deployment_git, deployment_git_km, deployment_git_md, deployment_prod, deployment_prod_km, deployment_prod_md, ../encoding, postBuild" }
          - { name: mcbscore-appcheck-proxy, branch: develop, group: proxy, workflows: "../check, build, deployment, deployment_b2b, deployment_b2b_km, deployment_b2b_md, deployment_dev, deployment_dev_km, deployment_dev_md, deployment_git, deployment_git_km, deployment_git_md, deployment_prod, deployment_prod_km, deployment_prod_md, ../encoding, postBuild" }
          - { name: mcbscore-billingaccount-proxy, branch: develop, group: proxy, workflows: "../check, build, deployment, deployment_b2b, deployment_b2b_km, deployment_b2b_md, deployment_dev, deployment_dev_km, deployment_dev_md, deployment_git, deployment_git_km, deployment_git_km_extern, deployment_git_md, deployment_git_md_extern, deployment_prod, deployment_prod_km, deployment_prod_km_extern, deployment_prod_md, deployment_prod_md_extern, ../encoding, postBuild" }
          - { name: mcbscore-businesstransaction-proxy, branch: develop, group: proxy, workflows: "../check, build, deployment, deployment_b2b, deployment_b2b_km, deployment_b2b_md, deployment_dev, deployment_dev_km, deployment_dev_md, deployment_git, deployment_git_km, deployment_git_md, deployment_prod, deployment_prod_km, deployment_prod_md, ../encoding, postBuild" }
          - { name: mcbscore-commondata-proxy, branch: develop, group: proxy, workflows: "../check, build, deployment, deployment_b2b, deployment_b2b_km, deployment_b2b_md, deployment_dev, deployment_dev_km, deployment_dev_md, deployment_git, deployment_git_km, deployment_git_md, deployment_prod, deployment_prod_km, deployment_prod_md, ../encoding, postBuild" }
          - { name: mcbscore-contentprovider-proxy, branch: develop, group: proxy, workflows: "../check, build, deployment, deployment_b2b, deployment_b2b_km, deployment_b2b_md, deployment_dev, deployment_dev_km, deployment_dev_md, deployment_git, deployment_git_km, deployment_git_md, deployment_prod, deployment_prod_km, deployment_prod_md, ../encoding, postBuild" }
          - { name: mcbscore-cuba-proxy, branch: develop, group: proxy, workflows: "../check, build, deployment, deployment_b2b, deployment_b2b_km, deployment_b2b_md, deployment_dev, deployment_dev_km, deployment_dev_md, deployment_git, deployment_git_km, deployment_git_km_extern, deployment_git_md, deployment_git_md_extern, deployment_prod, deployment_prod_km, deployment_prod_km_extern, deployment_prod_md, deployment_prod_md_extern, ../encoding, postBuild" }
          - { name: mcbscore-customerchange-proxy, branch: develop, group: proxy, workflows: "../check, deployment, build, deployment_b2b, deployment_b2b_km, deployment_b2b_md, deployment_dev, deployment_dev_km, deployment_dev_md, deployment_git, deployment_git_km, deployment_git_km_extern, deployment_git_md, deployment_git_md_extern, deployment_prod, deployment_prod_km, deployment_prod_km_extern, deployment_prod_md, deployment_prod_md_extern, ../encoding, postBuild" }
          - { name: mcbscore-customerproduct-proxy, branch: develop, group: proxy, workflows: "../check, deployment, build, deployment_b2b, deployment_b2b_km, deployment_b2b_md, deployment_dev, deployment_dev_km, deployment_dev_md, deployment_git, deployment_git_km, deployment_git_km_extern, deployment_git_md, deployment_git_md_extern, deployment_prod, deployment_prod_km, deployment_prod_km_extern, deployment_prod_md, deployment_prod_md_extern, ../encoding, postBuild" }
          - { name: mcbscore-customer-proxy, branch: develop, group: proxy, workflows: "../check, build, deployment, deployment_b2b, deployment_b2b_km, deployment_b2b_md, deployment_dev, deployment_dev_km, deployment_dev_md, deployment_git, deployment_git_km, deployment_git_km_extern, deployment_git_md, deployment_git_md_extern, deployment_prod, deployment_prod_km, deployment_prod_km_extern, deployment_prod_md, deployment_prod_md_extern, ../encoding, postBuild" }
          - { name: mcbscore-elasticupdate-proxy, branch: develop, group: proxy, workflows: "../check, build, deployment, deployment_b2b, deployment_b2b_km, deployment_b2b_md, deployment_dev, deployment_dev_km, deployment_dev_md, deployment_git, deployment_git_km, deployment_git_km_extern, deployment_git_md, deployment_git_md_extern, deployment_prod, deployment_prod_km, deployment_prod_km_extern, deployment_prod_md, deployment_prod_md_extern, ../encoding, postBuild" }
          - { name: mcbscore-find-proxy, branch: develop, group: proxy, workflows: "../check, build, deployment, deployment_b2b, deployment_b2b_km, deployment_b2b_md, deployment_dev, deployment_dev_km, deployment_dev_md, deployment_git, deployment_git_km, deployment_git_km_extern, deployment_git_md, deployment_git_md_extern, deployment_prod, deployment_prod_km, deployment_prod_km_extern, deployment_prod_md, deployment_prod_md_extern, ../encoding, postBuild" }
          - { name: mcbscore-healthcheck-proxy, branch: develop, group: proxy, workflows: "../check, build, deployment, deployment_b2b, deployment_b2b_md, deployment_dev, deployment_dev_md, deployment_git, deployment_git_md, deployment_prod, deployment_prod_md, ../encoding, postBuild" }
          - { name: mcbscore-invoice-proxy, branch: develop, group: proxy, workflows: "../check, build, deployment, deployment_b2b, deployment_b2b_km, deployment_b2b_md, deployment_dev, deployment_dev_km, deployment_dev_md, deployment_git, deployment_git_km, deployment_git_km_extern, deployment_git_md, deployment_git_md_extern, deployment_prod, deployment_prod_km, deployment_prod_km_extern, deployment_prod_md, deployment_prod_md_extern, ../encoding, postBuild" }
          - { name: mcbscore-mark-proxy, branch: develop, group: proxy, workflows: "../check, build, deployment, deployment_b2b, deployment_b2b_km, deployment_b2b_md, deployment_dev, deployment_dev_km, deployment_dev_md, deployment_git, deployment_git_km, deployment_git_km_extern, deployment_git_md, deployment_git_md_extern, deployment_prod, deployment_prod_km, deployment_prod_km_extern, deployment_prod_md, deployment_prod_md_extern, ../encoding, postBuild" }
          - { name: mcbscore-mandel-proxy, branch: develop, group: proxy, workflows: "../check, build, deployment, deployment_b2b, deployment_b2b_km, deployment_b2b_md, deployment_dev, deployment_dev_km, deployment_dev_md, deployment_git, deployment_git_km, deployment_git_km_extern, deployment_git_md, deployment_git_md_extern, deployment_prod, deployment_prod_km, deployment_prod_km_extern, deployment_prod_md, deployment_prod_md_extern, ../encoding, postBuild" }
          - { name: mcbscore-oidc-proxy, branch: develop, group: proxy, workflows: "../check, build, deployment, deployment_b2b, deployment_b2b_km, deployment_b2b_md, deployment_dev, deployment_dev_fm, deployment_dev_km, deployment_dev_md, deployment_git, deployment_git_fm, deployment_git_fm_extern, deployment_git_km, deployment_git_km_extern, deployment_git_md, deployment_git_md_extern, deployment_prod, deployment_prod_fm, deployment_prod_fm_extern, deployment_prod_km, deployment_prod_km_extern, deployment_prod_md, deployment_prod_md_extern, ../encoding, postBuild" }
          - { name: mcbscore-rating-proxy, branch: develop, group: proxy, workflows: "../check, build, deployment, deployment_b2b, deployment_b2b_km, deployment_b2b_md, deployment_dev, deployment_dev_km, deployment_dev_md, deployment_git, deployment_git_km, deployment_git_km_extern, deployment_git_md, deployment_git_md_extern, deployment_prod, deployment_prod_km, deployment_prod_km_extern, deployment_prod_md, deployment_prod_md_extern, ../encoding, postBuild" }
          - { name: mcbscore-user-proxy, branch: develop, group: proxy, workflows: "../check, build, deployment, deployment_b2b, deployment_b2b_km, deployment_b2b_md, deployment_dev, deployment_dev_km, deployment_dev_md, deployment_git, deployment_git_km, deployment_git_km_extern, deployment_git_md, deployment_git_md_extern, deployment_prod, deployment_prod_km, deployment_prod_km_extern, deployment_prod_md, deployment_prod_md_extern, ../encoding, postBuild" }
          - { name: mcbscore-zap-businesstransaction-service-proxy, branch: develop, group: proxy, workflows: "../check, build, deployment, deployment_b2b, deployment_b2b_km, deployment_b2b_md, deployment_dev, deployment_dev_km, deployment_dev_md, deployment_git, deployment_git_km, deployment_git_km_extern, deployment_git_md, deployment_git_md_extern, deployment_prod, deployment_prod_km, deployment_prod_km_extern, deployment_prod_md, deployment_prod_md_extern, ../encoding, postBuild" }
          - { name: mcbscore-zap-contract-service-proxy, branch: develop, group: proxy, workflows: "../check, build, deployment, deployment_b2b, deployment_b2b_km, deployment_b2b_md, deployment_dev, deployment_dev_km, deployment_dev_md, deployment_git, deployment_git_km, deployment_git_km_extern, deployment_git_md, deployment_git_md_extern, deployment_prod, deployment_prod_km, deployment_prod_km_extern, deployment_prod_md, deployment_prod_md_extern, ../encoding, postBuild" }
          - { name: mcbscore-zap-fee-service-proxy, branch: develop, group: proxy, workflows: "../check, build, deployment, deployment_b2b, deployment_b2b_km, deployment_b2b_md, deployment_dev, deployment_dev_km, deployment_dev_md, deployment_git, deployment_git_km, deployment_git_km_extern, deployment_git_md, deployment_git_md_extern, deployment_prod, deployment_prod_km, deployment_prod_km_extern, deployment_prod_md, deployment_prod_md_extern, ../encoding, postBuild" }
          - { name: mcbscore-zap-invoice-service-proxy, branch: develop, group: proxy, workflows: "../check, build, deployment, deployment_b2b, deployment_b2b_km, deployment_b2b_md, deployment_dev, deployment_dev_km, deployment_dev_md, deployment_git, deployment_git_km, deployment_git_km_extern, deployment_git_md, deployment_git_md_extern, deployment_prod, deployment_prod_km, deployment_prod_km_extern, deployment_prod_md, deployment_prod_md_extern, ../encoding, postBuild" }
          - { name: mcbscore-zap-mark-service-proxy, branch: develop, group: proxy, workflows: "../check, build, deployment, deployment_b2b, deployment_b2b_km, deployment_b2b_md, deployment_dev, deployment_dev_km, deployment_dev_md, deployment_git, deployment_git_km, deployment_git_km_extern, deployment_git_md, deployment_git_md_extern, deployment_prod, deployment_prod_km, deployment_prod_km_extern, deployment_prod_md, deployment_prod_md_extern, ../encoding, postBuild" }
          - { name: mcbscore-zap-network-service-proxy, branch: develop, group: proxy, workflows: "../check, build, deployment, deployment_b2b, deployment_b2b_km, deployment_b2b_md, deployment_dev, deployment_dev_km, deployment_dev_md, deployment_git, deployment_git_km, deployment_git_km_extern, deployment_git_md, deployment_git_md_extern, deployment_prod, deployment_prod_km, deployment_prod_km_extern, deployment_prod_md, deployment_prod_md_extern, ../encoding, postBuild" }
          - { name: mcbscore-zap-party-service-proxy, branch: develop, group: proxy, workflows: "../check, build, deployment, deployment_b2b, deployment_b2b_km, deployment_b2b_md, deployment_dev, deployment_dev_km, deployment_dev_md, deployment_git, deployment_git_km, deployment_git_km_extern, deployment_git_md, deployment_git_md_extern, deployment_prod, deployment_prod_km, deployment_prod_km_extern, deployment_prod_md, deployment_prod_md_extern, ../encoding, postBuild" }
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Distribute Workflows
        uses: ./.github/actions/distribute-workflows
        with:
          repositoryName: ${{ matrix.repository.name }}
          repositoryGroup: ${{ matrix.repository.group }}
          repositoryBranch: ${{ matrix.repository.branch }}
          workflows: ${{ matrix.repository.workflows }}
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  rating:
    if: ${{ github.event.inputs.group == 'rating' || github.event.inputs.group == 'ALL' || github.event_name == 'schedule' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repository:
          - { name: mcbscore-rating, branch: develop, group: rating, workflows: "../check, build, dbChanges, ../encoding, postBuild" }
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Distribute Workflows
        uses: ./.github/actions/distribute-workflows
        with:
          repositoryName: ${{ matrix.repository.name }}
          repositoryGroup: ${{ matrix.repository.group }}
          repositoryBranch: ${{ matrix.repository.branch }}
          workflows: ${{ matrix.repository.workflows }}
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  restclient:
    if: ${{ github.event.inputs.group == 'restclient' || github.event.inputs.group == 'ALL' || github.event_name == 'schedule' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repository:
          - { name: mcbscore-billingaccount-webclient, branch: main, group: restclient, workflows: "../check, build, ../encoding" }
          - { name: mcbscore-contractservice-webclient, branch: main, group: restclient, workflows: "../check, build, ../encoding" }
          - { name: mcbscore-customer-webclient, branch: main, group: restclient, workflows: "../check, build, ../encoding" }
          - { name: mcbscore-customerchange-webclient, branch: main, group: restclient, workflows: "../check, build, ../encoding" }
          - { name: mcbscore-documents-webclient, branch: main, group: restclient, workflows: "../check, build, ../encoding" }
          - { name: mcbscore-invoiceservice-webclient, branch: main, group: restclient, workflows: "../check, build, ../encoding" }
          - { name: mcbscore-notes-webclient, branch: main, group: restclient, workflows: "../check, build, ../encoding" }
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Distribute Workflows
        uses: ./.github/actions/distribute-workflows
        with:
          repositoryName: ${{ matrix.repository.name }}
          repositoryGroup: ${{ matrix.repository.group }}
          repositoryBranch: ${{ matrix.repository.branch }}
          workflows: ${{ matrix.repository.workflows }}
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  simple:
    if: ${{ github.event.inputs.group == 'simple' || github.event.inputs.group == 'ALL' || github.event_name == 'schedule' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repository:
          - { name: mcbs-logging, branch: develop, group: simple, workflows: "../check, build" }
          - { name: mcbscore-billing-data-importer, branch: main, group: simple, workflows: "../encoding" }
          - { name: mcbscore-billing-performance-monitor, branch: main, group: simple, workflows: "../encoding" }
          - { name: mcbscore-gatling-compare, branch: main, group: simple, workflows: "../encoding" }
          - { name: mcbscore-yaml-transform-plugin, branch: develop, group: simple, workflows: "../check, build, ../encoding" }
          - { name: mcbscore-reusable-workflows, branch: main, group: simple, workflows: "../ms/deployment_k8s"}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Distribute Workflows
        uses: ./.github/actions/distribute-workflows
        with:
          repositoryName: ${{ matrix.repository.name }}
          repositoryGroup: ${{ matrix.repository.group }}
          repositoryBranch: ${{ matrix.repository.branch }}
          workflows: ${{ matrix.repository.workflows }}
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  standard:
    if: ${{ github.event.inputs.group == 'standard' || github.event.inputs.group == 'ALL' || github.event_name == 'schedule' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repository:
          - { name: mcbscore-billing-prototype-ca, branch: develop, group: standard, workflows: "../check, build, ../encoding" }
          - { name: mcbscore-bot, branch: develop, group: standard, workflows: "../check, build, ../encoding, postBuild" }
          - { name: mcbscore-changelog-editor, branch: develop, group: standard, workflows: "../check, build, ../encoding, postBuild" }
          - { name: mcbscore-customer-search-index, branch: develop, group: standard, workflows: "../check, build, ../encoding, postBuild" }
          - { name: mcbscore-db-replica, branch: develop, group: standard, workflows: "../check, build, ../encoding, postBuild" }
          - { name: mcbscore-es-plugin-collection, branch: develop, group: standard, workflows: "../check, build, ../encoding, postBuild" }
          - { name: mcbscore-framework, branch: develop, group: standard, workflows: "../check, build, ../encoding, postBuild" }
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Distribute Workflows
        uses: ./.github/actions/distribute-workflows
        with:
          repositoryName: ${{ matrix.repository.name }}
          repositoryGroup: ${{ matrix.repository.group }}
          repositoryBranch: ${{ matrix.repository.branch }}
          workflows: ${{ matrix.repository.workflows }}
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  framework:
    if: ${{ github.event.inputs.group == 'framework' || github.event.inputs.group == 'ALL' || github.event_name == 'schedule' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repository:
          - { name: lib-amount, branch: develop, group: framework, workflows: "../check, build, ../encoding, postBuild" }
          - { name: lib-annotation, branch: develop, group: framework, workflows: "../check, build, ../encoding, postBuild" }
          - { name: lib-common, branch: develop, group: framework, workflows: "../check, build, ../encoding, postBuild" }
          - { name: lib-io, branch: develop, group: framework, workflows: "../check, build, ../encoding, postBuild" }
          - { name: lib-process, branch: develop, group: framework, workflows: "../check, build, ../encoding, postBuild" }
          - { name: lib-relation, branch: develop, group: framework, workflows: "../check, build, ../encoding, postBuild" }
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Distribute Workflows
        uses: ./.github/actions/distribute-workflows
        with:
          repositoryName: ${{ matrix.repository.name }}
          repositoryGroup: ${{ matrix.repository.group }}
          repositoryBranch: ${{ matrix.repository.branch }}
          workflows: ${{ matrix.repository.workflows }}
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  zap:
    if: ${{ github.event.inputs.group == 'zap' || github.event.inputs.group == 'ALL' || github.event_name == 'schedule' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repository:
          - { name: mcbscore-business-transaction-service, branch: develop, group: zap, workflows: "../check, build, ../encoding, postBuild" }
          - { name: mcbscore-contract-service, branch: develop, group: zap, workflows: "../check, build, ../encoding, postBuild" }
          - { name: mcbscore-fee-service, branch: develop, group: zap, workflows: "../check, build, ../encoding, postBuild" }
          - { name: mcbscore-invoice-service, branch: develop, group: zap, workflows: "../check, build, ../encoding, postBuild" }
          - { name: mcbscore-mark-service, branch: develop, group: zap, workflows: "../check, build, ../encoding, postBuild" }
          - { name: mcbscore-network-service, branch: develop, group: zap, workflows: "../check, build, ../encoding, postBuild" }
          - { name: mcbscore-party-service, branch: develop, group: zap, workflows: "../check, build, ../encoding, postBuild" }
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Distribute Workflows
        uses: ./.github/actions/distribute-workflows
        with:
          repositoryName: ${{ matrix.repository.name }}
          repositoryGroup: ${{ matrix.repository.group }}
          repositoryBranch: ${{ matrix.repository.branch }}
          workflows: ${{ matrix.repository.workflows }}
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  test:
    # nur bei Input "test". Auch bei "ALL" w√§re √ºblicherweise redundant, weil hier eine Teilmenge der obigen Repos konfiguriert wird.
    if: ${{ github.event.inputs.group == 'test' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repository:
          - { name: ms-commondata, branch: develop, group: ms-cicd, workflows: "../check, ../developerPortal, ../encoding, cicd_build, cicd_check_code, cicd_check_pull_request, cicd_postBuild, cicd_release, deployment, setPRIssueDone" }
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Distribute Workflows
        uses: ./.github/actions/distribute-workflows
        with:
          repositoryName: ${{ matrix.repository.name }}
          repositoryGroup: ${{ matrix.repository.group }}
          repositoryBranch: ${{ matrix.repository.branch }}
          workflows: ${{ matrix.repository.workflows }}
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  spotless:
    if: ${{ github.event.inputs.group == 'spotless' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repository:
          - { name: lib-amount, branch: develop, group: standard }
          - { name: lib-annotation, branch: develop, group: standard }
          - { name: lib-common, branch: develop, group: standard }
          - { name: lib-io, branch: develop, group: standard }
          - { name: lib-process, branch: develop, group: standard }
          - { name: lib-relation, branch: develop, group: standard }
          - { name: mcbs-master, branch: develop, group: mcbs }
          - { name: mcbs-logging, branch: develop, group: mcbs }
          - { name: mcbscore-mandel, branch: develop, group: mandel }
          - { name: mcbscore-bot, branch: develop, group: standard }
          - { name: mcbscore-business-transaction-service, branch: develop, group: zap }
          - { name: mcbscore-changelog-editor, branch: develop, group: standard }
          - { name: mcbscore-contract-service, branch: develop, group: zap}
          - { name: mcbscore-customer-search-index, branch: develop, group: standard }
          - { name: mcbscore-db-replica, branch: develop, group: standard }
          - { name: mcbscore-es-plugin-collection, branch: develop }
          - { name: mcbscore-framework, branch: develop, group: standard }
          - { name: mcbscore-fee-service, branch: develop, group: zap}
          - { name: mcbscore-invoice-service, branch: develop, group: zap}
          - { name: mcbscore-mark-service, branch: develop, group: zap}
          - { name: mcbscore-network-service, branch: develop, group: zap}
          - { name: mcbscore-party-service, branch: develop, group: zap}
          - { name: mcbscore-yaml-transform-plugin, branch: develop, group: zap}
          - { name: metis, branch: develop, group: metis }
          - { name: ms-alteration, branch: develop, group: ms }
          - { name: ms-commondata, branch: develop, group: ms-cicd }
          - { name: ms-admin-dashboard, branch: develop, group: ms }
          - { name: ms-agreement, branch: develop, group: ms }
          - { name: ms-appcheck, branch: develop, group: ms }
          - { name: ms-authorities-information, branch: develop, group: ms }
          - { name: ms-billingaccount-frontend, branch: develop, group: ms }
          - { name: ms-businessinteraction-router, branch: develop, group: ms }
          - { name: ms-businesstransaction, branch: develop, group: ms }
          - { name: ms-configserver, branch: develop, group: ms }
          - { name: ms-cicd, branch: main, group: ms-cicd }
          - { name: ms-contentprovider, branch: develop, group: ms-cicd }
          - { name: ms-customerchange, branch: develop, group: ms }
          - { name: ms-customerproduct, branch: develop, group: ms }
          - { name: ms-delegate, branch: develop, group: ms }
          - { name: ms-discovery, branch: develop, group: ms }
          - { name: ms-elasticupdate, branch: develop, group: ms }
          - { name: ms-event-relay, branch: develop, group: ms }
          - { name: ms-find, branch: develop, group: ms }
          - { name: ms-freeprint-router, branch: develop, group: ms }
          - { name: ms-gateway, branch: develop, group: ms }
          - { name: ms-homer, branch: develop, group: ms }
          - { name: ms-invoice, branch: develop, group: ms }
          - { name: ms-mandel, branch: develop, group: ms }
          - { name: ms-mark, branch: develop, group: ms }
          - { name: ms-note-router, branch: develop, group: ms }
          - { name: ms-oidc, branch: develop, group: ms }
          - { name: ms-oms-router, branch: develop, group: ms }
          - { name: ms-proxy-support, branch: develop, group: ms }
          - { name: ms-rating, branch: develop, group: ms }
          - { name: ms-user, branch: develop, group: ms }
          - { name: ms-user-cleanup, branch: develop, group: ms }
          - { name: mslib-aws, branch: develop, group: mslib }
          - { name: mslib-rest, branch: develop, group: mslib }
          - { name: scaffold-clean-architecture-gradle-plugin, branch: develop, group: standard }

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Distribute Spotless
        uses: ./.github/actions/distribute-spotless
        with:
          repositoryName: ${{ matrix.repository.name }}
          repositoryGroup: ${{ matrix.repository.group }}
          repositoryBranch: ${{ matrix.repository.branch }}
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          artifactoryUserName: ${{ secrets.MD_ARTIFACTORY_USER }}
          artifactoryPassword: ${{ secrets.MD_ARTIFACTORY_PW }}
