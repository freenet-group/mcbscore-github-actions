name: 'Distribute Files'
description: 'Action zur Verteilung von Files'

inputs:
  repositoryName:
    description: Der Name des Repositories
    required: true
  repositoryGroup:
    description: Die Gruppe der Repositories
    required: true
  repositoryBranch:
    description: Der Branch des Repositories
    required: true
  files:
    description: Kommaseparierte Liste der zu verteilenden Files
    required: true
  awsAccessKeyId:
    description: AWS Access Key Id
    required: true
  awsSecretAccessKey:
    description: AWS Secret Access Key
    required: true

runs:
  using: "composite"
  steps:
    - id: read-aws-secrets
      name: Read AWS Secrets
      uses: ./actions/read-aws-secrets
      with:
        awsAccessKeyId: ${{ inputs.awsAccessKeyId }}
        awsSecretAccessKey: ${{ inputs.awsSecretAccessKey }}
        awsParameterPairs: |
          /github/secrets/mcbs_token = TOKEN,
          /github/secrets/mcbs_user = USER

    - uses: actions/checkout@v3
      with:
        repository: freenet-group/${{ inputs.repositoryName }}
        token: ${{ env.TOKEN }}
        path: ${{ inputs.repositoryName }}
        ref: ${{ inputs.repositoryBranch }}

    - name: Add or replace files
      env:
        thisRepository: ${{ github.repository }}
        thisWorkflow: ${{ github.workflow }}
        repositoryGroup: ${{ inputs.repositoryGroup }}
        files: ${{ inputs.files }}
        repositoryName: ${{ inputs.repositoryName }}
      shell: bash
      run: |
        # Files in an array
        IFS=',' read -ra filesArray <<< "${files}"
        
        workingDirectory=$(pwd)
        filesDirectory="${workingDirectory}/${repositoryName}/.github"
        cd -- "${repositoryName}"
        mkdir -p -- "${filesDirectory}"
        
        for file in "${filesArray[@]}"; do
          printf 'copying file "%s"\n' "$file"
          sourceRelative=files/${repositoryGroup}/${file}
          source="${workingDirectory}/${sourceRelative}"
          target="./.github/$(basename -- "$file")"
        
          {
            printf '#\n# Generated by repo %s / workflow %s from file %s\n#\n' "$thisRepository" "$thisWorkflow" "$sourceRelative"
            cat < "$source"
          } >| "$target"
        
          git add -v -- "$target"
        done
        
        git config user.email "it.abr.abba.entw@md.de"
        git config user.name "$USER"
        
        # git status
        changesDetected=$(git status --porcelain)
        
        if [ -n "$changesDetected" ]; then
          echo "git commit + push"
          git commit -av -m "Added or replaced files"
          git push
        else
          echo "no git commit"
        fi
