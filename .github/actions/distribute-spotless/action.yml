name: 'Distribute Spotless'
description: 'Action zur Verteilung der spotless-Dateien für Java-Anwendungen'

inputs:
  repositoryName:
    description: Der Name des Repositories
    required: true
  repositoryGroup:
    description: Die Gruppe der Repositories
    required: true
  repositoryBranch:
    description: Der Branch des Repositories
    required: true
  awsAccessKeyId:
    description: AWS Access Key Id
    required: true
  awsSecretAccessKey:
    description: AWS Secret Access Key
    required: true
  artifactoryUserName:
    description: Login für das Artifactory
    required: true
  artifactoryPassword:
    description: Passwort für das Artifactory
    required: true

runs:
  using: "composite"
  steps:
    - id: read-aws-secrets
      name: Read AWS Secrets
      uses: ./actions/read-aws-secrets
      with:
        awsAccessKeyId: ${{ inputs.awsAccessKeyId }}
        awsSecretAccessKey: ${{ inputs.awsSecretAccessKey }}
        awsParameterPairs: |
          /github/secrets/mcbs_token = TOKEN,
          /github/secrets/mcbs_user = USER

    # Ziel-Repository auschecken
    - uses: actions/checkout@v3
      with:
        repository: freenet-group/${{ inputs.repositoryName }}
        token: ${{ env.TOKEN }}
        path: ${{ inputs.repositoryName }}
        ref: ${{ inputs.repositoryBranch }}

    # workflow.properties im ZielRepo auslesen
    - name: Read workflow.properties
      shell: bash
      run: |
        workingDirectory=$(pwd)
        # Einlesen der workflow.properties aus dem Ziel-Repository
        if [ -f  ${workingDirectory}/${{ inputs.repositoryName }}/.github/workflow.properties ]; then { cat ${workingDirectory}/${{ inputs.repositoryName }}/.github/workflow.properties; echo; } >> $GITHUB_ENV; fi

    # JAVA installieren
    - name: Set up JDK
      if: env.JAVA_VERSION != ''
      uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: ${{ env.JAVA_VERSION }}

    # Spotless akualisieren
    - name: Add or replace spotless-files
      if: env.JAVA_VERSION != ''
      env:
        thisRepository: ${{ github.repository }}
        thisWorkflow: ${{ github.workflow }}
        repositoryGroup: ${{ inputs.repositoryGroup }}
        repositoryName: ${{ inputs.repositoryName }}
        javaVersion: ${{ env.JAVA_VERSION }}
        artifactoryUserName: ${{ inputs.artifactoryUserName }}
        artifactoryPassword: ${{ inputs.artifactoryPassword }}
      shell: bash
      run: |
        # spotless-Ordner erstellen (falls nicht vorhanden)
        workingDirectory=$(pwd)
        spotlessDirectory=${workingDirectory}/spotless
        mainTargetDirectory=${workingDirectory}/${repositoryName}
        # bei CA-Projekten liegen die Dateien im gradle-Ordner
        if [ -d ${mainTargetDirectory}/gradle/spotless ]; then
          mainTargetDirectory=${mainTargetDirectory}/gradle
          differentSpotlessFileName="/spotless.gradle"
        fi
        spotlessTargetDirectory=${mainTargetDirectory}/spotless
        ideaDirectory=${workingDirectory}/${repositoryName}/.idea
        gradleFile=${workingDirectory}/${repositoryName}/build.gradle
        cd -- "$repositoryName"
        mkdir -p -- "$spotlessTargetDirectory"
        
        # Gradle-Datei bestimmen
        if [[ "$javaVersion" != "17" ]]; then
          spotlessGradleFile=$spotlessDirectory/apply-spotless-java8.gradle
        else
          spotlessGradleFile=$spotlessDirectory/apply-spotless.gradle
        fi

        # spotless-Dateien kopieren
        printf 'copying spotless-files\n'
        # für Java 11 die Einstellungen von 8 übernehmen
        if [[ "$javaVersion" == "11" ]]; then
          differentSpotlessFileName="/apply-spotless.gradle"
        fi
        cp -v -- $spotlessGradleFile ${mainTargetDirectory}${differentSpotlessFileName}
        cp -v -- $spotlessDirectory/spotless-config/* $spotlessTargetDirectory

        # Idea-Konfiguration kopieren
        printf 'copying idea-eclipseformatter.xml\n'
        if [ ! -d "$ideaDirectory" ]; then
          mkdir -p -- "$ideaDirectory"
        fi
        cp -v -- $spotlessDirectory/idea-config/eclipseCodeFormatter.xml $ideaDirectory

        echo "checking $gradleFile..."

        if [ `grep -c "spotless.gradle" $gradleFile` -eq 1 ]; then          
          # spotless mit der neuen Konfiguratuion ausführen
          sh gradlew -PGITHUB_USER=${{ env.USER }} -PGITHUB_TOKEN=${{ env.TOKEN }} -PartifactoryUsername=${artifactoryUserName} -PartifactoryPassword=${artifactoryPassword} spotlessApply
          # Änderungen einchecken
          git config user.email "tp.sd.back.mcbs@freenet.ag"
          git config user.name "$USER"

          # git status
          changesDetected=$(git status --porcelain)

          if [ -n "$changesDetected" ]; then
            echo "git commit + push"
            git commit -av -m "Spotless aktualisiert"
            git push
          else
            echo "kein git commit"
          fi
        else
          echo "apply-spotless* nicht in build.gradle gefunden, keine spotless-Aktualsierung und keine Ausführung von spotlessApply!"
        fi
