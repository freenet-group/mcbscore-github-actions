name: 'Distribute Workflow'
description: 'Action zur Verteilung eines Workflows'

inputs:
  repositoryName:
    description: Der Name des Repositories
    required: true
  repositoryBranch:
    description: Der Branch des Repositories
    required: true
  actionsRepositoryBranch:
    description: Welcher Branch von Repository mcbscore_actions benutzt werden soll
    required: false
    default: main
  msdeploymentRepositoryBranch:
    description: Welcher Branch von Repository ms-deployment benutzt werden soll
    required: false
    default: master
  awsAccessKeyId:
    description: Ein Github Token
    required: true
  awsSecretAccessKey:
    description: Ein Github Token
    required: true

runs:
  using: "composite"
  steps:
    # ##################################################################################
    # AWS Secrets
    # ##################################################################################

    # Secrets aus AWS auslesen
    - id: read_secrets
      name: Read and set AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.awsAccessKeyId }}
        aws-secret-access-key: ${{ inputs.awsSecretAccessKey }}
        aws-region: 'eu-central-1'

    - name: Read AWS Parameters
      uses: dkershner6/aws-ssm-getparameters-action@v1
      with:
        parameterPairs: |
          /github/secrets/mcbs_token = TOKEN,
          /github/secrets/mcbs_user = USER

    # Ziel Repository auschecken
    - uses: actions/checkout@v3
      with:
        repository: freenet-group/${{ inputs.repositoryName }}
        token: ${{ env.TOKEN }}
        path: ${{ inputs.repositoryName }}
        ref: ${{ inputs.repositoryBranch }}

    - name: Remove invalid workflows
      shell: bash
      run: |
        set -e

        # Workflows in grep-freundliche zeilenweise List 端berf端hren
        WORKFLOWS=$(tr , '\n' <<< '${{ matrix.repository.workflows }}' | sed -e 's/^[[:space:]]*//g')

        WORKING_DIRECTORY=$(pwd)
        WORKFLOW_DIRECTORY=$WORKING_DIRECTORY/${{ matrix.repository.name }}/.github/workflows
        cd -- '${{ matrix.repository.name }}'

        if [ -d "$WORKFLOW_DIRECTORY" ]; then
          for filename in ./.github/workflows/*.yml; do
            # remove path and extension
            basename=$(basename -- "$filename" .yml)

            if ! grep --fixed --line-regexp --quiet -- "$basename" <<< "$WORKFLOWS"; then # $basename not contained in $WORKFLOWS
              echo "git rm $filename"
              git rm -- "$filename"
            fi
          done
        fi

        cd -- "$WORKING_DIRECTORY"

    - name: Add or replace workflows
      shell: bash
      run: |
        set -e

        # Workflows in ein Array 端berf端hren
        IFS=',' read -ra WORKFLOWS <<< "${{ matrix.repository.workflows }}"

        WORKING_DIRECTORY=$(pwd)
        WORKFLOW_DIRECTORY=$WORKING_DIRECTORY/${{ matrix.repository.name }}/.github/workflows
        cd -- '${{ matrix.repository.name }}'
        mkdir -p -- "$WORKFLOW_DIRECTORY"

        for WORKFLOW in "${WORKFLOWS[@]}"; do
          WORKFLOW=$(sed -e 's/^[[:space:]]*//' <<< "$WORKFLOW")
          SOURCE_RELATIVE=workflows/${{ matrix.repository.group }}/$WORKFLOW.yml
          SOURCE=$WORKING_DIRECTORY/mcbscore_workflows/$SOURCE_RELATIVE
          TARGET=./.github/workflows/$(basename -- "$WORKFLOW.yml")

          echo "Ersetze Parameter actionsRepositoryBranch, msdeploymentRepositoryBranch in $SOURCE"

          { # Umleitung nach $TARGET
            cat <<-EOF
        		#
        		# Generated by repo ${{ github.repository }} / workflow ${{ github.workflow }} from file $SOURCE_RELATIVE
        		#
        EOF
            <"$SOURCE" \
              perl   -f '${{ github.action_path }}/replaceWorkflowInputDefaultValue.pl' actionsRepositoryBranch      '${{ github.event.inputs.actionsRepositoryBranch }}' \
              | perl -f '${{ github.action_path }}/replaceWorkflowInputDefaultValue.pl' msdeploymentRepositoryBranch '${{ github.event.inputs.msdeploymentRepositoryBranch }}'
          } 2> >(sed 's=^=\t=') >| "$TARGET"
          git add -v -- "$TARGET"
        done

        git config user.email "it.abr.abba.entw@md.de"
        git config user.name "${{ env.USER }}"

        # git status
        CHANGES_DETECTED=$(git status --porcelain)

        if [ -n "$CHANGES_DETECTED" ]; then
          echo "git commit + push"
          git commit -av -m "Github Workflows aktualisiert"
          # git push origin ${{ matrix.repository.branch }}
          git push
        else
          echo "kein git commit"
        fi
