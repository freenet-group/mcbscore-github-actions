name: 'Distribute Workflow'
description: 'Action zur Verteilung eines Workflows'

inputs:
  repositoryName:
    description: Der Name des Repositories
    required: true
  repositoryGroup:
    description: Die Gruppe der Repositories
    required: true
  repositoryBranch:
    description: Der Branch des Repositories
    required: true
  workflows:
    description: Kommaseparierte Liste der zu verteilenden Workflows
    required: true
  awsAccessKeyId:
    description: AWS Access Key Id
    required: true
  awsSecretAccessKey:
    description: AWS Secret Access Key
    required: true

runs:
  using: "composite"
  steps:
    - id: read-aws-secrets
      name: Read AWS Secrets
      uses: ./actions/read-aws-secrets
      with:
        awsAccessKeyId: ${{ inputs.awsAccessKeyId }}
        awsSecretAccessKey: ${{ inputs.awsSecretAccessKey }}
        awsParameterPairs: |
          /github/secrets/mcbs_token = TOKEN,
          /github/secrets/mcbs_user = USER

    # Ziel Repository auschecken
    - uses: actions/checkout@v4
      with:
        repository: freenet-group/${{ inputs.repositoryName }}
        token: ${{ env.TOKEN }}
        path: ${{ inputs.repositoryName }}
        ref: ${{ inputs.repositoryBranch }}

    - name: Remove invalid workflows
      env:
        workflows: ${{ inputs.workflows }}
        repositoryName: ${{ inputs.repositoryName }}
      shell: bash
      run: |
        # Workflows in grep-freundliche zeilenweise Liste überführen
        workflowList=$(tr , '\n' <<< "$workflows" | sed -e 's/^[[:space:]]*//g')

        workingDirectory=$(pwd)
        workflowDirectory=${workingDirectory}/${repositoryName}/.github/workflows
        cd -- "$repositoryName"

        if [ -d "$workflowDirectory" ]; then
          for filename in ./.github/workflows/*.yml; do
            # Pfad und Dateiendung entfernen
            basename=$(basename -- "$filename" .yml)

            if ! grep --fixed --line-regexp --quiet -- "$basename" <<< "$workflowList"; then # $basename not contained in $workflowList
              echo "git rm $filename"
              git rm -- "$filename"
            fi
          done
        fi

        cd -- "$workingDirectory"

    - name: Add or replace workflows
      env:
        thisRepository: ${{ github.repository }}
        thisWorkflow: ${{ github.workflow }}
        repositoryGroup: ${{ inputs.repositoryGroup }}
        workflows: ${{ inputs.workflows }}
        repositoryName: ${{ inputs.repositoryName }}
      shell: bash
      run: |
        # Workflows in ein Array überführen
        IFS=',' read -ra workflowsArray < <(sed -e 's/[[:space:]]*//g' <<< "$workflows")

        workingDirectory=$(pwd)
        workflowDirectory=${workingDirectory}/${repositoryName}/.github/workflows
        cd -- "$repositoryName"
        mkdir -p -- "$workflowDirectory"

        for workflowName in "${workflowsArray[@]}"; do
          printf 'copying workflow "%s"\n' "$workflowName"
          sourceRelative=workflows/${repositoryGroup}/${workflowName}.yml
          source=$workingDirectory/$sourceRelative
          target=./.github/workflows/$(basename -- "$workflowName.yml")

          {
            printf '#\n# Generated by repo %s / workflow %s from file %s\n#\n' "$thisRepository" "$thisWorkflow" "$sourceRelative"
            cat < "$source"
          } >| "$target"

          git add -v -- "$target"
        done

        declare -A workflowPatternToActions
        workflowPatternToActions=(
          # Manche Actions müssen in jedes Repo:
          ['.+']='select-aws-github-secrets read-aws-secrets'
          # Actions für bestimmte Workflows:
          ['(^|.*/)deployment_k8s']='deploy-to-k8s'
        )
        for workflowPattern in "${!workflowPatternToActions[@]}"; do
          actions=${workflowPatternToActions["$workflowPattern"]}
          printf 'workflowPattern -> actions: "%s" -> "%s"\n' "$workflowPattern" "$actions"
          if ! grep --perl --line-regexp --quiet -- "$workflowPattern" < <(printf '%s\n' "${workflowsArray[@]}"); then continue; fi

          for action in $actions; do	# $actions ohne "" (soll an Whitespace zerfallen)
            printf 'copying action "%s"\n' "$action"
            sourceRelative=actions/$action/action.yml
            source=$workingDirectory/$sourceRelative
            target=.github/actions/$action/action.yml
            mkdir -p ".github/actions/$action"

            {
              printf '#\n# Generated by repo %s / workflow %s from file %s\n#\n' "$thisRepository" "$thisWorkflow" "$sourceRelative"
              cat < "$source"
            } >| "$target"

            git add -v -- "$target"
          done
        done
        pwd
        ls -lrt

    # Clean up existing templates and Copy new templates
    - name: Manage templates
      shell: bash
      run: |
        pwd
        ls -lrt
        # Cleanup
        rm -rf ${{ inputs.repositoryName }}/.github/templates
        
        # Copy new templates
        mkdir -p ${{ inputs.repositoryName }}/.github/templates
        cp ./templates/* ${{ inputs.repositoryName }}/.github/templates/
        
        # Stage changes
        cd ${{ inputs.repositoryName }}
        git add -A .github/templates/

    # Clean up existing dependabot and Copy new dependabot
    - name: Manage dependabot
      shell: bash
      run: |
        pwd
        ls -lrt
        # Cleanup
        rm -f ${{ inputs.repositoryName }}/.github/dependabot.yml
        
        # Copy new dependabot
        cp ./dependabot/dependabot.yml ${{ inputs.repositoryName }}/.github/dependabot.yml
        
        # Stage changes
        cd ${{ inputs.repositoryName }}
        git add -A .github/dependabot.yml

    # Commit and Push changes
    - name: Commit and Push
      shell: bash
      run: |
        pwd
        ls -lrt
        cd ${{ inputs.repositoryName }}

        git config user.email "tp.sd.back.mcbs@freenet.ag"
        git config user.name "$USER"

        # git status
        changesDetected=$(git status --porcelain)

        if [ -n "$changesDetected" ]; then
          echo "git commit + push"
          git commit -av -m "Github Workflows / Templates / Dependabot aktualisiert"
          git push
        else
          echo "No changes to commit"
        fi