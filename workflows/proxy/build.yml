#
# Generated by repo freenet-group/mcbscore-github-actions / workflow Distribute from file workflows/proxy/build.yml
#
name: Build

on:
  push:
    branches-ignore:
      - release
  pull_request:
    branches-ignore:
      - release
      - develop
  workflow_dispatch:
    inputs:
      actionsRepositoryBranch:
        description: Zu benutzender Branch des Repositories mcbscore-github-actions
        required: false
        default: main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ACTIONS_REPOSITORY: freenet-group/mcbscore-github-actions
      ACTIONS_PATH: mcbscore/github

    steps:
      # Repository auschecken unter $GITHUB_WORKSPACE
      - id: checkout-repository
        name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: read-aws-secrets
        name: Read AWS Secrets
        uses: ./.github/actions/read-aws-secrets
        with:
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          awsParameterPairs: |
            /github/secrets/mcbs_token = TOKEN,
            /github/secrets/mcbs_user = USER, 
            /github/secrets/mcbstest_credentials = MCBSTEST_CREDENTIALS,
            /github/common/jira/api_url = JIRA_API_URL,
            /github/secrets/mcbstest_jiracloud_credentials = MCBSTEST_JIRACLOUD_CREDENTIALS,
            /github/common/jira/jira_cloud_url = JIRA_CLOUD_URL

      # Die internen Actions auschecken
      - name: checkout mcbscore-github-actions
        uses: actions/checkout@v3
        with:
          repository: ${{ env.ACTIONS_REPOSITORY }}
          token: ${{ env.TOKEN }}
          path: ${{ env.ACTIONS_PATH }}
          ref: ${{ github.event.inputs.actionsRepositoryBranch }}

      # ##################################################################################
      # Initialize Workflow
      # ##################################################################################

      - id: init-workflow
        name: Initialize Workflow
        uses: ./mcbscore/github/actions/init-workflow
        with:
          installJava: true
          installGithubCli: true
          installJq: true

      # ##################################################################################
      # Version ermitteln
      # ##################################################################################

      - id: determine-build-type-and-branch-name
        name: Determine Build Type And Branch Name
        uses: ./mcbscore/github/actions/build-type-and-branch-name

      - id: determine-component-version
        name: Determine Component Version
        uses: ./mcbscore/github/actions/determine-component-version-jc
        with:
          component: ${{ env.COMPONENT }}
          includedComponents: ${{ env.INCLUDED_COMPONENTS }}

      # ##################################################################################
      # Release bauen
      # ##################################################################################

      - name: Inject Version
        shell: bash
        run: |
          chmod +x ./inject_version.sh
          ./inject_version.sh ${{ env.COMPONENT_VERSION }}

      - name: Commit version
        if: env.BUILD_TYPE == 'RELEASE'
        shell: bash
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git commit -am "[tagging] ${{ env.COMPONENT_VERSION }}"
          git push

      - name: Run Build
        shell: bash
        run: |
          docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GH_R_PACKAGES }}
          chmod +x ./build.sh
          ./build.sh

      # Existierende Draft Releases löschen
      - name: Delete draft releases
        if: env.BUILD_TYPE == 'DEVELOP' && env.PACKAGE_NAME == ''
        uses: hugo19941994/delete-draft-releases@v1.0.0
        env:
          GITHUB_TOKEN: ${{ env.TOKEN }}

      # Release erstellen
      - name: Create Release
        id: create_release
        if: env.BUILD_TYPE == 'RELEASE' || (env.BUILD_TYPE == 'DEVELOP' && env.PACKAGE_NAME == '')
        uses: ./mcbscore/github/actions/create-release
        with:
          tagName: ${{ env.TAG_PREFIX }}${{ env.COMPONENT_VERSION }}
          releaseName: ${{ env.RELEASE_PREFIX }}${{ env.COMPONENT_VERSION }}
          draft: ${{ env.DRAFT }}

       # MD Release ZIP zu Assets hinzufügen, wenn PACKAGE_NAME nicht gesetzt
      - name: Upload MD Proxy
        id: upload-md-proxy
        if: ${{ (env.BUILD_TYPE == 'RELEASE' || env.BUILD_TYPE == 'DEVELOP') && hashFiles(format('**/{0}-md.tar.gz', env.COMPONENT)) != '' }} && env.PACKAGE_NAME == ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ env.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.COMPONENT }}-md.tar.gz
          asset_name: ${{ env.COMPONENT }}-md-${{ env.COMPONENT_VERSION }}.tar.gz
          asset_content_type: application/gzip

       # KM Release ZIP hinzufügen, wenn PACKAGE_NAME nicht gesetzt
      - name: Upload KM Proxy
        id: upload-km-proxy
        if: ${{ (env.BUILD_TYPE == 'RELEASE' || env.BUILD_TYPE == 'DEVELOP') && hashFiles(format('**/{0}-km.tar.gz', env.COMPONENT)) != '' }} && env.PACKAGE_NAME == ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ env.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.COMPONENT }}-km.tar.gz
          asset_name: ${{ env.COMPONENT }}-km-${{ env.COMPONENT_VERSION }}.tar.gz
          asset_content_type: application/gzip

      # FM Release ZIP hinzufügen, wenn PACKAGE_NAME nicht gesetzt
      - name: Upload FM Proxy
        id: upload-fm-proxy
        if: ${{ (env.BUILD_TYPE == 'RELEASE' || env.BUILD_TYPE == 'DEVELOP') && hashFiles(format('**/{0}-fm.tar.gz', env.COMPONENT)) != '' }} && env.PACKAGE_NAME == ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ env.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.COMPONENT }}-fm.tar.gz
          asset_name: ${{ env.COMPONENT }}-fm-${{ env.COMPONENT_VERSION }}.tar.gz
          asset_content_type: application/gzip

      # Datei mit Secret Mappings hinzufügen, wenn PACKAGE_NAME nicht gesetzt
      - name: Upload Secret Mappings
        id: upload-secret-mapping
        if: (env.BUILD_TYPE == 'RELEASE' || env.BUILD_TYPE == 'DEVELOP') && hashFiles('secretMappings.txt') != '' && env.PACKAGE_NAME == ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ env.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: secretMappings.txt
          asset_name: secretMappings.txt
          asset_content_type: text/plain

      # Artefakte mit Gradle nach GitHub-Packages publishen, wenn PACKAGE_NAME gesetzt
      - name: Publish With Gradle
        id: publish-with-gradle
        if: (env.BUILD_TYPE == 'RELEASE' || env.BUILD_TYPE == 'DEVELOP') && env.PACKAGE_NAME != ''
        shell: bash
        run: |
          sh ./gradlew publish

      # ##################################################################################
      # Re-Merge
      # ##################################################################################
      - name: Merge development -> staging
        if: env.BUILD_TYPE == 'RELEASE'
        uses: devmasx/merge-branch@master
        with:
          type: now
          from_branch: release
          target_branch: develop
          github_token: ${{ env.TOKEN }}

      # Starte Deployment auf DEV
      - name: Invoke DEV deployment workflow
        if: env.BUILD_TYPE == 'DEVELOP'
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: DEV Deployment
          token: ${{ env.TOKEN }}
          inputs: '{ "componentVersion": "${{ env.COMPONENT_VERSION }}" }'

      # Starte postBuild auf RELEASE
      - name: Invoke postBuild workflow
        if: env.BUILD_TYPE == 'RELEASE'
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: PostBuild
          token: ${{ env.TOKEN }}
          inputs: '{ "releaseVersion": "${{ env.COMPONENT_VERSION }}" , "issueList": "${{ env.ISSUE_LIST }}" }'
