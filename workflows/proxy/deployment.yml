name: Wiederverwendbarer Deployment Workflow

on:
  workflow_call:
    inputs:
      componentVersion:
        description: Die Version der Komponente
        type: string
        required: true
      company:
        description: Die Organisation (md, fm, km)
        type: string
        required: true
      stage:
        description: Die Zielumgebung
        type: string
        required: true
      externalProxy:
        description: Flag für externes Deployment
        type: boolean
        required: false
        default: false
      actionsRepositoryBranch:
        description: Zu benutzender Branch des Repositories mcbscore-github-actions
        type: string
        required: false
        default: main
      deploymentTarget:
        description: Zielserver für das Deployment
        type: string
        required: true
      additionalDeploymentTarget:
        description: Zusätzlicher Zielserver für das Deployment
        type: string
        required: false
      bambiNotification:
        description: Bambi Notification?
        type: string
        required: false
        default: "false"
      deployForKubernetes:
        description: soll für Kubernetes-Zugriff deployt werden?
        type: string
        required: false
        default: "false"

jobs:
  create-deployment:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    # Secrets aus AWS auslesen
    - name: Read and set AWS credentials
      uses:  ./.github/actions/read-aws-secrets
      with:
        awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
        awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        awsParameterPairs: |
          /github/secrets/mcbs_token = TOKEN

    - name: Determine deployment ref
      # DEPLOYMENT_REF Umgebungsvariable setzen
      shell: bash
      run: |
        if  [[ ${{ github.event.inputs.componentVersion }} =~ '-SNAPSHOT' ]] ;
        then
          echo "DEPLOYMENT_REF=develop" >> $GITHUB_ENV
        else
          echo "DEPLOYMENT_REF=${{ github.event.inputs.componentVersion }}" >> $GITHUB_ENV
        fi

    - name: Determine environment suffix
      id: determine-suffix
      shell: bash
      run: |
        if  [[ ${{ inputs.externalProxy }} == 'true' ]] ;
        then
          echo "suffix=-extern" >> $GITHUB_OUTPUT
        else
          echo "suffix=" >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub deployment
      uses: chrnorm/deployment-action@v2
      id: create-deployment
      with:
        token: ${{ env.TOKEN }}
        environment: ${{ inputs.stage }}-${{ inputs.company }}${{ steps.determine-suffix.outputs.suffix }}
        ref: ${{ env.DEPLOYMENT_REF }}

    outputs:
      deployment_id: ${{ steps.create-deployment.outputs.deployment_id }}

  deploy:
    # self-hosted Runner für die Steps benutzen, um Zugriff auf MD Systeme zu haben
    runs-on: [self-hosted, k8s]
    needs: create-deployment
    env:
      ACTIONS_REPOSITORY: freenet-group/mcbscore-github-actions
      ACTIONS_PATH: mcbscore/github
      NODEJS_VERSION: 20

    steps:
    # Owner für alle Dateien des $GITHUB_WORKSPACE auf den Runner User setzen
    - name: Change Owner to Runner User
      if: ${{ always() }}
      run: |
        docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GH_R_PACKAGES }}
        docker run --rm -v `pwd`:/target -w /target -t ghcr.io/freenet-group/container-base-images/ubuntu_2004_lts:latest sh -c "chown $(id -u):$(id -g) -R /target"

    - name: Ensure clean workspace
      # Leeren Workspace sicherstellen
      run: |
        echo "Cleaning up previous run"
        rm -rf *

    - id: checkout-repository
      # Repository auschecken unter $GITHUB_WORKSPACE
      name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - id: read-aws-secrets
      name: Read AWS Secrets
      uses: ./.github/actions/read-aws-secrets
      with:
        awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
        awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        awsParameterPairs: |
          /github/secrets/mcbs_token = TOKEN,
          /github/secrets/deployment_user = DEPLOYMENT_USER,
          /github/secrets/ssh/apigw/zxrestapi_ppk = SSH_KEY

    - name: checkout mcbscore-github-actions
      # Die internen Actions auschecken
      uses: actions/checkout@v4
      with:
        repository: ${{ env.ACTIONS_REPOSITORY }}
        token: ${{ env.TOKEN }}
        path: ${{ env.ACTIONS_PATH }}
        ref: ${{ inputs.actionsRepositoryBranch }}

    # ##################################################################################
    # Initialize Workflow
    # ##################################################################################

    - id: init-workflow
      name: Initialize Workflow
      uses: ./mcbscore/github/actions/init-workflow
      with:
        installNodeJs: true
        installJq: true

    - name: Download Release
      if: ${{ inputs.deployForKubernetes == 'false' }}
      uses: ./mcbscore/github/actions/download-release-assets
      with:
        version: ${{ inputs.componentVersion }}
        assetPattern: '${{ env.COMPONENT }}-${{ inputs.company }}-${{ inputs.componentVersion }}.tar.gz'
        targetPath: './release'
        token: ${{ env.TOKEN }}

    - name: Download k8s-Release
      if: ${{ inputs.deployForKubernetes == 'true' }}
      uses: ./mcbscore/github/actions/download-release-assets
      with:
        version: ${{ inputs.componentVersion }}
        assetPattern: '${{ env.COMPONENT }}-${{ inputs.company }}-${{ inputs.componentVersion }}_k8s.tar.gz'
        targetPath: './release'
        token: ${{ env.TOKEN }}

    - name: Rename k8s-Artifact
      if: ${{ inputs.deployForKubernetes == 'true' }}
      shell: bash
      run: |
        mv ./release/${{ env.COMPONENT }}-${{ inputs.company }}-${{ inputs.componentVersion }}_k8s.tar.gz ./release/${{ env.COMPONENT }}-${{ inputs.company }}-${{ inputs.componentVersion }}.tar.gz

    - name: Download Secret Mappings
      uses: ./mcbscore/github/actions/download-release-assets
      with:
        version: ${{ inputs.componentVersion }}
        assetPattern: 'secretMappings.txt'
        targetPath: './release'
        token: ${{ env.TOKEN }}

    - name: Decompress Release Archive
      if: hashFiles('./release/secretMappings.txt') != ''
      shell: bash
      run: |
        mkdir ./release/${{ env.COMPONENT }}-${{ inputs.company }}-${{ inputs.componentVersion }}
        tar xfzv ./release/${{ env.COMPONENT }}-${{ inputs.company }}-${{ inputs.componentVersion }}.tar.gz -C ./release/${{ env.COMPONENT }}-${{ inputs.company }}-${{ inputs.componentVersion }}

    - name: Setup AWS CLI
      if: hashFiles('./release/secretMappings.txt') != ''
      uses: freenet-actions/setup-aws-cli@v3

    - name: Place Secrets
      if: hashFiles('./release/secretMappings.txt') != ''
      uses: ./mcbscore/github/actions/replace-aws-parameters
      with:
        awsKey: ${{ secrets.AWS_ACCESS_KEY_ID }}
        awsSecret: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        directory: ./release/${{ env.COMPONENT }}-${{ inputs.company }}-${{ inputs.componentVersion }}
        parameterFile: ./release/secretMappings.txt

    - name: Compress Release Archive
      if: hashFiles('./release/secretMappings.txt') != ''
      shell: bash
      run: |
        WORKING_DIRECTORY=$(pwd)
        cd ./release/${{ env.COMPONENT }}-${{ inputs.company }}-${{ inputs.componentVersion }}
        tar cfzv ../${{ env.COMPONENT }}-${{ inputs.company }}-${{ inputs.componentVersion }}.tar.gz *
        cd -- "$WORKING_DIRECTORY"

    - name: OIDC special handling
      # Spezialbehandlung für OIDC
      shell: bash
      run: |
        if  [[ ${{ env.PROXY_NAME }} == oidc && ${{ inputs.externalProxy }} == 'true' ]] ;
        then
          echo "TAR_SUB_COMMAND=--exclude='http.conf'" >> $GITHUB_ENV
        else
          # default ist leer
          echo "TAR_SUB_COMMAND=" >> $GITHUB_ENV
        fi

    - name: Deployment
      # Deployment
      id: deploy-release-server-1
      uses: ./mcbscore/github/actions/deploy-proxy-action
      with:
        proxyName: ${{ inputs.company }}-${{ env.PROXY_NAME }}
        company: ${{ inputs.company }}
        component: ${{ env.COMPONENT }}
        componentVersion: ${{ inputs.componentVersion }}
        host: ${{ inputs.deploymentTarget }}
        deploymentUser: ${{ env.DEPLOYMENT_USER }}
        sshKey: ${{ env.SSH_KEY }}
        externalProxy: ${{ inputs.externalProxy }}
        additionalTarParams: ${{ env.TAR_SUB_COMMAND }}

    # Deployment
    - name: Deployment
      if: ${{ inputs.additionalDeploymentTarget != '' }}
      id: deploy-release-server-2
      uses: ./mcbscore/github/actions/deploy-proxy-action
      with:
        proxyName: ${{ inputs.company }}-${{ env.PROXY_NAME }}
        company: ${{ inputs.company }}
        component: ${{ env.COMPONENT }}
        componentVersion: ${{ inputs.componentVersion }}
        host: ${{ inputs.additionalDeploymentTarget }}
        deploymentUser: ${{ env.DEPLOYMENT_USER }}
        sshKey: ${{ env.SSH_KEY }}
        externalProxy: ${{ inputs.externalProxy }}
        additionalTarParams: ${{ env.TAR_SUB_COMMAND }}

    # Deployment als erfolgreich markieren
    - name: Update deployment status (success)
      if: success()
      uses: chrnorm/deployment-status@v2
      with:
        token: ${{ env.TOKEN }}
        state: "success"
        deployment-id: ${{ needs.create-deployment.outputs.deployment_id }}

    # Deployment als fehlerhaft markieren
    - name: Update deployment status (failure)
      if: failure()
      uses: chrnorm/deployment-status@v2
      with:
        token: ${{ env.TOKEN }}
        state: "failure"
        deployment-id: ${{ needs.create-deployment.outputs.deployment_id }}

    outputs:
      componentName: ${{ env.COMPONENT }}

  bambi-notification:
    # self-hosted Runner für die Steps benutzen, um Zugriff auf MD Systeme zu haben
    runs-on: [self-hosted, k8s]
    needs: deploy
    if: ${{ always() && !contains(needs.deploy.result, 'failure') && !contains(needs.deploy.result, 'cancelled') && inputs.bambiNotification == 'true' }}
    steps:
    # Deployment als erfolgreich melden
    - name: Report deployment status
      shell: bash
      run: |
        curlResult=$(curl -sw %{http_code} --location --request POST 'https://bambi-api-prod.md-abr-prod.k8s.freenet-group.de/v2/bambi/deployment/environmentversion' \
        --header 'Content-Type: application/json' \
        --data-raw '{
          "version": "${{ inputs.componentVersion }}",
          "organisation": "${{ inputs.company }}",
          "componentName": "${{ needs.deploy.outputs.componentName }}",
          "workflowName": "${{ github.workflow }}",
          "environment": "${{ inputs.stage }}",
          "extern": ${{ inputs.externalProxy }},
          "workflowRunId": ${{ github.run_id }},
          "deployState": "successfull",
          "deployUser": "${{ github.actor }}"
        }')
        statusCode="${curlResult:${#curlResult}-3}"
        echo "statusCode: $statusCode"

        if [[ "statusCode" -ge "400" ]]; then
          echo "Result: $curlResult"
          exit 1
        fi
