name: DeploymentDockerDB

on:
  push:
    branches:
      - develop

jobs:
  deploy:
    # self-hosted Runner für die Steps benutzen, um Zugriff auf MD Systeme zu haben
    runs-on: [self-hosted, vm]

    steps:
      # Owner für alle Dateien des $GITHUB_WORKSPACE auf den Runner User setzen
      - name: Change Owner to Runner User
        if: ${{ always() }}
        run: |
          docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GH_R_PACKAGES }}
          docker run --rm -v `pwd`:/target -w /target -t ghcr.io/freenet-group/container-base-images/ubuntu_2004_lts:latest sh -c "chown $(id -u):$(id -g) -R /target"

      # Leeren Workspace sicherstellen
      - name: Ensure clean workspace
        run: |
          echo "Cleaning up previous run"
          rm -rf *

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: read-aws-secrets
        name: Read AWS Secrets
        uses: ./.github/actions/read-aws-secrets
        with:
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          awsParameterPairs: |
            /github/secrets/mcbs_token = TOKEN,
            /github/secrets/ssh/mcbstest_id_rsa = ID_RSA

      # DB-Dateien packen
      - name: create db tar
        run: |
          tar -cvzf importer-database.tar.gz importer-database

      # Docker-DB-Dateien kopieren
      - name: copy files via SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DB_SERVER_HOST }}
          username: ${{ secrets.DB_SERVER_USER }}
          key: ${{ env.ID_RSA }}
          #key_path: ./my_id_rsa
          port: ${{ secrets.DB_SERVER_PORT }}
          source: "importer-database.tar.gz"
          target: "db-container-importer"

      # Docker-DB herunterfahren, Dateien entpacken, Docker-DB starten
      - name: multiple command
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DB_SERVER_HOST }}
          username: ${{ secrets.DB_SERVER_USER }}
          key: ${{ env.ID_RSA }}
          port: ${{ secrets.DB_SERVER_PORT }}
          script_stop: true
          script: |
            cd db-container-importer
            sh stopLocalDb.sh
            tar -xvzf importer-database.tar.gz
            sh runLocalDbInBg.sh
            rm importer-database.tar.gz