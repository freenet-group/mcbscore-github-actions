name: Deployment
#Name für den workflow. Wichtig bei mehreren workflows im selben Repository um die workflows im actions-tab unterscheiden zu können.
run-name: Deployment ${{ github.event.inputs.component }}:${{ github.event.inputs.componentVersion }} auf ${{ github.event.inputs.environment }}

on:
  workflow_dispatch:
    inputs:
      component:
        description: Der Name der Komponente
        required: true
      componentVersion:
        description: Die Version der Komponente
        required: true
      additionalDeploymentComponent:
        description: Ermöglicht Deployment unter anderem Namen
        required: false
      environment:
        description: Die Zielumgebung
        required: true
      reusableWorkflowsVersion:
        description: Zu benutzende Version des Repositories mcbscore-reusable-workflows (Tag, Commit oder Branchname)
        required: false
        default: v1
      actionsRepositoryBranch:
        description: Zu benutzender Branch des Repositories mcbscore-github-actions
        type: string
        required: false
        default: main
      deploymentRepositoryBranch:
        description: Branch von Repository ms-deployment, der benutzt werden soll
        required: false
        default: main
  workflow_call:
    inputs:
      component:
        description: Der Name der Komponente
        required: true
        type: string
      componentVersion:
        description: Die Version der Komponente
        required: true
        type: string
      additionalDeploymentComponent:
        description: Ermöglicht Deployment unter anderem Namen
        required: false
        type: string
      environment:
        description: Die Zielumgebung
        required: true
        type: string
      reusableWorkflowsVersion:
        description: Zu benutzende Version des Repositories mcbscore-reusable-workflows (Tag, Commit oder Branchname)
        required: false
        default: v1
      actionsRepositoryBranch:
        description: Zu benutzender Branch des Repositories mcbscore-github-actions
        type: string
        required: false
        default: main
      deploymentRepositoryBranch:
        description: Branch von Repository ms-deployment, der benutzt werden soll
        required: false
        default: main
        type: string


env:
  ACTIONS_REPOSITORY: freenet-group/mcbscore-github-actions
  ACTIONS_PATH: mcbscore/github
  DEPLOYMENT_PATH: mcbscore/deployment
  NODEJS_VERSION: 20

jobs:
  create-deployment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read and set AWS credentials
        uses: ./.github/actions/read-aws-secrets
        with:
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          awsParameterPairs: |
            /github/secrets/mcbs_token = TOKEN

      - name: Determine deployment ref
        shell: bash
        run: |
          if  [[ ${{ github.event.inputs.componentVersion }} =~ '-SNAPSHOT' ]] ;
          then
            echo "DEPLOYMENT_REF=develop" >> $GITHUB_ENV
          else
            echo "DEPLOYMENT_REF=${{ github.event.inputs.componentVersion }}" >> $GITHUB_ENV
          fi

      - name: Create GitHub deployment
        uses: chrnorm/deployment-action@v2
        id: create-deployment
        with:
          token: ${{ env.TOKEN }}
          environment: ${{ github.event.inputs.environment }}
          ref: ${{ env.DEPLOYMENT_REF }}

    outputs:
      deployment_id: ${{ steps.create-deployment.outputs.deployment_id }}

  deploy:
    # self-hosted Runner für die Steps benutzen, um Zugriff auf MD Systeme zu haben
    runs-on: [self-hosted, k8s]
    needs: create-deployment
    steps:
      - name: Change Owner to Runner User
        if: ${{ always() }}
        run: |
          docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GH_R_PACKAGES }}
          docker run --rm -v `pwd`:/target -w /target -t ghcr.io/freenet-group/container-base-images/ubuntu_2004_lts:latest sh -c "chown $(id -u):$(id -g) -R /target"

      - name: Ensure clean workspace
        run: |
          echo "Cleaning up previous run"
          rm -rf *

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read AWS Secrets
        uses: ./.github/actions/read-aws-secrets
        with:
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          awsParameterPairs: |
            /github/secrets/mcbs_token = TOKEN,
            /github/secrets/deployment_user = DEPLOYMENT_USER,
            /github/secrets/ssh/mdmcbsapi-app/zxrestapi_ppk = SSH_KEY,
            /github/secrets/checkmk_user = CHECKMK_USER,
            /github/secrets/checkmk_password = CHECKMK_PW

      - name: checkout mcbscore-github-actions
        uses: actions/checkout@v4
        with:
          repository: ${{ env.ACTIONS_REPOSITORY }}
          token: ${{ env.TOKEN }}
          path: ${{ env.ACTIONS_PATH }}
          ref: ${{ inputs.actionsRepositoryBranch }}

      - name: Checkout Deployment Data / Scripts
        uses: actions/checkout@v4
        with:
          repository: freenet-group/ms-deployment
          token: ${{ env.TOKEN }}
          path: ${{ env.DEPLOYMENT_PATH }}
          ref: ${{ github.event.inputs.deploymentRepositoryBranch }}

      - name: Initialize Workflow
        uses: ./mcbscore/github/actions/init-workflow
        with:
          installJavaWithNashornEngine: true
          installNodeJs: true
          installJq: true

      - name: Download Release
        id: downloadRelease
        uses: ./mcbscore/github/actions/download-release-assets
        with:
          version: ${{ github.event.inputs.componentVersion }}
          assetPattern: '-${{ github.event.inputs.componentVersion }}.jar'
          targetPath: './${{ env.DEPLOYMENT_PATH }}/release'
          token: ${{ env.TOKEN }}

      - name: Standard Deployment
        id: deployRelease
        if: ${{ github.event.inputs.additionalDeploymentComponent == '' }}
        uses: ./mcbscore/github/actions/deploy-microservice
        with:
          component: ${{ github.event.inputs.component }}
          stage: ${{ github.event.inputs.environment }}
          componentConfigPath: ${{ env.DEPLOYMENT_PATH }}
          dockerImage: ghcr.io/freenet-group/mcbs-core/ms-${{ github.event.inputs.component }}:${{ github.event.inputs.componentVersion }}
          checkMkUser: ${{ env.CHECKMK_USER }}
          checkMkSecret: ${{ env.CHECKMK_PW }}
          deploymentUser: ${{ env.DEPLOYMENT_USER }}
          sshKey: ${{ env.SSH_KEY }}
          dockerRegistryToken: ${{ env.TOKEN }}

      - name: Custom Deployment
        id: additionalDeployment
        if: ${{ github.event.inputs.additionalDeploymentComponent != '' }}
        uses: ./mcbscore/github/actions/deploy-microservice
        with:
          component: ${{ github.event.inputs.additionalDeploymentComponent }}
          stage: ${{ github.event.inputs.environment }}
          componentConfigPath: ${{ env.DEPLOYMENT_PATH }}
          checkMkUser: ${{ env.CHECKMK_USER }}
          checkMkSecret: ${{ env.CHECKMK_PW }}
          deploymentUser: ${{ env.DEPLOYMENT_USER }}
          sshKey: ${{ env.SSH_KEY }}

      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ env.TOKEN }}
          state: "success"
          deployment-id: ${{ needs.create-deployment.outputs.deployment_id }}

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ env.TOKEN }}
          state: "failure"
          deployment-id: ${{ needs.create-deployment.outputs.deployment_id }}

    outputs:
      componentName: ${{ env.JIRA_COMPONENT }}

  deploy_k8s:
    needs: [create-deployment]
    uses: freenet-group/mcbscore-reusable-workflows/.github/workflows/deployment_k8s.yml@${{ github.event.inputs.reusableWorkflowsVersion }}
    secrets: inherit
    with:
      componentVersion: ${{ github.event.inputs.componentVersion }}
      environment: ${{ github.event.inputs.environment }}
      component: ${{ github.event.inputs.component }}

  sanity_test:
    needs: [deploy, deploy_k8s]
    # self-hosted Runner für die Steps benutzen, um Zugriff auf MD Systeme zu haben
    runs-on: [self-hosted, k8s]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: AWS Secrets für Sanity-Test auslesen
        uses: ./.github/actions/read-aws-secrets
        with:
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          awsParameterPairs: |
            /github/secrets/mcbs_token = TOKEN,
            /config/ms/application_${{ github.event.inputs.environment}}/sts.md.client.mcbs-test-client.clientId = SANITY_CLIENT_ID,
            /config/ms/application_${{ github.event.inputs.environment}}/sts.md.client.mcbs-test-client.clientSecret = SANITY_CLIENT_SECRET,
            /config/ms/application_${{ github.event.inputs.environment}}/sts.md.base.url = SANITY_STS_URL,
            /config/ms/application_${{ github.event.inputs.environment}}/api.gateway.md.${{ github.event.inputs.environment}}.base.url = SANITY_API_GATEWAY

      - name: Read workflow.properties
        shell: bash
        run: |
          cat ./.github/workflow.properties >> $GITHUB_ENV

      - name: checkout mcbscore-github-actions
        uses: actions/checkout@v4
        with:
          repository: ${{ env.ACTIONS_REPOSITORY }}
          token: ${{ env.TOKEN }}
          path: ${{ env.ACTIONS_PATH }}
          ref: ${{ inputs.actionsRepositoryBranch }}

      - name: Initialize Workflow
        uses: ./mcbscore/github/actions/init-workflow
        with:
          installJava: true
          installNodeJs: true
          installJq: true

      - name: Prüfe ob SanityTest.feature existiert und aktiviert ist
        id: checkFeatureFileExists
        run: |
          # Disable sanity tests if feature file does not exist
          if [[ "${{ env.SANITY_TESTS_ENABLED }}" == "false" ]]; then
            echo "sanityTestExists=false" >> "$GITHUB_OUTPUT"
          else
            # Check if feature file exists
            if [[ -z "${{ hashFiles('**/sanityTests/*.feature') }}" ]]; then
              echo "sanityTestExists=false" >> "$GITHUB_OUTPUT"
            else
              echo "sanityTestExists=true" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: Token holen
        if: ${{steps.checkFeatureFileExists.outputs.sanityTestExists == 'true'}}
        id: getToken
        uses: ./mcbscore/github/actions/get-application-token
        with:
          clientId: ${{ env.SANITY_CLIENT_ID }}
          clientSecret: ${{ env.SANITY_CLIENT_SECRET }}
          tokenUrl: ${{ env.SANITY_STS_URL }}/v1/oidc/token

      - name: Karate Tests ausführen
        if: ${{steps.checkFeatureFileExists.outputs.sanityTestExists == 'true'}}
        uses: DasBen/karate-action@0.1.0
        with:
          karateVersion: ${{ env.KARATE_VERSION }}
          baseUrl: ${{ env.SANITY_API_GATEWAY }}
          testDir: './sanityTests'
          testFilePath: 'SanityTest.feature'
          authToken: "Bearer ${{ steps.getToken.outputs.accessToken }}"

  bambi-notification:
    # self-hosted Runner für die Steps benutzen, um Zugriff auf MD Systeme zu haben
    runs-on: [self-hosted, k8s]
    needs: [deploy, deploy_k8s]
    # Der Check success() ist nicht true bei übersprungenen workflows. !failure() dahingegen sieht übersprungenen nicht als failure und nur rote Steps
    if: ${{ always() && !failure() && !contains(needs.deploy.result, 'failure') && !contains(needs.deploy.result, 'cancelled') && (github.event.inputs.environment == 'git' || github.event.inputs.environment == 'b2b' || github.event.inputs.environment == 'prod') }}
    steps:
      - name: Report deployment status
        shell: bash
        run: |
          curlResult=$(curl -sw %{http_code} --location --request POST 'https://bambi-api-prod.md-abr-prod.k8s.freenet-group.de/v2/bambi/deployment/environmentversion' \
          --header 'Content-Type: application/json' \
          --data-raw '{
            "version": "${{ github.event.inputs.componentVersion }}",
            "componentName": "${{ needs.deploy.outputs.componentName }}",
            "originComponentName": "${{ github.event.inputs.component }}",
            "workflowName": "${{ github.workflow }}",
            "environment": "${{ github.event.inputs.environment }}",
            "extern": false,
            "workflowRunId": ${{ github.run_id }},
            "deployState": "successfull",
            "deployUser": "${{ github.actor }}"
          }')
          echo "Result: $curlResult"
          statusCode="${curlResult:${#curlResult}-3}"
          echo "statusCode: $statusCode"

          if [[ "statusCode" -ge "400" ]]; then
            echo "Result: $curlResult"
            exit 1
          fi
