name: K8s Deployment
# Launcher Workflow für den reusable Workflow deployment_k8s.yml, Sanity Test und Github-Deployment-Status.
# Für Microservices, die (den jetzt reusable Workflow) deployment_k8s.yml brauchen und kein klassisches Appserver-Deployment (deployment.yml).
# Nicht nötig für Microservices, die deployment.yml haben, da der auch den reusable Workflow deployment_k8s.yml startet.

#Name für den workflow. Wichtig bei mehreren workflows im selben Repository um die workflows im actions-tab unterscheiden zu können.
run-name: K8s ${{ inputs.environment }} Deployment ${{ inputs.component }} ${{ inputs.componentVersion }} dry=${{ inputs.dryRun }}

on:
  workflow_dispatch:
    inputs:
      component:
        description: Der Name der Komponente
        required: true
      componentVersion:
        description: Die Version der Komponente
        required: true
      environment:
        description: Die Zielumgebung
        required: true
      timeout:
        description: Zeit, nach der das Helm Deployment zurückgerollt wird, wenn noch nicht erfolgreich
        required: false
        default: 10m0s
      actionsRepositoryBranch:
        description: Zu benutzender Branch des Repositories mcbscore-github-actions
        type: string
        required: false
        default: main
      deploymentRepositoryBranch:
        description: Branch von Repository ms-deployment, der benutzt werden soll
        required: false
        default: main
      maxWaitForDeployment:
        description: maximale Zeit, die beim Helm-Statusscheck auf ein Deployment gewartet wird
        required: false
        default: 11m0s
      dryRun:
        type: boolean
        description: Nicht deployen, nur Helm Chart Ergebnis anzeigen (helm --dry-run)
        required: false
        default: false

env:
  ACTIONS_REPOSITORY: freenet-group/mcbscore-github-actions
  ACTIONS_PATH: mcbscore/github
  NODEJS_VERSION: 20

jobs:
  create-deployment:
    runs-on: ubuntu-latest

    steps:
      - name: Show Params
        env:
          INPUTS_JSON: ${{ toJSON(inputs) }}
        run: printf '%s\n' "$INPUTS_JSON"

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read and set AWS credentials
        uses: ./.github/actions/read-aws-secrets
        with:
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          awsParameterPairs: |
            /github/secrets/mcbs_token = TOKEN

      - name: Determine deployment ref
        shell: bash
        run: |
          if  [[ ${{ github.event.inputs.componentVersion }} =~ '-SNAPSHOT' ]] ;
          then
            echo "DEPLOYMENT_REF=develop" >> $GITHUB_ENV
          else
            echo "DEPLOYMENT_REF=${{ github.event.inputs.componentVersion }}" >> $GITHUB_ENV
          fi

      - name: Create GitHub deployment
        uses: chrnorm/deployment-action@v2.0.7
        id: create-deployment
        with:
          token: ${{ env.TOKEN }}
          environment: ${{ inputs.environment }}
          description: "Deployment nach k8s"
          ref: ${{ env.DEPLOYMENT_REF }}

    outputs:
      deployment_id: ${{ steps.create-deployment.outputs.deployment_id }}

  deploy_k8s:
    needs: [create-deployment]
    uses: freenet-group/mcbscore-reusable-workflows/.github/workflows/deployment_k8s.yml@1.0.2
    secrets: inherit
    with:
      componentVersion: ${{ inputs.componentVersion }}
      environment: ${{ inputs.environment }}
      component: ${{ inputs.component }}
      timeout: ${{ inputs.timeout }}
      deploymentRepositoryBranch: ${{ inputs.deploymentRepositoryBranch }}
      maxWaitForDeployment: ${{ inputs.maxWaitForDeployment }}
      dryRun: ${{ inputs.dryRun }}

  deployment_status:
    needs: [create-deployment, deploy_k8s]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read AWS Secrets
        uses: ./.github/actions/read-aws-secrets
        with:
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          awsParameterPairs: |
            /github/secrets/mcbs_token = TOKEN

      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@v2.0.3
        with:
          token: ${{ env.TOKEN }}
          state: "success"
          deployment-id: ${{ needs.create-deployment.outputs.deployment_id }}

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2.0.3
        with:
          token: ${{ env.TOKEN }}
          state: "failure"
          deployment-id: ${{ needs.create-deployment.outputs.deployment_id }}


  sanity_test:
    needs: [deploy_k8s]
    # self-hosted Runner für die Steps benutzen, um Zugriff auf MD Systeme zu haben
    runs-on: [self-hosted, k8s]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read and set AWS credentials
        uses: ./.github/actions/read-aws-secrets
        with:
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          awsParameterPairs: |
            /github/secrets/mcbs_token = TOKEN

      - name: checkout mcbscore-github-actions
        uses: actions/checkout@v4
        with:
          repository: '${{ env.ACTIONS_REPOSITORY }}'
          token: '${{ env.TOKEN }}'
          path: '${{ env.ACTIONS_PATH }}'
          ref: '${{ inputs.actionsRepositoryBranch }}'

      - name: Initialize Workflow
        uses: ./mcbscore/github/actions/init-workflow
        with:
          installJava: true
          installNodeJs: true
          installJq: true

      - name: Karate Tests ausführen
        if: env.SANITY_TESTS_ENABLED != 'false'
        uses: ./mcbscore/github/actions/sanity-test
        with:
          component: '${{ inputs.component }}'
          environment: '${{ inputs.environment }}'
          awsAccessKeyId: '${{ secrets.AWS_ACCESS_KEY_ID }}'
          awsSecretAccessKey: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          karateVersion: '${{ env.KARATE_VERSION }}'	#aus workflow.properties per init-workflow
          testDir: './sanityTests'
          testFiles: 'SanityTest.feature'
