name: K8s Deployment
#Name fuer den workflow. Wichtig bei mehreren workflows im selben Repository um die workflows im actions-tab unterscheiden zu koennen.
run-name: K8s ${{ github.event.inputs.environment }} Deployment ${{ github.event.inputs.component }} ${{ github.event.inputs.componentVersion }} dry=${{ github.event.inputs.dryRun }}

on:
  #für direkten workflow start über githubactions
  workflow_dispatch:
    inputs:
      component:
        description: Der Name der Komponente
        required: true
      componentVersion:
        description: Die Version der Komponente
        required: true
      environment:
        description: Die Zielumgebung
        required: true
      timeout:
        description: Zeit, nach der das Helm Deployment zurückgerollt wird, wenn noch nicht erfolgreich
        required: false
        default: 10m0s
      deploymentRepositoryBranch:
        description: Branch von Repository ms-deployment, der benutzt werden soll
        required: false
        default: main
      maxWaitForDeployment:
        description: maximale Zeit, die beim Helm-Statusscheck auf ein Deployment gewartet wird
        required: false
        default: 11m0s
      dryRun:
        type: boolean
        description: Nicht deployen, nur Helm Chart Ergebnis anzeigen (helm --dry-run)
        required: false
        default: false
  #wenn andere workflows diesen Workflow einbinden
  workflow_call:
    inputs:
      component:
        description: Der Name der Komponente
        required: true
        type: string
      componentVersion:
        description: Die Version der Komponente
        required: true
        type: string
      environment:
        description: Die Zielumgebung
        required: true
        type: string
      timeout:
        description: Zeit, nach der das Helm Deployment zurückgerollt wird, wenn noch nicht erfolgreich
        required: false
        default: 10m0s
        type: string
      deploymentRepositoryBranch:
        description: Branch von Repository ms-deployment, der benutzt werden soll
        required: false
        default: main
        type: string
      maxWaitForDeployment:
        description: maximale Zeit, die beim Helm-Statusscheck auf ein Deployment gewartet wird
        required: false
        default: 11m0s
        type: string
      dryRun:
        type: boolean
        description: Nicht deployen, nur Helm Chart Ergebnis anzeigen (helm --dry-run)
        required: false
        default: false


#Nur ein k8s Workflow darf gleichzeitg gestartet werden. Alle weitere k8s bleiben in pending bis der vorherige Workflow abgeschlossen sind.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.inputs.component }}-${{ github.event.inputs.dryRun }}
  cancel-in-progress: false
env:
  DEPLOYMENT_PATH: mcbscore/deployment
  DEPLOYMENT_REPO: freenet-group/ms-deployment
  JAVA_VERSION: 11
  GENERATED_SSH_KEY_FILE: id_rsa
  KEY_SERVER: ${{ secrets.CERT_SERVER }}
  ACTIONS_REPOSITORY: freenet-group/mcbscore-github-actions
  ACTIONS_PATH: mcbscore/github

jobs:
  ################################################################################
  # Job build-matrix
  ################################################################################
  build-matrix:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Select Github Secrets for AWS
      uses: ./.github/actions/select-aws-github-secrets
      with:
        environment: ${{ inputs.environment }}
        awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
        awsAccessKeyIdProd: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        awsSecretAccessKeyProd: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}

    - name: Read AWS Secrets
      uses: ./.github/actions/read-aws-secrets
      with:
        awsAccessKeyId: ${{ env.AWS_ACCESS_KEY_ID }}
        awsSecretAccessKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
        awsParameterPairs: |
          /github/secrets/mcbs_token = GITHUB_TOKEN

    - name: Checkout Deployment Data / Scripts
      # Auschecken des Deployment Repositories
      uses: actions/checkout@v4
      with:
        repository: ${{ env.DEPLOYMENT_REPO }}
        token: ${{ env.GITHUB_TOKEN }}
        path: ${{ env.DEPLOYMENT_PATH }}
        ref: ${{ github.event.inputs.deploymentRepositoryBranch }}

    # Java installieren (für jrunscript in ms_properties_to_json.sh)
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: zulu
        # eine Version mit jrunscript
        java-version: ${{ env.JAVA_VERSION }}

    # jq installieren
    - name: Setup jq
      uses: freenet-actions/setup-jq@v2

    # Prüft, ob ein Verzeichnis für die Komponente in /deployment/properties/ existiert
    - name: Check component name
      id: component-check
      shell: bash
      run: |
        component='${{ github.event.inputs.component }}'
        if [ ! -d "./${DEPLOYMENT_PATH}/properties/${component}" ]; then
            printf 'Der Name der Komponente "%s" existiert nicht\n' "${DEPLOYMENT_REPO}/properties/${component}" >&2
            exit 1
        fi

    - name: Init Job Matrix
      # Github Job-Matrix entsprechend domains aus kubernetes-deployment*.json oder deployment*.properties initialisieren
      id: set-matrix
      shell: bash
      run: |
        component='${{ github.event.inputs.component }}'
        environment='${{ github.event.inputs.environment }}'
        domains=

        for f in \
            "./${DEPLOYMENT_PATH}/properties/${component}/kubernetes-deployment-${environment}.json" \
            "./${DEPLOYMENT_PATH}/properties/${component}/kubernetes-deployment.json" \
            "./${DEPLOYMENT_PATH}/properties/${component}/deployment-${environment}.json" \
            "./${DEPLOYMENT_PATH}/properties/${component}/deployment-${environment}.properties" \
            "./${DEPLOYMENT_PATH}/properties/${component}/deployment.properties"
        do
          if [ -z "$domains" -a -e "$f" ]; then
            echo "Prüfe domains in $f"
            domains=$(
              if [[ "$f" == *.json ]]; then
                cat -- "$f"
              else
                "./${DEPLOYMENT_PATH}/scripts/common/properties_to_json.sh" < "$f"
              fi \
              | jq -c -r 'if .domains != null then (.domains | split("\\s+"; "")) else "" end'
              # ^ ohne Domains: Leerstring => jq -r gibt nichts aus => if [ -z "$domains" ] bleibt true.
              # mit Domains: jq split Ergebnis ist Array (z.B. ["km","mc"]); jq ignoriert -r.
            )
          fi
        done
        printf 'domains: %s\n' "$domains"

        # Ergebnis: domains JSON Array wie ["km","mc"] oder Default ["-"]
        echo "domainMatrix=${domains:-[\"-\"]}" >> $GITHUB_OUTPUT

    - name: Check for deployment
      # Prüft, ob deployed werden soll
      id: deployment-check
      shell: bash
      run: |
        component='${{ github.event.inputs.component }}'
        environment='${{ github.event.inputs.environment }}'

        enabled=$(
          for f in \
            "./${DEPLOYMENT_PATH}/properties/${component}/kubernetes-deployment.json" \
            "./${DEPLOYMENT_PATH}/properties/${component}/kubernetes-deployment-${environment}.json"
          do
            printf '%s existiert' "$f" >&2
            if [ -e "$f" ]; then echo >&2; cat -- "$f"; else echo ' nicht' >&2; fi
          done | jq -s -r 'add | .enabled'
        )

        echo "deploymentEnabled=$enabled" >> $GITHUB_OUTPUT

    outputs:
      deployment-enabled: ${{ steps.deployment-check.outputs.deploymentEnabled }}
      domain-matrix: ${{ steps.set-matrix.outputs.domainMatrix }}

  create-deployment:
    runs-on: ubuntu-latest
    needs: build-matrix
    if: ${{ needs.build-matrix.outputs.deployment-enabled == 'true' }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    # Secrets aus AWS auslesen
    - name: Read and set AWS credentials
      uses: ./.github/actions/read-aws-secrets
      with:
        awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
        awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        awsParameterPairs: |
          /github/secrets/mcbs_token = TOKEN

    # Die internen Actions auschecken
    - name: checkout mcbscore-github-actions
      uses: actions/checkout@v4
      with:
        repository: ${{ env.ACTIONS_REPOSITORY }}
        token: ${{ env.TOKEN }}
        path: ${{ env.ACTIONS_PATH }}
        ref: ${{ env.ACTIONS_REPO_BRANCH }}
        
    - name: Initialize Workflow
      uses: ./mcbscore/github/actions/init-workflow
      with:
        installJava: false
        installGithubCli: false
        installJq: false
        configurationPrefix: ${{ github.event.inputs.component }}_
    - name: Determine deployment ref
      # DEPLOYMENT_REF Umgebungsvariable setzen
      shell: bash
      run: |
        if  [[ ${{ github.event.inputs.componentVersion }} =~ '-SNAPSHOT' ]] ;
        then
          echo "DEPLOYMENT_REF=develop" >> $GITHUB_ENV
        else
          echo "DEPLOYMENT_REF=${{ env.TAG_PREFIX }}${{ github.event.inputs.componentVersion }}" >> $GITHUB_ENV
        fi
        
    - name: Create GitHub deployment
      uses: chrnorm/deployment-action@v2
      id: create-deployment
      with:
        token: ${{ env.TOKEN }}
        environment: ${{ github.event.inputs.environment }}
        ref: ${{ env.DEPLOYMENT_REF }}

    outputs:
      deployment_id: ${{ steps.create-deployment.outputs.deployment_id }}

  ################################################################################
  # Job helm-deployment
  ################################################################################
  helm-deployment:
    needs: [build-matrix, create-deployment]
    if: ${{ needs.build-matrix.outputs.deployment-enabled == 'true' }}
    runs-on: [self-hosted, k8s]
    strategy:
      fail-fast: false
      matrix:
        domain: ${{ fromJson(needs.build-matrix.outputs.domain-matrix) }}
    steps:
    # Leeren Workspace sicherstellen
    - name: Ensure clean workspace
      run: |
          echo "Cleaning up previous run"
          chown -R "$(id -u):$(id -g)" . || true
          # verstecke Dateien auch entfernen 
          # https://askubuntu.com/questions/740805/how-can-i-remove-all-files-from-current-directory-using-terminal
          shopt -s dotglob
          rm -rf *
          
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Select Github Secrets for AWS
      uses: ./.github/actions/select-aws-github-secrets
      with:
        environment: ${{ inputs.environment }}
        awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
        awsAccessKeyIdProd: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        awsSecretAccessKeyProd: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}

    - name: Read AWS Secrets
      uses: ./.github/actions/read-aws-secrets
      with:
        awsAccessKeyId: ${{ env.AWS_ACCESS_KEY_ID }}
        awsSecretAccessKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
        awsParameterPairs: |
          /github/secrets/mcbs_token = GITHUB_TOKEN,
          /github/secrets/ssh/mdmcbsapi-app/zxrestapi_ppk = SSH_KEY

    - name: Checkout Deployment Data / Scripts
      # Auschecken des Deployment Repositories
      uses: actions/checkout@v4
      with:
        repository: ${{ env.DEPLOYMENT_REPO }}
        token: ${{ env.GITHUB_TOKEN }}
        path: ${{ env.DEPLOYMENT_PATH }}
        ref: ${{ github.event.inputs.deploymentRepositoryBranch }}

    # jq installieren
    - name: Setup jq
      uses: freenet-actions/setup-jq@v2

    # ssh Konfig
    - name: Setup ssh
      if: env.SSH_KEY != ''
      shell: bash
      run: |
        printf '' > "$GENERATED_SSH_KEY_FILE"
        chmod 600 -- "$GENERATED_SSH_KEY_FILE"
        printf %s "$SSH_KEY" >> "$GENERATED_SSH_KEY_FILE"
        ls -lAF -- "$GENERATED_SSH_KEY_FILE"

    # Quelle von "sourceType": "FILE" Secrets.
    - name: Copy keystore files
      # Keystore-Dateien herunterladen
      # Werden vom Workflow selbst nicht gebraucht, aber evtl per kubernetes-deployment*.json als
      if: env.KEY_SERVER != ''
      shell: bash
      run: |
        certServer='${{ secrets.CERT_SERVER }}'
        if scp -i "$GENERATED_SSH_KEY_FILE" -o StrictHostKeyChecking=no -p \
            "${certServer}:oidc/keys/keystore.jwks" "${certServer}:oidc/keys/samlKeystore.jks" \
            docker/home/oidc/keys/; then
          ls -lA docker/home/oidc/keys
        else
          echo 'Keine Keystore-Dateien kopiert (aber vielleicht ja gar nicht gefordert)'
        fi

    - name: Deploy to K8s
      # Haupt-Deployment-Action
      uses: ./.github/actions/deploy-to-k8s
      with:
        component: ${{ inputs.component }}
        domain: ${{ matrix.domain }}
        componentVersion: ${{ inputs.componentVersion }}
        environment: ${{ inputs.environment }}
        dryRun: ${{ inputs.dryRun }}
        timeout: ${{ inputs.timeout }}
        maxWaitForDeployment: ${{ inputs.maxWaitForDeployment }}
        deploymentPath: ${{ env.DEPLOYMENT_PATH }}
        awsAccessKeyId: ${{ env.AWS_ACCESS_KEY_ID }}
        awsSecretAccessKey: ${{ env.AWS_SECRET_ACCESS_KEY }}

    # Deployment als erfolgreich markieren
    - name: Update deployment status (success)
      if: success()
      uses: chrnorm/deployment-status@v2
      with:
        token: ${{ env.GITHUB_TOKEN }}
        state: "success"
        deployment-id: ${{ needs.create-deployment.outputs.deployment_id }}

    # Deployment als fehlerhaft markieren
    - name: Update deployment status (failure)
      if: failure()
      uses: chrnorm/deployment-status@v2
      with:
        token: ${{ env.GITHUB_TOKEN }}
        state: "failure"
        deployment-id: ${{ needs.create-deployment.outputs.deployment_id }}

    - name: Cleanup
      if: ${{ always() }}
      run: |
        set +e
        rm -rfv -- docker/home/oidc/keys *.generated.json
        rm -rf /__w/_tool/*
