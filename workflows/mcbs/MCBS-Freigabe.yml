name: MCBS-Freigabe

#Name für den workflow. Wichtig bei mehreren workflows im selben Repository um die workflows im actions-tab unterscheiden zu können.
run-name: MCBS-FreigabeF ${{ github.event.inputs.component }}-${{ github.event.inputs.releaseVersion }}

on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: Die Release-Version
        required: true
      epic:
        description: Das EPIC (JIRA) als Releaseklammer (META-170 = "unbestimmt")
        required: false
        default: META-170
      iterations:
        description: Die beinhalteten Iterationen (MCBS_93.0.0, MCBS_93.0.1)
        required: true
      logLevel:
        description: Das LogLevel der innerhalb der Action ablaufenden AtlassianDeveloperTools
        required: false
        default: info

jobs:
  mcbsFreigabe:
    # self-hosted Runner für die Steps benutzen, um Zugriff auf MD Systeme zu haben
    runs-on: [self-hosted, vm]
    name: "mcbsFreigabe: ${{ toJSON(inputs) }}"
    env:
      ACTIONS_REPOSITORY: freenet-group/mcbscore-github-actions
      ACTIONS_PATH: mcbscore/github
      COMPONENT: mcbs
      TEAMS_MAIL: ce969e96.freenetgroup.onmicrosoft.com@de.teams.ms

    steps:
      - name: Show Params
        run: echo '${{ toJSON(inputs) }}'

      # Owner für alle Dateien des $GITHUB_WORKSPACE auf den Runner User setzen
      - name: Change Owner to Runner User
        if: ${{ always() }}
        run: |
          githubUser='${{ github.actor }}'
          githubToken='${{ secrets.GH_R_PACKAGES }}'
          docker login ghcr.io -u "$githubUser" -p "$githubToken"
          docker run --rm -v "$(pwd):/target" -w /target -t ghcr.io/freenet-group/container-base-images/ubuntu_2004_lts:latest sh -c "chown $(id -u):$(id -g) -R /target"
      # Leeren Workspace sicherstellen
      - name: Ensure clean workspace
        run: |
          echo "Cleaning up previous run"
          rm -rf -- *
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read AWS Secrets
        uses: ./.github/actions/read-aws-secrets
        with:
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          awsParameterPairs: |
            /github/secrets/mcbs_token = TOKEN,
            /github/secrets/mcbstest_credentials = MCBSTEST_CREDENTIALS,
            /github/common/JIRA_URL = JIRA_URL,
            /github/secrets/mcbstest_jiracloud_credentials = MCBSTEST_JIRACLOUD_CREDENTIALS,
            /github/common/jira/jira_cloud_url = JIRA_CLOUD_URL,
            /github/common/jira/api_url = JIRA_API_URL
      # Die internen Actions auschecken
      - name: checkout mcbscore-github-actions
        uses: actions/checkout@v4
        with:
          repository: ${{ env.ACTIONS_REPOSITORY }}
          token: ${{ env.TOKEN }}
          path: ${{ env.ACTIONS_PATH }}
          ref: ${{ github.event.inputs.actionsRepositoryBranch }}

      # ##################################################################################
      # Initialize Workflow
      # ##################################################################################

      - name: Initialize Workflow
        uses: ./mcbscore/github/actions/init-workflow
        with:
          installJava: true
          configurationPrefix: ${{ env.COMPONENT }}_

      # ###################################################################################
      # EPIC / IBN auswerten
      # ###################################################################################
      - name: IBN Datum ermitteln
        id: determine-going-live-date
        uses: ./mcbscore/github/actions/determine-going-live-date
        with:
          jiraUrl: ${{ env.JIRA_CLOUD_URL }}
          jiraCredentials: ${{ env.MCBSTEST_JIRACLOUD_CREDENTIALS }}
          epic: ${{ github.event.inputs.epic }}
          atlassianToolsVersion: ${{ env.ATLASSIAN_DEVELOPER_TOOLS_VERSION }}

      # ##################################################################################
      # Auslesen und Bereitstellen der Issues über alle Iterationen
      # ##################################################################################
      - name: ReleaseIssues
        shell: bash
        run: |
          atlassianToolsDir=./mcbscore/github/atlassian-tools
          java -Dlog4j2.configurationFile="$atlassianToolsDir"/log4j2-${{ inputs.logLevel }}.xml \
            -cp "$atlassianToolsDir"/AtlassianDeveloperTools-all-${{ env.ATLASSIAN_DEVELOPER_TOOLS_VERSION }}.jar:.:"$atlassianToolsDir"/AtlassianDeveloperTools \
            release.QueryIssueInfosForReleaseKt \
            "${{ env.JIRA_CLOUD_URL }}" \
            "${{ env.MCBSTEST_JIRACLOUD_CREDENTIALS }}" \
            "${{ github.event.inputs.iterations }}"
          cat issueList.txt
          issues=$(cat issues.txt)
          echo "issues=$issues" >> $GITHUB_ENV          
          cat releaseIssues.csv
      # ##################################################################################
      # Ermitteln der ZusatzInfos zum Release
      # ##################################################################################
      - name: Fetch Additional Information
        id: fetch-additional-information
        uses: ./mcbscore/github/actions/fetch-additional-information
        with:
          jiraUrl: ${{ env.JIRA_CLOUD_URL }}
          jiraCredentials: ${{ env.MCBSTEST_JIRACLOUD_CREDENTIALS }}
          # issueList: ${{ github.event.inputs.issueList }}
          issueList: ${{ env.issues }}
          atlassianToolsVersion: ${{ env.ATLASSIAN_DEVELOPER_TOOLS_VERSION }}

      # ###################################################################################
      # Teams-Notification
      # ###################################################################################
      - name: Send notification as mail
        uses: ./mcbscore/github/actions/mail-notification
        with:
          component:  ${{ env.JIRA_COMPONENT }}
          componentVersion: ${{ github.event.inputs.releaseVersion }}
          goingLiveDate: ${{ steps.determine-going-live-date.outputs.goingLiveDate }}
          # issueList: issue_info.csv
          issueList: "releaseIssues.csv"
          hasSql: ${{ steps.fetch-additional-information.outputs.sql }}
          hasConfiguration: ${{ steps.fetch-additional-information.outputs.config }}
          hasDependencies: ${{ steps.fetch-additional-information.outputs.dependency }}
          hasDeployment: ${{ env.DEPLOYMENT }}
          additionalText: "${{ github.event.inputs.iterations }}"
          epic: ${{ github.event.inputs.epic }}
          mailAddress: "${{ env.TEAMS_MAIL }}"
          purpose: MCBSFreigabe
          atlassianToolsVersion: ${{ env.ATLASSIAN_DEVELOPER_TOOLS_VERSION }}
          repositoryName: ${{ github.REPOSITORY }}


      # ##################################################################################
      # Freigabestatement auf der Releasenote
      # ##################################################################################
      - name: Checkout wiki code
        uses: actions/checkout@v4
        with:
          repository: ${{github.repository}}.wiki
          path: markdown

      - name: Freigabestatement
        shell: bash
        run: |
          
          cd markdown
          echo "## Produktionsfreigabe:  " >> MCBS_${{ github.event.inputs.releaseVersion }}.md
          echo "Freigabe für PROD zum ${{ steps.determine-going-live-date.outputs.goingLiveDate }} am "$(date "+%d.%m.%y")  >> MCBS_${{ github.event.inputs.releaseVersion }}.md
          git add MCBS_${{ github.event.inputs.releaseVersion }}.md
          git diff-index --quiet HEAD || git commit -m "Freigabe"
          git push

      # ##################################################################################
      # EPIC anpassen
      # ##################################################################################
      - name: setProdVersion
        id: sC
        uses: ./mcbscore/github/actions/set-prod-version
        with:
          jiraURL: ${{ env.JIRA_CLOUD_URL }}
          jiraCredentials: ${{ env.MCBSTEST_JIRACLOUD_CREDENTIALS }}
          version: ${{ github.event.inputs.releaseVersion }}
          issue: ${{ github.event.inputs.epic }}
          atlassianDeveloperTools: ${{ env.ATLASSIAN_DEVELOPER_TOOLS_VERSION }}
          loglevel: ${{ env.ATLASSIAN_DEVELOPER_TOOLS_LOGLEVEL }}          
