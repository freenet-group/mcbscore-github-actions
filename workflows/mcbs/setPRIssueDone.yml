#
# Generated by repo freenet-group/mcbscore-github-actions / workflow Distribute from file workflows/ms/setPRIssueDone.yml
#
#
# Generated by repo freenet-group/mcbscore-github-actions / workflow Distribute from file workflows/ms/postBuild.yml
#
name: SetPRIssueDone

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  pull_request:
    branches: [ "develop"]
    types: [closed]

jobs:
  issue_state:
    # self-hosted Runner für den Systeminternen Zugriff
    runs-on: [self-hosted, vm]
    env:
      ACTIONS_REPOSITORY: freenet-group/mcbscore-github-actions
      ACTIONS_PATH: mcbscore/github

    steps:
      # Owner für alle Dateien des $GITHUB_WORKSPACE auf den Runner User setzen
      - name: Change Owner to Runner User
        if: ${{ always() }}
        run: |
          docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GH_R_PACKAGES }}
          docker run --rm -v `pwd`:/target -w /target -t ghcr.io/freenet-group/container-base-images/ubuntu_2004_lts:latest sh -c "chown $(id -u):$(id -g) -R /target"

      # Leeren Workspace sicherstellen
      - name: Ensure clean workspace
        run: |
          echo "Cleaning up previous run"
          rm -rf *

      # Repository auschecken unter $GITHUB_WORKSPACE
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: read-aws-secrets
        name: Read AWS Secrets
        uses: ./.github/actions/read-aws-secrets
        with:
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          awsParameterPairs: |
            /github/secrets/mcbs_token = TOKEN,
            /github/secrets/mcbstest_credentials = MCBSTEST_CREDENTIALS,
            /github/common/jira/api_url = JIRA_API_URL, 
            /github/common/jira/jira_cloud_web_url = JIRA_CLOUD_WEB_URL,
            /github/common/sonar/api_url = SONAR_API_URL,
            /github/common/JIRA_URL2 = JIRA_URL2,
            /github/secrets/mcbstest_jiracloud_credentials = MCBSTEST_JIRACLOUD_CREDENTIALS,
            /github/common/jira/jira_cloud_url = JIRA_CLOUD_URL

      # Die internen Actions auschecken
      - name: checkout mcbscore-github-actions
        uses: actions/checkout@v3
        with:
          repository: ${{ env.ACTIONS_REPOSITORY }}
          token: ${{ env.TOKEN }}
          path: ${{ env.ACTIONS_PATH }}
          ref: ${{ github.event.inputs.actionsRepositoryBranch }}

      # ##################################################################################
      # Initialize Workflow
      # ##################################################################################
      - id: init-workflow
        name: Initialize Workflow
        uses: ./mcbscore/github/actions/init-workflow
        with:
          installJava: true

      # Auslesen des letzten Logs (Merge / Commit)
      - name: fetch last log
        if: github.event.pull_request.merged == true
        run: |
          echo "Workflow nach Merge eines PR beliebiger Herkunft ...  "
          echo "Last Log : "
          git log -1 --pretty=%B
          # Isolieren des Projekts (ABRMS)
          prj=`git log -1 --pretty=%B | head -n1 | cut -d "/" -f3 | cut -d"-" -f1`
          # Isolietren des Issue , falls ein - Kommentar angefügt wurde (ABRMS-1234 - Bugfix Bla)
          issue=`git log -1 --pretty=%B | head -n1 | cut -d "/" -f3 | cut -d"-" -f2`
          lastlog="${prj}-${issue}"
          echo "Last Log : ${lastlog}"
          
          echo "issue=$(echo $lastlog)" >> $GITHUB_ENV
                 
    
      - name: set Issue done
        if: github.event.pull_request.merged == true
        id: sD
        uses: ./mcbscore/github/actions/set-issue-list-done
        with:
          jiraURL: $JIRA_CLOUD_URL
          jiraCredentials: $MCBSTEST_JIRACLOUD_CREDENTIALS
          issueList: ${{ env.issue }}
          atlassianToolsVersion: ${{ env.ATLASSIAN_DEVELOPER_TOOLS_VERSION }}
          logLevel: info     

  kein_issue_state:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == false
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        if: github.event.pull_request.merged == false
        run: |
          echo "Workflow nach PR beliebiger Herkunft ohne Merge ...  "  
