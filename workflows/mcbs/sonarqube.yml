name: Sonarqube

# Kontrolliert, welche Events die Action auslösen
on:
  # vorserst deaktiviert, weil Sonar nicht mehr JAVA 8 kompatibel ist
  # Jeden Samstag um 0 UTC
  #schedule:
  #  - cron: 0 0 * * 6
  workflow_dispatch:
    inputs:
      gradleOptions:
        description: 'Zusätzliche optionale Gradle Parameter'
        required: false

jobs:
  sonarqube:
    # self-hosted Runner für die Steps benutzen, um Zugriff auf MD Systeme zu haben
    runs-on: [self-hosted,vm]
    env:
      JAVA_VERSION: 11

    steps:
      # Owner für alle Dateien des $GITHUB_WORKSPACE auf den Runner User setzen
      - name: Change Owner to Runner User
        if: always()
        run: |
          docker run --rm -v `pwd`:/target -w /target -t docker-base.mobilcom.de/ubuntu/ubuntu_1804_lts:latest sh -c "chown $(id -u):$(id -g) -R /target"

      # Leeren Workspace sicherstellen
      - name: Ensure clean workspace
        run: |
          echo "Cleaning up previous run"
          rm -rf *

      # ##################################################################################
      # AWS Secrets
      # ##################################################################################

      # Secrets aus AWS auslesen
      - name: Read and set AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'eu-central-1'

      - name: Read AWS Parameters
        uses: dkershner6/aws-ssm-getparameters-action@v1
        with:
          parameterPairs: |
            /github/secrets/mcbs_token = TOKEN,
            /github/secrets/mcbs_user = USER

      # Repository auschecken unter $GITHUB_WORKSPACE
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ env.TOKEN }}

      # JAVA installieren
      - name: Set up JDK
        if: ${{ (github.event.inputs.product == matrix.product.id || github.event.inputs.product == '') }}
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: ${{ env.JAVA_VERSION }}

      # Gradle Build
      - name: Build with Gradle
        run: sh ./gradlew -PGITHUB_USER=${{ env.USER }} -PGITHUB_TOKEN=${{ env.TOKEN }} clean build sonarqube -Dsonar.login=${{ secrets.SONARQUBE_TOKEN }} -Dsonar.host.url=${{ secrets.SONARQUBE_HOST_URL }} ${{ github.event.inputs.gradleOptions }}

      # JUnit Ergebnisse publizieren
      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Unit Test Results (${{ matrix.product.name }})
          path: '**/test-results/**/*.xml'

  publish-test-results:
    name: "Publish Unit Tests Results"
    needs: sonarqube
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          files: artifacts/**/*.xml
