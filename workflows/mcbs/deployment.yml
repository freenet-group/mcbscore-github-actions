name: Deployment
#Name für den workflow. Wichtig bei mehreren workflows im selben Repository um die workflows im actions-tab unterscheiden zu können.
run-name: Deployment ${{ github.event.inputs.component }}-${{ github.event.inputs.componentVersion }} auf ${{ github.event.inputs.environment }}

on:
  workflow_dispatch:
    inputs:
      component:
        description: Der Name der Komponente
        required: true
      componentVersion:
        description: Die Version der Komponente
        required: true
      environment:
        description: Die Zielumgebung
        required: true
      platforms:
        description: Die Zielserver-Plattform(en)
        type: choice
        options: [ "vm, k8s", "vm", "k8s" ]
        required: false
        default: "vm, k8s"
      tagPrefix:
        description: Der Präfix des Tags
        required: false
      javaVersion:
        description: JAVA Version
        required: false
        default: 8
      actionsRepositoryBranch:
        description: Zu benutzender Branch des Repositories mcbscore-github-actions
        type: string
        required: false
        default: main
      deploymentRepositoryBranch:
        description: Branch von Repository ms-deployment, der benutzt werden soll
        required: false
        default: main

jobs:
  create-deployment:
    runs-on: ubuntu-latest

    steps:
      - name: Show Params
        env:
          INPUTS_JSON: ${{ toJSON(inputs) }}
        run: printf '%s\n' "$INPUTS_JSON"

    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    # Secrets aus AWS auslesen
    - name: Read and set AWS credentials
      uses: ./.github/actions/read-aws-secrets
      with:
        awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
        awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        awsParameterPairs: |
          /github/secrets/mcbs_token = TOKEN

    - name: Determine deployment ref
      # DEPLOYMENT_REF Umgebungsvariable setzen
      shell: bash
      run: |
        if  [[ ${{ github.event.inputs.componentVersion }} =~ '-SNAPSHOT' ]] ;
        then
          echo "DEPLOYMENT_REF=develop" >> $GITHUB_ENV
        else
          echo "DEPLOYMENT_REF=${{ github.event.inputs.tagPrefix }}${{ github.event.inputs.componentVersion }}" >> $GITHUB_ENV
        fi

    - name: Create GitHub deployment
      uses: chrnorm/deployment-action@v2
      id: create-deployment
      with:
        token: ${{ env.TOKEN }}
        environment: ${{ inputs.environment }}
        description: "Deployment auf ${{ inputs.platforms }}"
        ref: ${{ env.DEPLOYMENT_REF }}

    outputs:
      deployment_id: ${{ steps.create-deployment.outputs.deployment_id }}

  deploy:
    # self-hosted Runner für die Steps benutzen, um Zugriff auf MD Systeme zu haben
    runs-on: [self-hosted, k8s]
    name: "deploy: ${{ toJSON(inputs) }}"
    needs: create-deployment
    # if: platforms enthält "vm" ", "-separiert
    if: contains(format(', {0}, ', inputs.platforms), ', vm, ')
    env:
      ACTIONS_REPOSITORY: freenet-group/mcbscore-github-actions
      ACTIONS_PATH: mcbscore/github
      DEPLOYMENT_PATH: mcbscore/deployment
      REPOSITORY_PATH: repository
      NODEJS_VERSION: 20

    steps:
    # Owner für alle Dateien des $GITHUB_WORKSPACE auf den Runner User setzen
    - name: Change Owner to Runner User
      if: ${{ always() }}
      run: |
        docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GH_R_PACKAGES }}
        docker run --rm -v `pwd`:/target -w /target -t ghcr.io/freenet-group/container-base-images/ubuntu_2004_lts:latest sh -c "chown $(id -u):$(id -g) -R /target"

    - name: Ensure clean workspace
      # Leeren Workspace sicherstellen
      run: |
        echo "Cleaning up previous run"
        rm -rf *

    - name: Checkout Repository
      # Repository auschecken unter $GITHUB_WORKSPACE
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        path: ${{ env.REPOSITORY_PATH }}

    - name: Read AWS Secrets
      uses: ./repository/.github/actions/read-aws-secrets
      with:
        awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
        awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        awsParameterPairs: |
            /github/secrets/mcbs_token = TOKEN,
            /github/secrets/deployment_user = DEPLOYMENT_USER,
            /github/secrets/ssh/mdmcbsapi-app/zxrestapi_ppk = SSH_KEY,
            /github/secrets/checkmk_user = CHECKMK_USER, 
            /github/secrets/checkmk_password = CHECKMK_PW

    - name: checkout mcbscore-github-actions
      # Die internen Actions auschecken
      uses: actions/checkout@v4
      with:
        repository: ${{ env.ACTIONS_REPOSITORY }}
        token: ${{ env.TOKEN }}
        path: ${{ env.ACTIONS_PATH }}
        ref: ${{ inputs.actionsRepositoryBranch }}

    # Auschecken des Deployment Repositories
    - name: Checkout Deployment Data / Scripts
      uses: actions/checkout@v4
      with:
        repository: freenet-group/ms-deployment
        token: ${{ env.TOKEN }}
        path: ${{ env.DEPLOYMENT_PATH }}
        ref: ${{ github.event.inputs.deploymentRepositoryBranch }}

    # ##################################################################################
    # Initialize Workflow
    # ##################################################################################

    - name: Initialize Workflow
      uses: ./mcbscore/github/actions/init-workflow
      with:
        installJavaWithNashornEngine: true
        installNodeJs: true
        installJq: true
        configurationPrefix: ${{ github.event.inputs.component }}_
        lookupBasePath: ./${{ env.REPOSITORY_PATH }}

    - name: Download Release
      uses: ./mcbscore/github/actions/download-release-assets
      with:
        version: ${{ github.event.inputs.tagPrefix }}${{ github.event.inputs.componentVersion }}
        assetPattern: '-${{ github.event.inputs.componentVersion }}.jar'
        targetPath: './${{ env.DEPLOYMENT_PATH }}/release'
        token: ${{ env.TOKEN }}

    # Deployment
    - name: Deployment
      id: deployRelease
      uses: ./mcbscore/github/actions/deploy-microservice
      with:
        component: ${{ github.event.inputs.component }}
        stage: ${{ github.event.inputs.environment }}
        componentConfigPath: ${{ env.DEPLOYMENT_PATH }}
        checkMkUser: ${{ env.CHECKMK_USER }}
        checkMkSecret: ${{ env.CHECKMK_PW }}
        deploymentUser: ${{ env.DEPLOYMENT_USER }}
        sshKey: ${{ env.SSH_KEY }}

    - name: Invoke developer portal upload workflow
      # Starte Developer Portal Upload
      if: ${{ hashFiles('./repository/.github/**/developerPortal.yml') != '' && env.API_DOC_YAML_PATTERN != '' && contains('dev,git,prod', github.event.inputs.environment) }}
      uses: benc-uk/workflow-dispatch@v1
      with:
        workflow: DeveloperPortal Upload
        token: ${{ env.TOKEN }}
        inputs: >
          {
            "component": "${{ env.COMPONENT }}",
            "environment": "${{ github.event.inputs.environment }}",
            "componentVersion": "${{ github.event.inputs.componentVersion }}",
            "tagPrefix": "${{ github.event.inputs.tagPrefix }}"
          }

    outputs:
      componentName: ${{ env.JIRA_COMPONENT }}

  deploy_k8s:
    needs: [create-deployment]
    # if: platforms enthält "k8s" ", "-separiert
    if: contains(format(', {0}, ', inputs.platforms), ', k8s, ')
    uses: freenet-group/mcbscore-reusable-workflows/.github/workflows/deployment_k8s.yml@main
    secrets: inherit
    with:
      componentVersion: ${{ github.event.inputs.componentVersion }}
      environment: ${{ github.event.inputs.environment }}
      component: ${{ github.event.inputs.component }}

  deployment_status:
    needs: [create-deployment, deploy, deploy_k8s]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read AWS Secrets
        uses: ./.github/actions/read-aws-secrets
        with:
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          awsParameterPairs: |
            /github/secrets/mcbs_token = TOKEN

      - name: Update deployment status (failure)
        if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ env.TOKEN }}
          state: "failure"
          deployment-id: ${{ needs.create-deployment.outputs.deployment_id }}

      - name: Update deployment status (success)
        if: ${{ !(contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')) }}
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ env.TOKEN }}
          state: "success"
          deployment-id: ${{ needs.create-deployment.outputs.deployment_id }}

  bambi-notification:
    # self-hosted Runner für die Steps benutzen, um Zugriff auf MD Systeme zu haben
    runs-on: [self-hosted, k8s]
    needs: [deploy, deploy_k8s]
    # Der Check success() ist nicht true bei übersprungenen workflows. !failure() dahingegen sieht übersprungenen nicht als failure und nur rote Steps
    if: ${{ always() && !failure() && !contains(needs.deploy.result, 'failure') && !contains(needs.deploy.result, 'cancelled') && (github.event.inputs.environment == 'git' || github.event.inputs.environment == 'b2b' || github.event.inputs.environment == 'prod') }}
 steps:
    # Deployment als erfolgreich melden
    - name: Report deployment status
      shell: bash
      run: |
        curlResult=$(curl -sw %{http_code} --location --request POST 'https://bambi-api-prod.md-abr-prod.k8s.freenet-group.de/v2/bambi/deployment/environmentversion' \
        --header 'Content-Type: application/json' \
        --data-raw '{
          "version": "${{ github.event.inputs.componentVersion }}",
          "componentName": "${{ needs.deploy.outputs.componentName }}",
          "environment": "${{ github.event.inputs.environment }}",
          "extern": false,
          "workflowRunId": ${{ github.run_id }},
          "workflowName": "${{ github.workflow }}",
          "deployState": "successfull",
          "deployUser": "${{ github.actor }}"
        }')
        echo "Result: $curlResult"
        statusCode="${curlResult:${#curlResult}-3}"
        echo "statusCode: $statusCode"

        if [[ "statusCode" -ge "400" ]]; then
          echo "Result: $curlResult"
          exit 1
        fi
