#
# Generated by repo freenet-group/mcbscore-github-actions / workflow Distribute from file workflows/mcbs/preCheck.yml
#
name: preCheck

on:
  workflow_dispatch:
    inputs:
      gradleOptions:
        description: Zus채tzliche optionale Gradle-Parameter
        required: false
      product:
        description: Das zu bauende Produkt
        type: choice
        required: true
        default: ALL
        options:
          - ALL
          - ms-cuba
          - ms-customer
          - ms-customerelastic
          - ms-customerproduct
          - ms-mcbsservices
          - mcbs
          - mcbsservices
      actionsRepositoryBranch:
        description: Zu benutzender Branch des Repositories mcbscore-github-actions
        required: false
        default: main
      manualVersion:
        description: Eine manuell zu vergebende Versionskennung (xx.yy.zz / ohne prefix)
        required: false
        default: 0.0.0  

jobs:
  preCheck:
    # self-hosted Runner f체r die Steps benutzen, um Zugriff auf MD Systeme zu haben
    runs-on: [self-hosted, vm]
    env:
      ACTIONS_REPOSITORY: freenet-group/mcbscore-github-actions
      ACTIONS_PATH: mcbscore/github
    strategy:
      matrix:
        product:
          - { id: mcbs, name: mcbs }
          - { id: mcbsservices, name: zap }
          - { id: ms-cuba, name: cuba }
          - { id: ms-customer, name: customer }
          - { id: ms-customerelastic, name: customerelastic }
          - { id: ms-customerproduct, name: customerproduct }
          - { id: ms-mcbsservices, name: mcbsservices }

    steps:
      # Owner f체r alle Dateien des $GITHUB_WORKSPACE auf den Runner User setzen
      - name: Change Owner to Runner User
        if: ${{ always() && (github.event.inputs.product == matrix.product.id || github.event.inputs.product == 'ALL') }}
        run: |
          docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GH_R_PACKAGES }}
          docker run --rm -v `pwd`:/target -w /target -t ghcr.io/freenet-group/container-base-images/ubuntu_2004_lts:latest sh -c "chown $(id -u):$(id -g) -R /target"

      # Leeren Workspace sicherstellen
      - name: Ensure clean workspace
        if: ${{ (github.event.inputs.product == matrix.product.id || github.event.inputs.product == 'ALL') }}
        run: |
          echo "Cleaning up previous run"
          rm -rf -- *

      - name: Checkout Repository
        if: ${{ (github.event.inputs.product == matrix.product.id || github.event.inputs.product == 'ALL') }}
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Read AWS Secrets
        if: ${{ (github.event.inputs.product == matrix.product.id || github.event.inputs.product == 'ALL') }}
        uses: ./.github/actions/read-aws-secrets
        with:
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          awsParameterPairs: |
            /github/secrets/mcbs_token = TOKEN,
            /github/secrets/mcbs_user = USER, 
            /github/secrets/mcbstest_credentials = MCBSTEST_CREDENTIALS,
            /github/secrets/mcbstest_username = MCBSTEST_USERNAME,
            /github/secrets/mcbstest_password = MCBSTEST_PASSWORD,
            /github/common/jira/api_url = JIRA_API_URL

      # Die internen Actions auschecken
      - name: checkout mcbscore-github-actions
        if: ${{ (github.event.inputs.product == matrix.product.id || github.event.inputs.product == 'ALL') }}
        uses: actions/checkout@v3
        with:
          repository: ${{ env.ACTIONS_REPOSITORY }}
          token: ${{ env.TOKEN }}
          path: ${{ env.ACTIONS_PATH }}
          ref: ${{ github.event.inputs.actionsRepositoryBranch }}

      # ##################################################################################
      # Initialize Workflow
      # ##################################################################################

      - name: Initialize Workflow
        if: ${{ (github.event.inputs.product == matrix.product.id || github.event.inputs.product == 'ALL') }}
        uses: ./mcbscore/github/actions/init-workflow
        with:
          installJava: true
          configurationPrefix: ${{ matrix.product.name }}_

      # ##################################################################################
      # Version ermitteln
      # ##################################################################################

      - id: determine-build-type-and-branch-name
        name: Determine Build Type And Branch Name
        if: ${{ (github.event.inputs.product == matrix.product.id || github.event.inputs.product == 'ALL') }}
        uses: ./mcbscore/github/actions/build-type-and-branch-name

      - id: determine-component-version
        name: Determine Component Version
        if: ${{ (github.event.inputs.product == matrix.product.id || github.event.inputs.product == 'ALL') }}
        uses: ./mcbscore/github/actions/determine-component-version
        with:
          component: ${{ env.JIRA_COMPONENT }}
          versionByComponentList: true

      # Version ggf. manuell 체bersteuern
      - name: manualVersion
        if: ${{ github.event.inputs.manualVersion != '0.0.0' && (github.event.inputs.product == matrix.product.id || github.event.inputs.product == 'ALL') }}
        shell: bash
        run: |
          echo "COMPONENT_VERSION=${{ github.event.inputs.manualVersion }}"
          echo "COMPONENT_VERSION=${{ github.event.inputs.manualVersion }}" >> $GITHUB_ENV
          echo "RAW_VERSION=${{ github.event.inputs.manualVersion }}" >> $GITHUB_ENV

      # Ausgaben
      - name: Output
        if: ${{ (github.event.inputs.product == matrix.product.id || github.event.inputs.product == 'ALL') }}
        shell: bash
        run: |
          echo "#########################################"
          echo "#             Pre-Check                 #"
          echo "#########################################"
          echo "# Komponente : ${{ env.JIRA_COMPONENT }}"
          echo "# Branch : ${{ env.BRANCH_NAME }}"
          echo "#########################################"
          echo "# COMPONENT_VERSION=${{env.COMPONENT_VERSION}}" 
          echo "# issueList=${{ env.ISSUE_LIST }}"
          echo "#########################################"

