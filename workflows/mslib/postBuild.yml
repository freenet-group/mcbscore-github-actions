name: PostBuild

# Workflow-Steuerung
on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: 'Die Release Version'
        required: true
      issueList:
        description: 'Die Liste der integrierten JIRA-Issues'
        required: true
      actionsRepositoryBranch:
        description: Welcher Branch von Repository mcbscore_actions benutzt werden soll
        required: false
        default: main

jobs:
  postBuild:
    # self-hosted Runner für den Systeminternen Zugriff
    runs-on: [self-hosted,vm]
    env:
      ACTIONS_REPOSITORY: freenet-group/mcbscore-github-actions
      ACTIONS_PATH: mcbscore/github
      MAIL_TEMPLATE: B_MS.ftl
      TEAMS_MAIL: b48281f2.freenetgroup.onmicrosoft.com@emea.teams.ms

    steps:
      # Owner für alle Dateien des $GITHUB_WORKSPACE auf den Runner User setzen
      - name: Change Owner to Runner User
        if: ${{ always() }}
        run: |
          docker run --rm -v `pwd`:/target -w /target -t docker-base.mobilcom.de/ubuntu/ubuntu_1804_lts:latest sh -c "chown $(id -u):$(id -g) -R /target"

      # Leeren Workspace sicherstellen
      - name: Ensure clean workspace
        run: |
          echo "Cleaning up previous run"
          rm -rf *

      # Repository auschecken unter $GITHUB_WORKSPACE
      - id: checkout-repository
        name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: read-aws-secrets
        name: Read AWS Secrets
        uses: ./.github/actions/read-aws-secrets
        with:
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          awsParameterPairs: |
            /github/secrets/mcbs_token = TOKEN,
            /github/secrets/mcbstest_credentials = MCBSTEST_CREDENTIALS,
            /github/common/JIRA_URL = JIRA_URL, 
            /github/common/JIRA_URL2 = JIRA_URL2 

      # Die internen Actions auschecken
      - name: checkout mcbscore-github-actions
        uses: actions/checkout@v3
        with:
          repository: ${{ env.ACTIONS_REPOSITORY }}
          token: ${{ env.TOKEN }}
          path: ${{ env.ACTIONS_PATH }}
          ref: ${{ github.event.inputs.actionsRepositoryBranch }}

      # ##################################################################################
      # Initialize Workflow
      # ##################################################################################
      - id: init-workflow
        name: Initialize Workflow
        uses: ./mcbscore/github/actions/init-workflow
        with:
          installJava: true

      # ##################################################################################
      # Erzeugen von Version / ComponentVersion in JIRA
      # ##################################################################################
      # TODO: Frage an Bernd: Müssen die getrennt ausgeführt werden? Oder könnte man das so umbauen und nur einmal starten? jiraProject: ABRMS,MCBS
      - name: jiraConfig-MCBS
        uses: ./mcbscore/github/actions/jira-configuration
        with:
          jiraUrl: ${{ env.JIRA_URL }}
          jiraUrl2: ${{ env.JIRA_URL2 }}
          jiraCredentials: ${{ env.MCBSTEST_CREDENTIALS }}
          jiraProject: MCBS
          component: ${{ env.COMPONENT }}
          componentVersion: ${{ github.event.inputs.releaseVersion }}
          componentList: ${{ env.COMPONENT }}
          atlassianToolsVersion: ${{ env.ATLASSIAN_DEVELOPER_TOOLS_VERSION }}

      - name: jiraConfig-ABRMS
        uses: ./mcbscore/github/actions/jira-configuration
        with:
          jiraUrl: ${{ env.JIRA_URL }}
          jiraUrl2: ${{ env.JIRA_URL2 }}
          jiraCredentials: ${{ env.MCBSTEST_CREDENTIALS }}
          jiraProject: ABRMS
          component: ${{ env.COMPONENT }}
          componentVersion: ${{ github.event.inputs.releaseVersion }}
          componentList: ${{ env.COMPONENT }}
          atlassianToolsVersion: ${{ env.ATLASSIAN_DEVELOPER_TOOLS_VERSION }}

      # ##################################################################################
      # Erzeugen einer CSV-Datei mit ergänzenden Issue-Infos
      # ##################################################################################
      - name: fetchIssueInfos
        id: fI
        uses: ./mcbscore/github/actions/fetch-issue-information
        with:
          jiraUrl: ${{ env.JIRA_URL }}
          jiraCredentials: ${{ env.MCBSTEST_CREDENTIALS }}
          issueList: ${{ github.event.inputs.issueList }}
          atlassianToolsVersion: ${{ env.ATLASSIAN_DEVELOPER_TOOLS_VERSION }}

      # ##################################################################################
      # Eintrag der fixVersion
      # ##################################################################################
      - name: setFixVersions
        id: sF
        uses: ./mcbscore/actions/setFixVersion
        with:
          JIRA_URL: ${{ env.JIRA_URL }}
          JIRA_CREDENTIALS: ${{ env.MCBSTEST_CREDENTIALS }}
          COMPONENT:  ${{ env.COMPONENT }}
          VERSION: ${{ github.event.inputs.releaseVersion }}
          ISSUES: ${{ github.event.inputs.issueList }}  
          ATLASSIAN_DEVELOPER_TOOLS: ${{ env.ATLASSIAN_DEVELOPER_TOOLS_VERSION }}
          LOGLEVEL: ${{ env.ATLASSIAN_DEVELOPER_TOOLS_LOGLEVEL }}

      # ##################################################################################
      # set Issues "done"
      # ##################################################################################
      - name: setIssueListDone
        id: sD
        uses: ./mcbscore/actions/setIssueListDone
        with:
          JIRA_URL: ${{ env.JIRA_URL }}
          JIRA_CREDENTIALS: ${{ env.MCBSTEST_CREDENTIALS }}
          ISSUES: ${{ github.event.inputs.issueList }}
          ATLASSIAN_DEVELOPER_TOOLS: ${{ env.ATLASSIAN_DEVELOPER_TOOLS_VERSION }}
          LOGLEVEL: ${{ env.ATLASSIAN_DEVELOPER_TOOLS_LOGLEVEL }}

      # ##################################################################################
      # Setzen eines Build-Kommentars an den Issues
      # ##################################################################################
      - name: setIssueComments
        id: sC
        uses: ./mcbscore/actions/setIssueComments
        with:
          JIRA_URL: ${{ env.JIRA_URL }}
          JIRA_CREDENTIALS: ${{ env.MCBSTEST_CREDENTIALS }}
          COMMENT: 'Releasebuild : ${{ env.COMPONENT }}_${{ github.event.inputs.releaseVersion }}'
          ISSUES: ${{ github.event.inputs.issueList }}  
          ATLASSIAN_DEVELOPER_TOOLS: ${{ env.ATLASSIAN_DEVELOPER_TOOLS_VERSION }}
          LOGLEVEL: ${{ env.ATLASSIAN_DEVELOPER_TOOLS_LOGLEVEL }}

      # ##################################################################################
      # Erzeugen einer Releasenote im WIKI
      # ##################################################################################
      # GitHub WIKI Repository in das Unterverzeichnis "markdown" auschecken
      - name: Checkout wiki code
        uses: actions/checkout@v3
        with:
          repository: ${{ github.REPOSITORY }}.wiki
          path: markdown

      # Aufruf der Action
      - name: createReleasenote
        id: cR
        uses: ./mcbscore/actions/createReleasenote
        with:
          JIRA_URL: ${{ env.JIRA_URL }}
          JIRA_CREDENTIALS: ${{ env.MCBSTEST_CREDENTIALS }}
          SONAR_URL: 'https://sonar.mobilcom.de/api/measures/component'
          ISSUES: ${{ github.event.inputs.issueList }}  
          COMPONENT:  ${{ env.COMPONENT }}
          REPO: ${{ github.REPOSITORY }}
          RELEASE: "${{ github.SERVER_URL }}/${{ github.REPOSITORY }}/releases/tag/${{ github.event.inputs.releaseVersion }}/${{ env.COMPONENT }}-${{ github.event.inputs.releaseVersion }}.jar"
          JUNIT: "${{ github.SERVER_URL }}/${{ github.REPOSITORY }}/releases"
          CUCUMBER: "${{ github.SERVER_URL }}/${{ github.REPOSITORY }}/releases"
          VERSION: ${{ github.event.inputs.releaseVersion }}
          ATLASSIAN_DEVELOPER_TOOLS: ${{ env.ATLASSIAN_DEVELOPER_TOOLS_VERSION }}
          LOGLEVEL: ${{ env.ATLASSIAN_DEVELOPER_TOOLS_LOGLEVEL }}
          EPIC: "epic"

      # ###################################################################################
      # Mail-Notification
      # ###################################################################################
      - name: Send notification as mail
        id: mail_notification
        uses: ./mcbscore/actions/sendMail2
        with:
          COMPONENT:  ${{ env.COMPONENT }}
          VERSION: ${{ github.event.inputs.releaseVersion }}
          IBN: "unbestimmt"
          # ISSUES: ${{ github.event.inputs.issueList }}
          ISSUES: issue_info.csv
          SQL: ${{ steps.cR.outputs.sql }}
          CONFIG: ${{ steps.cR.outputs.config }}
          DEPENDENCIES: ${{ steps.cR.outputs.dependency }}
          EXTRA: "extra"
          EPIC: "epic"
          WEBHOOK_URI: ${{ env.TEAMS_MAIL }}
          TEMPLATE: ${{ env.MAIL_TEMPLATE }}
          ATLASSIAN_DEVELOPER_TOOLS: ${{ env.ATLASSIAN_DEVELOPER_TOOLS_VERSION }}
          LOGLEVEL: ${{ env.ATLASSIAN_DEVELOPER_TOOLS_LOGLEVEL }}
          REPO: ${{ github.REPOSITORY }}
