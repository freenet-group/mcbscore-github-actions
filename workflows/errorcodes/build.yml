name: Build

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      gradleOptions:
        description: 'Zus채tzliche optionale Gradle Parameter'
        required: false
      actionsRepositoryBranch:
        description: Zu benutzender Branch des Repositories mcbscore-github-actions
        required: false
        default: main

jobs:
  build:
    # self-hosted Runner f체r die Steps benutzen, um Zugriff auf MD Systeme zu haben
    runs-on: [self-hosted,vm]
    env:
      ACTIONS_REPOSITORY: freenet-group/mcbscore-github-actions
      ACTIONS_PATH: mcbscore/github

    steps:
      # Owner f체r alle Dateien des $GITHUB_WORKSPACE auf den Runner User setzen
      - name: Change Owner to Runner User
        if: ${{ always() }}
        run: |
          docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GH_R_PACKAGES }}
          docker run --rm -v `pwd`:/target -w /target -t ghcr.io/freenet-group/container-base-images/ubuntu_2004_lts:latest sh -c "chown $(id -u):$(id -g) -R /target"

      # Leeren Workspace sicherstellen
      - name: Ensure clean workspace
        run: |
          echo "Cleaning up previous run"
          rm -rf *

      # Repository auschecken unter $GITHUB_WORKSPACE
      - id: checkout-repository
        name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: read-aws-secrets
        name: Read AWS Secrets
        uses: ./.github/actions/read-aws-secrets
        with:
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          awsParameterPairs: |
            /github/secrets/mcbs_token = TOKEN,
            /github/secrets/mcbs_user = USER

      # Die internen Actions auschecken
      - name: checkout mcbscore-github-actions
        uses: actions/checkout@v3
        with:
          repository: ${{ env.ACTIONS_REPOSITORY }}
          token: ${{ env.TOKEN }}
          path: ${{ env.ACTIONS_PATH }}
          ref: ${{ github.event.inputs.actionsRepositoryBranch }}

      # ##################################################################################
      # Initialize Workflow
      # ##################################################################################

      - id: init-workflow
        name: Initialize Workflow
        uses: ./mcbscore/github/actions/init-workflow
        with:
          installJava: true
          installNodeJs: true

      - name: Install mocha
        run: npm install -g mocha

      - name: Install js-yaml
        run: npm install js-yaml

      - name: Install yaml-lint
        run: npm install yaml-lint

      - name: Install fs-extra
        run: npm install fs-extra

      - name: Install handlebars
        run: npm install handlebars

      - name: Install dependencies
        run: npm install

      # ##################################################################################
      # Version ermitteln
      # ##################################################################################

      - id: determine-build-type-and-branch-name
        name: Determine Build Type And Branch Name
        uses: ./mcbscore/github/actions/build-type-and-branch-name

      # Build Type ermitteln (abweichende Behandlung)
      - name: Determine build type
        shell: bash
        run: |
          if  [[ $BRANCH_NAME == main ]] ;
          then
            echo "BUILD_TYPE=RELEASE" >> $GITHUB_ENV
            echo "DRAFT=false" >> $GITHUB_ENV
          elif  [[ $BRANCH_NAME == feature* ]] ;
          then
            echo "BUILD_TYPE=FEATURE" >> $GITHUB_ENV
          elif  [[ $BRANCH_NAME == bugfix* ]] ;
          then
            echo "BUILD_TYPE=BUGFIX" >> $GITHUB_ENV
          else
            # default ist feature
            echo "BUILD_TYPE=FEATURE" >> $GITHUB_ENV
          fi

      - id: determine-component-version
        name: Determine Component Version
        uses: ./mcbscore/github/actions/determine-component-version

      # ##################################################################################
      # Release bauen
      # ##################################################################################

      - name: Run Test
        run: mocha app/test/validate.js

      - name: Generate
        run: mocha app/generate.js

      - name: Copy Sources
        run: |
          cp ./generated/mcbs-java/RestErrorCode.java ./generated/md-error-codes/src/main/java/de/md/ms/exception/rest/errorcodes

      - id: gradle-build
        name: Gradle Build
        uses: ./mcbscore/github/actions/gradle-build
        with:
          artifactoryUserName: ${{ secrets.MD_ARTIFACTORY_USER }}
          artifactoryPassword: ${{ secrets.MD_ARTIFACTORY_PW }}
          sonarqubeToken: ${{ secrets.SONARQUBE_TOKEN }}
          sonarqubeUrl: ${{ secrets.SONARQUBE_HOST_URL }}
          gradleOptions: ${{ github.event.inputs.gradleOptions }}
          gradleDirectory: generated/md-error-codes

      # Release erstellen
      - name: Create Release
        id: create_release
        if: env.BUILD_TYPE == 'RELEASE'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ env.TOKEN }}
        with:
          tag_name: '${{ env.COMPONENT_VERSION }}'
          release_name: '${{ env.COMPONENT_VERSION }}'
          draft: false
          prerelease: false

      # Release JAR hinzuf체gen
      - name: Upload Release JAR
        id: upload-release-jar
        if: env.BUILD_TYPE == 'RELEASE'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ env.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing its ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./generated/md-error-codes/build/libs/md-error-codes-${{ env.COMPONENT_VERSION }}.jar
          asset_name: md-error-codes-${{ env.COMPONENT_VERSION }}.jar
          asset_content_type: application/java-archive

