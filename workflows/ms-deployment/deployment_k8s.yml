name: K8s Deployment
#Name fuer den workflow. Wichtig bei mehreren workflows im selben Repository um die workflows im actions-tab unterscheiden zu koennen.
run-name: K8s ${{ inputs.environment }} Deployment ${{ inputs.component }} dry=${{ inputs.dryRun }}

on:
  workflow_dispatch:
    inputs:
      component:
        description: Der Name der Komponente
        required: true
        type: choice
        options: [ "kubernetes-namespace", "kubernetes-cluster" ]
      environment:
        description: Die Zielumgebung
        required: true
      timeout:
        description: Zeit, nach der das Helm Deployment zurückgerollt wird, wenn noch nicht erfolgreich
        required: false
        default: 10m0s
      maxWaitForDeployment:
        description: maximale Zeit, die beim Helm-Statusscheck auf ein Deployment gewartet wird
        required: true
        default: 11m0s
      dryRun:
        type: boolean
        description: Nicht deployen, nur Helm Chart Ergebnis anzeigen (helm --dry-run)
        required: false
        default: false

#Nur ein k8s Workflow darf gleichzeitg gestartet werden. Alle weitere k8s bleiben in pending bis der vorherige Workflow abgeschlossen sind.
concurrency:
  group: ${{ github.workflow }}-${{ inputs.component }}-${{ inputs.dryRun }}
  cancel-in-progress: false
env:
  DEPLOYMENT_PATH: .
  JRUNSCRIPT_JAVA_VERSION: 11

jobs:
  helm-deployment:
    runs-on: [self-hosted, k8s]
    strategy:
      fail-fast: false
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: ${{ env.DEPLOYMENT_PATH }}

      # Prüft, ob ein Verzeichnis für die Komponente in $DEPLOYMENT_PATH/properties/ existiert
      - name: Check component name
        shell: bash
        run: |
          component='${{ inputs.component }}'
          if [ ! -d "./${DEPLOYMENT_PATH}/properties/${component}" ]; then
              printf 'Der Name der Komponente "%s" existiert nicht\n' "${DEPLOYMENT_REPO}/properties/${component}" >&2
              exit 1
          fi

      # Prüft, ob deployed werden soll
      - name: Check whether enabled
        shell: bash
        run: |
          component='${{ inputs.component }}'
          environment='${{ inputs.environment }}'

          enabled=$(
            for f in \
              "./${DEPLOYMENT_PATH}/properties/${component}/kubernetes-deployment.json" \
              "./${DEPLOYMENT_PATH}/properties/${component}/kubernetes-deployment-${environment}.json"
            do
              printf '%s existiert' "$f" >&2
              if [ -e "$f" ]; then echo >&2; cat -- "$f"; else echo ' nicht' >&2; fi
            done | jq -s -r 'add | .enabled'
          )

          echo "K8S_DEPLOYMENT_ENABLED=$enabled" >> "$GITHUB_ENV"

      - name: Select Github Secrets for AWS
        uses: ./.github/actions/select-aws-github-secrets
        with:
          environment: ${{ inputs.environment }}
          awsAccessKeyId:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsAccessKeyIdProd: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          awsSecretAccessKey:     ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          awsSecretAccessKeyProd: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}

      - name: Read AWS Secrets
        uses: ./.github/actions/read-aws-secrets
        with:
          awsAccessKeyId: ${{ env.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
          awsParameterPairs: |
            /github/secrets/mcbs_token = GITHUB_TOKEN,
            /github/secrets/ssh/mdmcbsapi-app/zxrestapi_ppk = SSH_KEY

      - name: Determine deployment ref
        shell: bash
        run: |
          cd -- "$DEPLOYMENT_PATH"
          ref=$(git describe 2>/dev/null || git log --pretty=format:%h --max-count=1)
          echo "DEPLOYMENT_REF=$ref" >> "$GITHUB_ENV"

      - name: Create GitHub deployment
        if: ${{ env.K8S_DEPLOYMENT_ENABLED == 'true' }}
        uses: chrnorm/deployment-action@v2
        id: create-deployment
        with:
          token: ${{ env.GITHUB_TOKEN }}
          environment: ${{ inputs.environment }}
          ref: ${{ env.DEPLOYMENT_REF }}

      # Java installieren (für jrunscript in ms_properties_to_json.sh)
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          # eine Version mit jrunscript
          java-version: ${{ env.JRUNSCRIPT_JAVA_VERSION }}

      # jq installieren
      - name: Setup jq
        uses: freenet-actions/setup-jq@v3

      # Haupt-Deployment-Action
      - name: Deploy to K8s
        if: ${{ env.K8S_DEPLOYMENT_ENABLED == 'true' }}
        uses: ./.github/actions/deploy-to-k8s
        with:
          component: ${{ inputs.component }}
          componentVersion: ${{ inputs.componentVersion }}
          environment: ${{ inputs.environment }}
          dryRun: ${{ inputs.dryRun }}
          timeout: ${{ inputs.timeout }}
          maxWaitForDeployment: ${{ inputs.maxWaitForDeployment }}
          deploymentPath: ${{ env.DEPLOYMENT_PATH }}
          awsAccessKeyId: ${{ env.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ env.AWS_SECRET_ACCESS_KEY }}

      # Deployment als erfolgreich markieren
      - name: Update deployment status (success)
        if: ${{ env.K8S_DEPLOYMENT_ENABLED == 'true' && success() }}
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ env.GITHUB_TOKEN }}
          state: "success"
          deployment-id: ${{ steps.create-deployment.outputs.deployment_id }}

      # Deployment als fehlerhaft markieren
      - name: Update deployment status (failure)
        if: ${{ env.K8S_DEPLOYMENT_ENABLED == 'true' && failure() }}
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ env.GITHUB_TOKEN }}
          state: "failure"
          deployment-id: ${{ steps.create-deployment.outputs.deployment_id }}
