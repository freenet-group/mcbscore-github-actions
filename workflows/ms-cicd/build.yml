name: Build
on:
  pull_request:
    types: [ opened, reopened, synchronize ]
  workflow_dispatch:
    inputs:
      gradleOptions:
        description: ZusÃ¤tzliche optionale Gradle Parameter
        required: false
      actionsRepositoryBranch:
        description: Zu benutzender Branch des Repositories mcbscore-github-actions
        required: false
        default: main

# Concurrency beendet alle anderen Jobs mit der gleichen Gruppe, wenn ein neuer Job startet
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: [ self-hosted, k8s ]
    env:
      ACTIONS_REPOSITORY: freenet-group/mcbscore-github-actions
      ACTIONS_PATH: mcbscore/github
    steps:
      - name: Repository auschecken
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: AWS Parameter als Umgebungsvariablen setzen
        uses: ./.github/actions/read-aws-secrets
        with:
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          awsParameterPairs: |
            /github/secrets/mcbs_token = TOKEN,
            /github/secrets/mcbs_user = USER, 
            /github/secrets/jasypt_encryptor_password = JASYPT_ENCRYPTOR_PASSWORD

      - name: workflow.properties als Umgebungsvariablen setzen
        shell: bash
        run: |
          cat ./.github/workflow.properties >> $GITHUB_ENV

      - name: mcbscore-github-actions auschecken
        uses: actions/checkout@v4
        with:
          repository: ${{ env.ACTIONS_REPOSITORY }}
          token: ${{ env.TOKEN }}
          path: ${{ env.ACTIONS_PATH }}
          ref: ${{ github.event.inputs.actionsRepositoryBranch }}

      - name: Workflow initialisieren
        uses: ./mcbscore/github/actions/init-workflow
        with:
          installJava: true
          installGithubCli: true
          installJq: true

      - name: Microservice per Gradle bauen
        uses: ./mcbscore/github/actions/gradle-build
        with:
          artifactoryUserName: ${{ secrets.MD_ARTIFACTORY_USER }}
          artifactoryPassword: ${{ secrets.MD_ARTIFACTORY_PW }}
          sonarqubeToken: ${{ secrets.SONARQUBE_TOKEN }}
          sonarqubeUrl: ${{ secrets.SONARQUBE_HOST_URL }}
          gradleOptions: ${{ github.event.inputs.gradleOptions }}

      - name: Unit Test Ergebnisse hochladen
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          junit_files: '**/test-results/**/*.xml'
          large_files: true
