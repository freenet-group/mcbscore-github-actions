name: Deployment

#Name für den workflow. Wichtig bei mehreren workflows im selben Repository um die workflows im actions-tab unterscheiden zu können.
run-name: Deployment ${{ github.event.inputs.component }}:${{ github.event.inputs.componentVersion }} auf ${{ github.event.inputs.environment }}

on:
  workflow_dispatch:
    inputs:
      component:
        description: Der Name der Komponente
        required: true
      componentVersion:
        description: Die Version der Komponente
        required: true
      additionalDeploymentComponent:
        description: Ermöglicht Deployment unter anderem Namen
        required: false
      environment:
        description: Die Zielumgebung
        required: true
      platforms:
        description: Die Zielserver-Plattform(en)
        type: choice
        options: [ "vm, k8s", "vm", "k8s" ]
        required: false
        default: "vm, k8s"
      actionsRepositoryBranch:
        description: Zu benutzender Branch des Repositories mcbscore-github-actions
        type: string
        required: false
        default: main
      deploymentRepositoryBranch:
        description: Branch von Repository ms-deployment, der benutzt werden soll
        required: false
        default: main
  workflow_call:
    inputs:
      component:
        description: Der Name der Komponente
        required: true
        type: string
      componentVersion:
        description: Die Version der Komponente
        required: true
        type: string
      additionalDeploymentComponent:
        description: Ermöglicht Deployment unter anderem Namen
        required: false
        type: string
      environment:
        description: Die Zielumgebung
        required: true
        type: string
      platforms:
        description: Die Zielserver-Plattform(en); gültige Werte siehe gleichnamiger workflow_dispatch Input
        type: string
        required: false
        default: "vm, k8s"
      actionsRepositoryBranch:
        description: Zu benutzender Branch des Repositories mcbscore-github-actions
        type: string
        required: false
        default: main
      deploymentRepositoryBranch:
        description: Branch von Repository ms-deployment, der benutzt werden soll
        required: false
        default: main
        type: string

env:
  ACTIONS_REPOSITORY: freenet-group/mcbscore-github-actions
  ACTIONS_PATH: mcbscore/github
  DEPLOYMENT_PATH: mcbscore/deployment
  NODEJS_VERSION: 20

jobs:
  create-deployment:
    runs-on: ubuntu-latest
    outputs:
      deployment_id: ${{ steps.create-deployment.outputs.deployment_id }}
    steps:
      - name: Aufrufparameter des Workflows ausgeben
        env:
          INPUTS_JSON: ${{ toJSON(inputs) }}
        run: printf '%s\n' "$INPUTS_JSON"

      - name: Repository auschecken
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Select Github Secrets for AWS
        uses: ./.github/actions/select-aws-github-secrets
        with:
          environment: ${{ inputs.environment }}
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsAccessKeyIdProd: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          awsSecretAccessKeyProd: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}

      - name: AWS Parameter als Umgebungsvariablen setzen
        uses: ./.github/actions/read-aws-secrets
        with:
          awsAccessKeyId: ${{ env.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
          awsParameterPairs: |
            /github/secrets/mcbs_token = TOKEN

      - name: Referenz fürs Deployment setzen
        id: deployment_ref
        shell: bash
        run: |
          if  [[ ${{ github.event.inputs.componentVersion }} =~ '-SNAPSHOT' ]] ;
          then
            echo "DEPLOYMENT_REF=develop" >> $GITHUB_OUTPUT
          else
            echo "DEPLOYMENT_REF=${{ github.event.inputs.componentVersion }}" >> $GITHUB_OUTPUT
          fi

      - name: GitHub Deployment erstellen
        uses: chrnorm/deployment-action@v2
        id: create-deployment
        with:
          token: ${{ env.TOKEN }}
          environment: ${{ github.event.inputs.environment }}
          description: "Deployment auf ${{ github.event.inputs.platforms }}"
          ref: ${{ steps.deployment_ref.outputs.DEPLOYMENT_REF }}

  deploy:
    # self-hosted Runner für die Steps benutzen, um Zugriff auf MD Systeme zu haben
    runs-on: [self-hosted, k8s]
    needs: create-deployment
    # if: platforms enthält "vm" ", "-separiert (wie in choice Input) || ","-separiert (evtl in string Input)
    if: contains(format(', {0}, ', inputs.platforms), ', vm, ') || contains(format(',{0},', inputs.platforms), ',vm,')
    outputs:
      componentName: ${{ env.JIRA_COMPONENT }}
    steps:
      - name: Runner vorbereiten
        if: ${{ always() }}
        run: |
          docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GH_R_PACKAGES }}
          docker run --rm -v `pwd`:/target -w /target -t ghcr.io/freenet-group/container-base-images/ubuntu_2004_lts:latest sh -c "chown $(id -u):$(id -g) -R /target"

      - name: Repository auschecken
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Select Github Secrets for AWS
        uses: ./.github/actions/select-aws-github-secrets
        with:
          environment: ${{ inputs.environment }}
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsAccessKeyIdProd: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          awsSecretAccessKeyProd: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}

      - name: AWS Parameter als Umgebungsvariablen setzen
        uses: ./.github/actions/read-aws-secrets
        with:
          awsAccessKeyId: ${{ env.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
          awsParameterPairs: |
            /github/secrets/mcbs_token = TOKEN,
            /github/secrets/deployment_user = DEPLOYMENT_USER,
            /github/secrets/ssh/mdmcbsapi-app/zxrestapi_ppk = SSH_KEY,
            /github/secrets/checkmk_user = CHECKMK_USER,
            /github/secrets/checkmk_password = CHECKMK_PW

      - name: mcbscore-github-actions auschecken
        uses: actions/checkout@v4
        with:
          repository: ${{ env.ACTIONS_REPOSITORY }}
          token: ${{ env.TOKEN }}
          path: ${{ env.ACTIONS_PATH }}
          ref: ${{ inputs.actionsRepositoryBranch }}

      - name: ms-deployment auschecken
        uses: actions/checkout@v4
        with:
          repository: freenet-group/ms-deployment
          token: ${{ env.TOKEN }}
          path: ${{ env.DEPLOYMENT_PATH }}
          ref: ${{ github.event.inputs.deploymentRepositoryBranch }}

      - name: Workflow initialisieren
        uses: ./mcbscore/github/actions/init-workflow
        with:
          installJavaWithNashornEngine: true
          installNodeJs: true
          installJq: true

      - name: Download Release
        id: downloadRelease
        uses: ./mcbscore/github/actions/download-release-assets
        with:
          version: ${{ github.event.inputs.componentVersion }}
          assetPattern: '${{ github.event.inputs.component }}-${{ github.event.inputs.componentVersion }}.jar'
          targetPath: './${{ env.DEPLOYMENT_PATH }}/release'
          token: ${{ env.TOKEN }}

      - name: Deployment wenn Komponente unter gleichem Namen deployed werden soll
        id: deployRelease
        if: ${{ github.event.inputs.additionalDeploymentComponent == '' }}
        uses: ./mcbscore/github/actions/deploy-microservice
        with:
          component: ${{ github.event.inputs.component }}
          stage: ${{ github.event.inputs.environment }}
          componentConfigPath: ${{ env.DEPLOYMENT_PATH }}
          dockerImage: ghcr.io/freenet-group/mcbs-core/ms-${{ github.event.inputs.component }}:${{ github.event.inputs.componentVersion }}
          checkMkUser: ${{ env.CHECKMK_USER }}
          checkMkSecret: ${{ env.CHECKMK_PW }}
          deploymentUser: ${{ env.DEPLOYMENT_USER }}
          sshKey: ${{ env.SSH_KEY }}
          dockerRegistryToken: ${{ env.TOKEN }}

      - name: Deployment wenn Komponente unter anderem Namen deployed werden soll
        id: additionalDeployment
        if: ${{ github.event.inputs.additionalDeploymentComponent != '' }}
        uses: ./mcbscore/github/actions/deploy-microservice
        with:
          component: ${{ github.event.inputs.additionalDeploymentComponent }}
          stage: ${{ github.event.inputs.environment }}
          componentConfigPath: ${{ env.DEPLOYMENT_PATH }}
          checkMkUser: ${{ env.CHECKMK_USER }}
          checkMkSecret: ${{ env.CHECKMK_PW }}
          deploymentUser: ${{ env.DEPLOYMENT_USER }}
          sshKey: ${{ env.SSH_KEY }}

  deploy_k8s:
    needs: [create-deployment]
    # if: platforms enthält "k8s" ", "-separiert (wie in choice Input) || ","-separiert (evtl in string Input)
    if: contains(format(', {0}, ', inputs.platforms), ', k8s, ') || contains(format(',{0},', inputs.platforms), ',k8s,')
    uses: freenet-group/mcbscore-reusable-workflows/.github/workflows/deployment_k8s.yml@2.0.0
    secrets: inherit
    with:
      componentVersion: ${{ github.event.inputs.componentVersion }}
      environment: ${{ github.event.inputs.environment }}
      component: ${{ github.event.inputs.component }}

  upload_sbom:
    runs-on: [ self-hosted, k8s ]
    needs: [deploy, deploy_k8s]
    steps:
      - name: Repository auschecken
        uses: actions/checkout@v4

      - name: Select Github Secrets for AWS
        uses: ./.github/actions/select-aws-github-secrets
        with:
          environment: ${{ inputs.environment }}
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsAccessKeyIdProd: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          awsSecretAccessKeyProd: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}

      - name: AWS Parameter als Umgebungsvariablen setzen
        uses: ./.github/actions/read-aws-secrets
        with:
          awsAccessKeyId: ${{ env.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
          awsParameterPairs: |
            /github/secrets/mcbs_token = TOKEN,
            /github/secrets/dependencytrack_protocol = DEPENDENCYTRACK_PROTOCOL,
            /github/secrets/dependencytrack_hostname = DEPENDENCYTRACK_HOSTNAME,
            /github/secrets/dependencytrack_port = DEPENDENCYTRACK_PORT,
            /github/secrets/dependencytrack_api_key = DEPENDENCYTRACK_API_KEY

      - name: workflow.properties als Umgebungsvariablen setzen
        shell: bash
        run: |
          cat ./.github/workflow.properties >> $GITHUB_ENV

      - name: mcbscore-github-actions auschecken
        uses: actions/checkout@v4
        with:
          repository: ${{ env.ACTIONS_REPOSITORY }}
          token: ${{ env.TOKEN }}
          path: ${{ env.ACTIONS_PATH }}
          ref: ${{ inputs.actionsRepositoryBranch }}

      - name: SBOM Asset vom Release herunterladen 
        id: downloadRelease
        uses: ./mcbscore/github/actions/download-release-assets
        with:
          version: ${{ github.event.inputs.componentVersion }}
          assetPattern: ${{ env.DEPENDENCYTRACK_BOM_NAME }}
          targetPath: ${{ env.DEPENDENCYTRACK_BOM_PATH }}
          token: ${{ env.TOKEN }}

      - name: SBOM an DependencyTrack übergeben
        uses: freenet-group/gh-upload-sbom-with-tagging@0.1.0
        with:
          component: ${{ env.JIRA_COMPONENT }}
          component_version: ${{ github.event.inputs.componentVersion }}
          stage_tag: ${{ github.event.inputs.environment }}
          dependencytrack_protocol: ${{ env.DEPENDENCYTRACK_PROTOCOL }}
          dependencytrack_hostname: ${{ env.DEPENDENCYTRACK_HOSTNAME }}
          dependencytrack_port: ${{ env.DEPENDENCYTRACK_PORT }}
          dependencytrack_api_key: ${{ env.DEPENDENCYTRACK_API_KEY }}
          bomfilename: ${{ env.DEPENDENCYTRACK_BOM_PATH }}${{ env.DEPENDENCYTRACK_BOM_NAME }}
      
      - name: Alte SBOMs löschen
        uses: freenet-group/sbom-cleanup@1.1.0
        with:
          dependencytrack_protocol: ${{ env.DEPENDENCYTRACK_PROTOCOL }}
          dependencytrack_hostname: ${{ env.DEPENDENCYTRACK_HOSTNAME }}
          dependencytrack_port: ${{ env.DEPENDENCYTRACK_PORT }}
          dependencytrack_api_key: ${{ env.DEPENDENCYTRACK_API_KEY }}
          project_prefix: ${{ env.JIRA_COMPONENT }}
          days_to_keep: '90'
          dry_run: 'false'

  deployment_status:
    needs: [create-deployment, deploy, deploy_k8s]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Repository auschecken
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Select Github Secrets for AWS
        uses: ./.github/actions/select-aws-github-secrets
        with:
          environment: ${{ inputs.environment }}
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsAccessKeyIdProd: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          awsSecretAccessKeyProd: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}

      - name: AWS Parameter als Umgebungsvariablen setzen
        uses: ./.github/actions/read-aws-secrets
        with:
          awsAccessKeyId: ${{ env.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
          awsParameterPairs: |
            /github/secrets/mcbs_token = TOKEN

      - name: Deployment Status im Fehlerfall auf "failure" setzen
        if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ env.TOKEN }}
          state: "failure"
          deployment-id: ${{ needs.create-deployment.outputs.deployment_id }}

      - name: Deployment Status im Erfolgsfall auf "success" setzen
        if: ${{ !(contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')) }}
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ env.TOKEN }}
          state: "success"
          deployment-id: ${{ needs.create-deployment.outputs.deployment_id }}

  sanity_test:
    needs: [deploy, deploy_k8s]
    # self-hosted Runner für die Steps benutzen, um Zugriff auf MD Systeme zu haben
    runs-on: [self-hosted, k8s]
    steps:
      - name: Repository auschecken
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Select Github Secrets for AWS
        uses: ./.github/actions/select-aws-github-secrets
        with:
          environment: ${{ inputs.environment }}
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsAccessKeyIdProd: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          awsSecretAccessKeyProd: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}

      - name: AWS Parameter als Umgebungsvariablen setzen
        uses: ./.github/actions/read-aws-secrets
        with:
          awsAccessKeyId: ${{ env.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
          awsParameterPairs: |
            /github/secrets/mcbs_token = TOKEN

      - name: mcbscore-github-actions auschecken
        uses: actions/checkout@v4
        with:
          repository: '${{ env.ACTIONS_REPOSITORY }}'
          token: '${{ env.TOKEN }}'
          path: '${{ env.ACTIONS_PATH }}'
          ref: '${{ inputs.actionsRepositoryBranch }}'

      - name: Workflow initialisieren
        uses: ./mcbscore/github/actions/init-workflow
        with:
          installJava: true
          installNodeJs: true
          installJq: true

      - name: Karate Tests ausführen
        if: env.SANITY_TESTS_ENABLED != 'false'
        uses: ./mcbscore/github/actions/sanity-test
        with:
          component: '${{ inputs.component }}'
          environment: '${{ inputs.environment }}'
          awsAccessKeyId: '${{ env.AWS_ACCESS_KEY_ID }}'
          awsSecretAccessKey: '${{ env.AWS_SECRET_ACCESS_KEY }}'
          karateVersion: '${{ env.KARATE_VERSION }}'
          testDir: './sanityTests'
          testFiles: 'SanityTest.feature'

  developer-portal-upload:
    uses: ./.github/workflows/developerPortal.yml
    secrets: inherit
    with:
      component: "${{ inputs.component }}"
      environment: "${{ inputs.environment }}"
      componentVersion: "${{ inputs.componentVersion }}"
      actionsRepositoryBranch: "${{ inputs.actionsRepositoryBranch }}"

  bambi-notification:
    runs-on: [self-hosted, k8s]
    needs: [deploy, deploy_k8s, developer-portal-upload]
    if: ${{ always() && (github.event.inputs.environment == 'git' || github.event.inputs.environment == 'b2b' || github.event.inputs.environment == 'prod') }}
    steps:
      - name: Ermitteln des Gesamtstatus
        run: |
          failedJobs=""
          delimiter=""
          
          # prüfe, ob deploy failed oder cancelled ist
          if [[ "${{ needs.deploy.result }}" == "failure" ]] || [[ "${{ needs.deploy.result }}" == "cancelled" ]]; then
            failedJobs=${failedJobs}${delimiter}deploy
            delimiter=,
          fi

          # prüfe, ob deploy_k8s failed oder cancelled ist
          if [[ "${{ needs.deploy_k8s.result }}" == "failure" ]] || [[ "${{ needs.deploy_k8s.result }}" == "cancelled" ]]; then
            failedJobs=${failedJobs}${delimiter}deploy_k8s
            delimiter=,
          fi

          # prüfe, ob developer-portal-upload failed oder cancelled ist
          if [[ "${{ needs.developer-portal-upload.result }}" == "failure" ]] || [[ "${{ needs.developer-portal-upload.result }}" == "cancelled" ]]; then
            failedJobs=${failedJobs}${delimiter}developer-portal-upload
            delimiter=,
          fi
          
          if [ -z "$failedJobs" ];
          then
            echo "DEPLOY_STATE=successful" >> $GITHUB_ENV
          else
            echo "DEPLOY_STATE=failure:${failedJobs}" >> $GITHUB_ENV
          fi

      - name: Bambi Meldung
        id: deploy_state
        shell: bash
        run: |
          curlResult=$(curl -sw %{http_code} --location --request POST 'https://bambi-api-prod.md-abr-prod.k8s.freenet-group.de/v2/bambi/deployment/environmentversion' \
          --header 'Content-Type: application/json' \
          --data-raw '{
            "version": "${{ github.event.inputs.componentVersion }}",
            "componentName": "${{ needs.deploy.outputs.componentName }}",
            "originComponentName": "${{ github.event.inputs.component }}",
            "workflowName": "${{ github.workflow }}",
            "environment": "${{ github.event.inputs.environment }}",
            "extern": false,
            "workflowRunId": ${{ github.run_id }},
            "deployState": "${{ env.DEPLOY_STATE }}",
            "deployUser": "${{ github.actor }}"
          }')

          statusCode="${curlResult:${#curlResult}-3}"
          echo "statusCode: $statusCode"

          if [[ "statusCode" -ge "400" ]]; then
            echo "Result: $curlResult"
            exit 1
          fi