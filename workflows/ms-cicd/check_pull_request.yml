name: Check Pull-Request

# Concurrency beendet alle anderen Jobs mit der gleichen Gruppe, wenn ein neuer Job startet
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    types: [opened, labeled, unlabeled, synchronize, reopened, ready_for_review]

jobs:
  # Synchronisiert die GitHub PR Labels mit den Jira Components
  syncLabels:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: AWS Secrets auslesen
        uses: ./.github/actions/read-aws-secrets
        with:
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          awsParameterPairs: |
            /github/secrets/mcbstest_jiracloud_credentials = MCBSTEST_JIRACLOUD_CREDENTIALS,
            /github/common/jira/jira_cloud_url = JIRA_CLOUD_URL

      - name: Sync GitHub PR Labels with Jira Components
        uses: freenet-group/github-pr-label-sync-with-jira@0.2.5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          github-labels: ms-deployment:yes, ms-configuration:yes, aws-parameterstore:yes
          jira-components: ms-deployment, ms-configuration, AWS-Parameterstore
          jira-api-url: ${{ env.JIRA_CLOUD_URL }}
          jira-auth-token: ${{ env.MCBSTEST_JIRACLOUD_CREDENTIALS }}

  # Prüft die GitHub PR Labels auf Vollständigkeit
  checkLabels:
    needs: syncLabels
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Check Release Labels
        if: always()
        uses: mheap/github-action-required-labels@v5
        with:
          count: 1
          mode: exactly
          add_comment: true
          labels: "release:patch, release:minor, release:major"
          message: "Pull-Request wurde aufgrund fehlender Release-Labels abgelehnt. \n
                      Es muss exakt eines dieser Labels gesetzt werden: \n
                      - release:patch\n
                      - release:minor\n
                      - release:major"
      - name: Check MS-Configuration Labels
        if: always()
        uses: mheap/github-action-required-labels@v5
        with:
          count: 1
          mode: exactly
          add_comment: true
          labels: "ms-configuration:yes, ms-configuration:no"
          message: "Pull-Request wurde aufgrund fehlender MS-Configuration-Labels abgelehnt. \n
                      Es muss exakt eines dieser Labels gesetzt werden: \n
                      - ms-configuration:yes\n
                      - ms-configuration:no"
      - name: Check MS-Deployment Labels
        if: always()
        uses: mheap/github-action-required-labels@v5
        with:
          count: 1
          mode: exactly
          add_comment: true
          labels: "ms-deployment:yes, ms-deployment:no"
          message: "Pull-Request wurde aufgrund fehlender MS-Deployment-Labels abgelehnt. \n
                      Es muss exakt eines dieser Labels gesetzt werden: \n
                      - ms-deployment:yes\n
                      - ms-deployment:no"
      - name: Check AWS-Parameterstore Labels
        if: always()
        uses: mheap/github-action-required-labels@v5
        with:
          count: 1
          mode: exactly
          add_comment: true
          labels: "aws-parameterstore:yes, aws-parameterstore:no"
          message: "Pull-Request wurde aufgrund fehlender AWS-Parameterstore-Labels abgelehnt. \n
                      Es muss exakt eines dieser Labels gesetzt werden: \n
                      - aws-parameterstore:yes\n
                      - aws-parameterstore:no"
  # Sendet eine Benachrichtigung an die angegebenen Benutzer, wenn bestimmte Labels gesetzt sind
  notifyOnLabel:
    needs: checkLabels
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    if: ${{ !github.event.pull_request.draft }}
    steps:
      - name: DOGS Benachrichtigung
        uses: freenet-group/notify-on-label@1.0.10
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          label_list: 'ms-configuration:yes, ms-deployment:yes'
          user_name_list: '@freenet-group/abr-ms-gh-deployments'
          pull_request_number: ${{ github.event.pull_request.number }}

  # Prüft die API-Version in den API-Doku-YAML-Dateien
  checkApiVersion:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0        
      - name: workflow.config einlesen
        id: read-properties
        run: |
          { cat .github/workflow.properties; echo; } | tee -a -- "$GITHUB_ENV"
      - name: Check API Version
        if: ${{ env.API_DOC_YAML_PATTERN != ''}}
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |        
          echo "API VERSION CHECK: $API_DOC_YAML_PATTERN"
          changedFiles=$(gh pr view ${{github.event.number}} --json files --jq '.files.[].path')
          yamlPattern=${API_DOC_YAML_PATTERN/.\//}
          yamlPattern=${yamlPattern/\*.yaml/}
          if [[ $changedFiles != *"$yamlPattern"* ]]; then
            echo "keine yaml-Änderungen in Pullrequest #${{github.event.number}} gefunden!"
            exit 0
          else
            echo -e "Änderungen an yaml-Dateien in Pullrequest #${{github.event.number}} gefunden!\n"
            # alle PR-Commits holen
            prCommits=$(gh pr view ${{github.event.number}} --json commits --jq '.commits.[].oid')
            yamlFiles=$(find . -wholename "$API_DOC_YAML_PATTERN")
  
            for yamlFile in $yamlFiles; do
                echo "Teste yaml-Datei '$yamlFile' ..."
                # Versionscheck
                if ! version=$(grep -P '^\s*version:' "$yamlFile"); then
                    echo "Kein 'version:' gefunden in $yamlFile"
                    exit 1
                else
                    version=${version/  version: /}
                    echo "version: $version"
                    # check, ob version "{patchLevel}" enthält
                    if [[ $version == *"{patchLevel}"* ]]; then
                        echo -e "'version:' enthält '{patchlevel}'!\nBitte konkrete Version in master-yaml setzen, transform ausführen und yamls einchecken."
                        exit 1
                    fi
                    # check, ob Versionsänderung im PR
                    # Zeile mit version: suchen
                    versionLine=$(grep -n 'version:' $yamlFile | cut -d: -f1)
                    # Commit-Hash der letzten Änderung an der Versionszeile
                    commitHash=$(git log -n 1 -L "$versionLine,$versionLine:$yamlFile" --pretty=format:%H -s)
                    echo "Commit '$commitHash' der letzten Versionsänderung in PR enthalten?"
                    if [[ $prCommits == *"$commitHash"* ]]; then
                        echo "Ja"
                    else
                        echo -e "Versionsänderung nicht in PR enthalten!\nBitte Version in master-yaml anpassen, transform ausführen und yamls einchecken."
                        exit 1
                    fi                    
                    echo ""
                fi
            done
          fi
