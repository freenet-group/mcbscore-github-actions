name: Check Pull-Request

# Concurrency beendet alle anderen Jobs mit der gleichen Gruppe, wenn ein neuer Job startet
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    types: [opened, labeled, unlabeled, synchronize, reopened, ready_for_review]

jobs:
  # Synchronisiert die GitHub PR Labels mit den Jira Components
  syncLabels:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: AWS Secrets auslesen
        uses: ./.github/actions/read-aws-secrets
        with:
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          awsParameterPairs: |
            /github/secrets/mcbstest_jiracloud_credentials = MCBSTEST_JIRACLOUD_CREDENTIALS,
            /github/common/jira/jira_cloud_url = JIRA_CLOUD_URL

      - name: Sync GitHub PR Labels with Jira Components
        uses: freenet-group/github-pr-label-sync-with-jira@0.2.5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          github-labels: ms-deployment:yes, ms-configuration:yes, aws-parameterstore:yes
          jira-components: ms-deployment, ms-configuration, AWS-Parameterstore
          jira-api-url: ${{ env.JIRA_CLOUD_URL }}
          jira-auth-token: ${{ env.MCBSTEST_JIRACLOUD_CREDENTIALS }}

  # Prüft die GitHub PR Labels auf Vollständigkeit
  checkLabels:
    needs: syncLabels
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Check Release Labels
        if: always()
        uses: mheap/github-action-required-labels@v5
        with:
          count: 1
          mode: exactly
          add_comment: true
          labels: "release:patch, release:minor, release:major"
          message: "Pull-Request wurde aufgrund fehlender Release-Labels abgelehnt. \n
                      Es muss exakt eines dieser Labels gesetzt werden: \n
                      - release:patch\n
                      - release:minor\n
                      - release:major"
      - name: Check MS-Configuration Labels
        if: always()
        uses: mheap/github-action-required-labels@v5
        with:
          count: 1
          mode: exactly
          add_comment: true
          labels: "ms-configuration:yes, ms-configuration:no"
          message: "Pull-Request wurde aufgrund fehlender MS-Configuration-Labels abgelehnt. \n
                      Es muss exakt eines dieser Labels gesetzt werden: \n
                      - ms-configuration:yes\n
                      - ms-configuration:no"
      - name: Check MS-Deployment Labels
        if: always()
        uses: mheap/github-action-required-labels@v5
        with:
          count: 1
          mode: exactly
          add_comment: true
          labels: "ms-deployment:yes, ms-deployment:no"
          message: "Pull-Request wurde aufgrund fehlender MS-Deployment-Labels abgelehnt. \n
                      Es muss exakt eines dieser Labels gesetzt werden: \n
                      - ms-deployment:yes\n
                      - ms-deployment:no"
      - name: Check AWS-Parameterstore Labels
        if: always()
        uses: mheap/github-action-required-labels@v5
        with:
          count: 1
          mode: exactly
          add_comment: true
          labels: "aws-parameterstore:yes, aws-parameterstore:no"
          message: "Pull-Request wurde aufgrund fehlender AWS-Parameterstore-Labels abgelehnt. \n
                      Es muss exakt eines dieser Labels gesetzt werden: \n
                      - aws-parameterstore:yes\n
                      - aws-parameterstore:no"
  # Sendet eine Benachrichtigung an die angegebenen Benutzer, wenn bestimmte Labels gesetzt sind
  notifyOnLabel:
    needs: checkLabels
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    if: ${{ !github.event.pull_request.draft }}
    steps:
      - name: DOGS Benachrichtigung
        uses: freenet-group/notify-on-label@1.0.10
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          label_list: 'ms-configuration:yes, ms-deployment:yes'
          user_name_list: '@freenet-group/abr-ms-gh-deployments'
          pull_request_number: ${{ github.event.pull_request.number }}

  # Prüft die API-Version in den API-Doku-YAML-Dateien
  checkApiVersion:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0        
      - name: workflow.config einlesen
        id: read-properties
        run: |
          { cat .github/workflow.properties; echo; } | tee -a -- "$GITHUB_ENV"
      - name: Check API Version
        if: ${{ env.API_DOC_YAML_PATTERN != ''}}
        shell: bash
        run: |
          echo "API VERSION CHECK: $API_DOC_YAML_PATTERN"
          echo -e "==================\n"
          yamlFiles=$(find . -wholename "$API_DOC_YAML_PATTERN")
          if [ -z "$yamlFiles" ]; then
            echo "keine yaml-Dateien gefunden!"
            exit 1
          else
              echo -e "yaml-Dateien gefunden :\n$yamlFiles\n"
          fi

          for yamlFile in $yamlFiles; do
              echo "Teste yaml-Datei '$yamlFile' ..."
              # Versionscheck
              version=$(grep 'version:' $yamlFile)
              if [ -z "$version" ]; then
                  echo "No 'version:' found in $yamlFile"
                  exit 1
              else
                  version=${version/  version: /}
                  echo "version: $version"
                  # check, ob version "{patchLevel}" enthält
                  if [[ $version == *"{patchLevel}"* ]]; then
                      echo -e "'version:' enthält '{patchlevel}'!\nBitte konkrete Version in master-yaml setzen, transform ausführen und yamls einchecken."
                      exit 1
                  fi
                  # check, ob Version bei/nach Dateiänderung geändert wurde
                  # Zeile mit version: suchen
                  versionLine=$(grep -n 'version:' $yamlFile | cut -d: -f1)
                  #echo "version line: $versionLine"
                  # Datum der letzten Änderung an der Datei
                  lastChange=$(git log -1 --pretty="format:%ct" $yamlFile)
                  echo -e "Zeitpunkt letzte Dateiänderung:\t\t$lastChange ($(date -d @$lastChange))"
                  # Commit-Hash der letzten Änderung an der Versionszeile
                  commitHash=$(git log -n 1 -L "$versionLine,$versionLine:$yamlFile" | grep "commit")
                  commitHash=${commitHash/commit /}
                  #echo "commit hash: $commitHash"
                  # Datum der letzten Änderung an der Versionszeile
                  versionChange=$(git log -1 --pretty="format:%ct" $commitHash)
                  echo -e "Zeitpunkt letzte Versionsänderung:\t$versionChange ($(date -d @$versionChange))\n"
                  # check, ob bei der letzten Dateiänderung (auch) die Versionsänderung erfolgte
                  if [ $lastChange -gt $versionChange ]; then
                      echo -e "Letzte Änderung an der Version vor letzter Dateiänderung!\nBitte Version in master-yaml anpassen, transform ausführen und yamls einchecken."
                      exit 1
                  fi
                  echo ""
              fi
          done
