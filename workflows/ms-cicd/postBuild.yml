#
# Generated by repo freenet-group/mcbscore-github-actions / workflow Distribute from file workflows/ms-cicd/postBuild.yml
#
name: PostBuild

on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: Die Release-Version
        required: true
      issueList:
        description: Die Liste der integrierten JIRA-Issues
        required: false
      epic:
        description: Das EPIC (JIRA) als Releaseklammer (META-170 = "unbestimmt")
        required: false
        default: META-170
      actionsRepositoryBranch:
        description: Zu benutzender Branch des Repositories mcbscore-github-actions
        required: false
        default: main
      bambiArgs:
        description: 'JSON string for Bambi API call. Should contain fields: ibnDate, changesInConfiguration, changesInDeployment, dbChanges, dependencies, renovateInfo, and renovate.'
        required: false
        default: '{"ibnDate": "", "changesInConfiguration": "", "changesInDeployment": "", "dbChanges": "", "dependencies": "", "renovateInfo": "", "renovate": ""}'
      hasSQL:
        description: Gibt an, ob SQL-Änderungen vorhanden sind
        required: false
        default: false
      hasConfiguration:
        description: Gibt an, ob Konfigurationsänderungen vorhanden sind
        required: false
        default: false
      hasDependencies:
        description: Gibt an, ob Abhängigkeiten vorhanden sind
        required: false
        default: false
      hasDeployment:
        description: Gibt an, ob Deployment-Änderungen vorhanden sind
        required: false
        default: false

jobs:
  postBuild:
    # self-hosted Runner für den Systeminternen Zugriff
    runs-on: [ self-hosted, k8s ]
    env:
      ACTIONS_REPOSITORY: freenet-group/mcbscore-github-actions
      ACTIONS_PATH: mcbscore/github
      MAIL_PURPOSE: MSCICDBuild
      TEAMS_MAIL: 'b48281f2.freenetgroup.onmicrosoft.com@emea.teams.ms#tp.bs.abr.da.ps@freenet.ag#it.pa.testmanagement@freenet.ag'
      BAMBI_API_URL: 'https://bambi-api-prod.md-abr-prod.k8s.freenet-group.de/v1/bambi/initialBuild'
      TZ: Europe/Berlin
      LANG: de_DE.UTF-8
    steps:
      - name: locale konfigurieren
        run: sudo locale-gen "$LANG" && sudo update-locale LANG="$LANG"

      - name: Repository auschecken
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: AWS Parameter in Umgebungsvariablen schreiben
        id: read-aws-secrets
        uses: ./.github/actions/read-aws-secrets
        with:
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          awsParameterPairs: |
            /github/secrets/mcbs_token = TOKEN,
            /github/secrets/mcbstest_credentials = MCBSTEST_CREDENTIALS,
            /github/common/jira/api_url = JIRA_API_URL, 
            /github/common/jira/jira_cloud_web_url = JIRA_CLOUD_WEB_URL,
            /github/common/sonar/api_url = SONAR_API_URL,
            /github/common/JIRA_URL2 = JIRA_URL2,
            /github/secrets/mcbstest_jiracloud_credentials = MCBSTEST_JIRACLOUD_CREDENTIALS,
            /github/common/jira/jira_cloud_url = JIRA_CLOUD_URL

      - name: mcbscore-github-actions Repository auschecken
        uses: actions/checkout@v4
        with:
          repository: freenet-group/mcbscore-github-actions
          token: ${{ env.TOKEN }}
          path: ${{ env.ACTIONS_PATH }}
          ref: ${{ inputs.actionsRepositoryBranch }}

      - name: Workflow initialisieren
        uses: ./mcbscore/github/actions/init-workflow
        with:
          installJava: true

      - name: Konfiguriere Jira für ABRMS Projekt
        uses: ./mcbscore/github/actions/jira-configuration-jc
        with:
          jiraUrl: ${{ env.JIRA_CLOUD_URL }}
          jiraCredentials: ${{ env.MCBSTEST_JIRACLOUD_CREDENTIALS }}
          jiraProject: ABRMS
          component: ${{ env.JIRA_COMPONENT }}
          componentVersion: ${{ inputs.releaseVersion }}
          componentList: '${{ env.JIRA_COMPONENT }},ABRMS (unspez.)'
          atlassianToolsVersion: ${{ env.ATLASSIAN_DEVELOPER_TOOLS_VERSION }}

      - name: Konfiguriere Jira für MCBS Projekt
        uses: ./mcbscore/github/actions/jira-configuration-jc
        with:
          jiraUrl: ${{ env.JIRA_CLOUD_URL }}
          jiraCredentials: ${{ env.MCBSTEST_JIRACLOUD_CREDENTIALS }}
          jiraProject: MCBS
          component: ${{ env.JIRA_COMPONENT }}
          componentVersion: ${{ inputs.releaseVersion }}
          componentList: '${{ env.JIRA_COMPONENT }},Microservices'
          atlassianToolsVersion: ${{ env.ATLASSIAN_DEVELOPER_TOOLS_VERSION }}

      - name: Issuelist von "," auf " " umwandeln
        id: issueListNoComma
        run: |
          OUTPUT=$(echo "${{ inputs.issueList }}" | tr -s ',' ' ')
          echo "issueListNoComma=$(echo $OUTPUT)" >> $GITHUB_OUTPUT

      - name: Weitere Infos zur IssueList holen
        uses: ./mcbscore/github/actions/fetch-issue-information
        with:
          jiraUrl: ${{ env.JIRA_CLOUD_URL }}
          jiraCredentials: ${{ env.MCBSTEST_JIRACLOUD_CREDENTIALS }}
          issueList: ${{ steps.issueListNoComma.outputs.issueListNoComma }}
          atlassianToolsVersion: ${{ env.ATLASSIAN_DEVELOPER_TOOLS_VERSION }}

      - name: Bambi Args auslesen
        id: parse-bambi-args
        run: |
          bambiArgs='${{ inputs.bambiArgs }}'
          echo "bambiArgs: $bambiArgs"
          
          changesInConfiguration=$(echo "$bambiArgs" | jq -r '.changesInConfiguration')
          changesInDeployment=$(echo "$bambiArgs" | jq -r '.changesInDeployment')
          dbChanges=$(echo "$bambiArgs" | jq -r '.dbChanges')
          dependencies=$(echo "$bambiArgs" | jq -r '.dependencies')
          ibnDate=$(echo "$bambiArgs" | jq -r '.ibnDate')
          renovateInfo=$(echo "$bambiArgs" | jq -r '.renovateInfo')
          renovate=$(echo "$bambiArgs" | jq -r '.renovate')

          # Output parsed values to GITHUB_OUTPUT
          echo "changesInConfiguration=$changesInConfiguration" >> $GITHUB_OUTPUT
          echo "changesInDeployment=$changesInDeployment" >> $GITHUB_OUTPUT
          echo "dbChanges=$dbChanges" >> $GITHUB_OUTPUT
          echo "dependencies=$dependencies" >> $GITHUB_OUTPUT
          echo "ibnDate=$ibnDate" >> $GITHUB_OUTPUT
          echo "renovateInfo=$renovateInfo" >> $GITHUB_OUTPUT
          echo "renovate=$renovate" >> $GITHUB_OUTPUT

      - name: Release bei Bambi melden
        env:
          ISSUE_LIST: ${{ steps.issueListNoComma.outputs.issueListNoComma }}
          IBN_DATE: ${{ steps.parse-bambi-args.outputs.ibnDate }}
          CHANGES_IN_CONFIGURATION: ${{ steps.parse-bambi-args.outputs.changesInConfiguration }}
          CHANGES_IN_DEPLOYMENT: ${{ steps.parse-bambi-args.outputs.changesInDeployment }}
          DB_CHANGES: ${{ steps.parse-bambi-args.outputs.dbChanges }}
          DEPENDENCIES: ${{ steps.parse-bambi-args.outputs.dependencies }}
          RENOVATE_INFO: ${{ steps.parse-bambi-args.outputs.renovateInfo }}
          RENOVATE: ${{ steps.parse-bambi-args.outputs.renovate }}
          INPUT_RELEASE_VERSION: ${{ inputs.releaseVersion }}
        run: |
          issueListWithDelimiter=$(echo "$ISSUE_LIST" | tr -s ' ' ',')
          echo "Create BAMBI-Entry for IssueList: $issueListWithDelimiter"

          requestBody="{
            \"buildInfo\": {
              \"ibnDate\": \"$IBN_DATE\",
              \"changesInConfiguration\": \"$CHANGES_IN_CONFIGURATION\",
              \"changesInDeployment\": \"$CHANGES_IN_DEPLOYMENT\",
              \"dbChanges\": \"$DB_CHANGES\",
              \"dependencies\": \"$DEPENDENCIES\",
              \"renovateInfo\": \"$RENOVATE_INFO\"
            },
            \"buildUser\": \"mcbstest\",
            \"componentName\": \"${{ env.JIRA_COMPONENT }}\",
            \"issueList\": \"$issueListWithDelimiter\",
            \"renovate\": \"$RENOVATE\",
            \"versionNo\": \"$INPUT_RELEASE_VERSION\"
          }"

          echo "Bambi RequestBody: $requestBody"

          http_response=$(curl -w "%{http_code}\n" --location --request POST "${{ env.BAMBI_API_URL }}" --header "Content-Type: application/json" --data-raw "$requestBody")
          echo "Response: ${http_response}"

          http_code=$(echo "$http_response" | cut -d '}' -f 2)
          if [ "$http_code" != "200" ]; then
            exit 1
          fi

      - name: FixVersion bei Jira eintragen
        if: ${{ steps.parse-bambi-args.outputs.renovate == 'false' }}
        uses: ./mcbscore/github/actions/set-fix-version-jc
        with:
          jiraUrl: ${{ env.JIRA_CLOUD_URL }}
          jiraCredentials: ${{ env.MCBSTEST_JIRACLOUD_CREDENTIALS }}
          component: ${{ env.JIRA_COMPONENT }}
          componentVersion: ${{ inputs.releaseVersion }}
          issueList: ${{ steps.issueListNoComma.outputs.issueListNoComma }}
          atlassianToolsVersion: ${{ env.ATLASSIAN_DEVELOPER_TOOLS_VERSION }}
          included_components: ${{ env.INCLUDED_COMPONENTS }}

      - name: Release Version als Kommentar im Ticket eintragen
        if: ${{ steps.parse-bambi-args.outputs.renovate == 'false' }}
        uses: ./mcbscore/github/actions/set-issue-comment
        with:
          jiraUrl: ${{ env.JIRA_CLOUD_URL }}
          jiraCredentials: ${{ env.MCBSTEST_JIRACLOUD_CREDENTIALS }}
          comment: 'Releasebuild : ${{ env.JIRA_COMPONENT }}_${{ inputs.releaseVersion }}'
          issueList: ${{ steps.issueListNoComma.outputs.issueListNoComma }}
          atlassianToolsVersion: ${{ env.ATLASSIAN_DEVELOPER_TOOLS_VERSION }}
     
      - name: IBN Datum ermitteln
        id: determine-going-live-date
        if: ${{ steps.parse-bambi-args.outputs.renovate == 'false' }}
        uses: ./mcbscore/github/actions/determine-going-live-date
        with:
          jiraUrl: ${{ env.JIRA_CLOUD_URL }}
          jiraCredentials: ${{ env.MCBSTEST_JIRACLOUD_CREDENTIALS }}
          epic: ${{ inputs.epic }}
          atlassianToolsVersion: ${{ env.ATLASSIAN_DEVELOPER_TOOLS_VERSION }}

      - name: Info an Teams Kanal senden
        if: ${{ steps.parse-bambi-args.outputs.renovate == 'false' }}
        uses: ./mcbscore/github/actions/mail-notification
        with:
          component: ${{ env.JIRA_COMPONENT }}
          componentVersion: ${{ inputs.releaseVersion }}
          goingLiveDate: ${{ steps.determine-going-live-date.outputs.goingLiveDate }}
          issueList: issue_info.csv
          hasSql: ${{ inputs.hasSQL }}
          hasConfiguration: ${{ inputs.hasConfiguration }}
          hasDependencies: ${{ inputs.hasDependencies }}
          hasDeployment: ${{ inputs.hasDeployment }}
          additionalText: "extra"
          epic: ${{ inputs.epic }}
          mailAddress: ${{ env.TEAMS_MAIL }}
          purpose: ${{ env.MAIL_PURPOSE }}
          atlassianToolsVersion: ${{ env.ATLASSIAN_DEVELOPER_TOOLS_VERSION }}
          repositoryName: ${{ github.REPOSITORY }}
