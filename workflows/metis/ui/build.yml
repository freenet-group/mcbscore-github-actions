name: Build

on:
  push:
    branches-ignore:
      - release
  pull_request:
    branches-ignore:
      - release
      - develop
  workflow_dispatch:
    inputs:
      actionsRepositoryBranch:
        description: Zu benutzender Branch des Repositories mcbscore-github-actions
        required: false
        default: main

jobs:
  build:
    # self-hosted Runner für die Steps benutzen, um Zugriff auf MD Systeme zu haben
    runs-on: [self-hosted, vm]
    env:
      ACTIONS_REPOSITORY: freenet-group/mcbscore-github-actions
      ACTIONS_PATH: mcbscore/github

    steps:
      # Owner für alle Dateien des $GITHUB_WORKSPACE auf den Runner User setzen
      - name: Change Owner to Runner User
        if: ${{ always() }}
        run: |
          githubUser='${{ github.actor }}'
          githubToken='${{ secrets.GH_R_PACKAGES }}'
          docker login ghcr.io -u "$githubUser" -p "$githubToken"
          docker run --rm -v "$(pwd):/target" -w /target -t ghcr.io/freenet-group/container-base-images/ubuntu_2004_lts:latest sh -c "chown $(id -u):$(id -g) -R /target"

      # Leeren Workspace sicherstellen
      - name: Ensure clean workspace
        run: |
          echo "Cleaning up previous run"
          rm -rf -- *

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read AWS Secrets
        uses: ./.github/actions/read-aws-secrets
        with:
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          awsParameterPairs: |
            /github/secrets/mcbs_token = TOKEN,
            /github/secrets/mcbs_user = USER, 
            /github/secrets/mcbstest_credentials = MCBSTEST_CREDENTIALS,
            /github/common/jira/api_url = JIRA_API_URL,
            /github/secrets/mcbstest_jiracloud_credentials = MCBSTEST_JIRACLOUD_CREDENTIALS,
            /github/common/jira/jira_cloud_url = JIRA_CLOUD_URL 

      # Die internen Actions auschecken
      - name: checkout mcbscore-github-actions
        uses: actions/checkout@v4
        with:
          repository: ${{ env.ACTIONS_REPOSITORY }}
          token: ${{ env.TOKEN }}
          path: ${{ env.ACTIONS_PATH }}
          ref: ${{ github.event.inputs.actionsRepositoryBranch }}

      # ##################################################################################
      # Initialize Workflow
      # ##################################################################################

      - name: Initialize Workflow
        uses: ./mcbscore/github/actions/init-workflow
        with:
          installJava: true
          installGithubCli: true
          installJq: true
          installNodeJs: true

      - run: npm install

      # ##################################################################################
      # Version ermitteln
      # ##################################################################################

      - id: determine-build-type-and-branch-name
        name: Determine Build Type And Branch Name
        uses: ./mcbscore/github/actions/build-type-and-branch-name

      - id: determine-component-version
        name: Determine Component Version
        uses: ./mcbscore/github/actions/determine-component-version-jc
        with:
          component: ${{ env.JIRA_COMPONENT }}
          included_components: ${{ env.INCLUDED_COMPONENTS }}

      - name: Write component version to bower.json
        shell: bash
        run: |
          bowerJson=$(jq --arg v "$COMPONENT_VERSION" '.version = $v' < bower.json)
          tee bower.json <<< "$bowerJson"

      - if: env.BUILD_TYPE != 'RELEASE'
        run: node_modules/gulp/bin/gulp.js build

      - if: env.BUILD_TYPE == 'RELEASE'
        run: node_modules/gulp/bin/gulp.js build-for-server-url --backendUrl=${{ env.METIS_TARGET }}

      - run: tar cfzv metis-ui-${{ env.COMPONENT_VERSION }}.tar.gz -C ./dist .

      # Existierende Draft Releases löschen
      - name: Delete draft releases
        if: env.BUILD_TYPE == 'DEVELOP'
        uses: ./mcbscore/github/actions/delete-draft-release
        env:
          GITHUB_TOKEN: ${{ env.TOKEN }}

      # Release erstellen
      - name: Create Release
        id: create-release
        if: env.BUILD_TYPE == 'RELEASE' || env.BUILD_TYPE == 'DEVELOP'
        uses: ./mcbscore/github/actions/create-release
        with:
          tagName: ${{ env.TAG_PREFIX }}${{ env.COMPONENT_VERSION }}
          releaseName: ${{ env.RELEASE_PREFIX }}${{ env.COMPONENT_VERSION }}
          draft: ${{ env.DRAFT }}

      # Release ZIP hinzufügen
      - name: Upload Release ZIP
        if: env.BUILD_TYPE == 'RELEASE' || env.BUILD_TYPE == 'DEVELOP'
        uses: ./mcbscore/github/actions/upload-release-asset
        with:
          uploadUrl: ${{ steps.create-release.outputs.upload_url }}
          assetName: metis-ui-${{ env.COMPONENT_VERSION }}.tar.gz
          assetContentType: application/gzip

      # Docker Image erzeugen
      - name: Docker Image erzeugen
        if: env.BUILD_TYPE == 'RELEASE' || env.BUILD_TYPE == 'DEVELOP'
        uses: ./mcbscore/github/actions/create-microservice-docker-image
        with:
          componentName: ${{ env.COMPONENT }}
          componentVersion: ${{ env.COMPONENT_VERSION }}

      # Starte Deployment auf K8S
      - name: Invoke kubernetes workflow
        if: env.BUILD_TYPE == 'DEVELOP' && hashFiles('.github/**/deployment_k8s.yml') != ''
        uses: benc-uk/workflow-dispatch@v1.2.3
        with:
          workflow: K8s Deployment
          token: ${{ env.TOKEN }}
          inputs: >
            { 
              "componentVersion": "${{ env.COMPONENT_VERSION }}",
              "environment": "dev"
            }

      - name: Commit bower.json
        shell: bash
        run: |
          if git diff --name-only --ignore-space-change -- bower.json | grep -q .; then
            git add bower.json
            git commit -m "Version: $COMPONENT_VERSION"
            git push
          fi
