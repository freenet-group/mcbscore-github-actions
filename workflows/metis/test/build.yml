name: Build

on:
  workflow_dispatch:
    inputs:
      serviceToTest:
        description: 'Auswahl des zu testenden METIS - Service.'
        required: true
        default: all
        type: choice
        options:
        - backend
        - frontend
        - all
      updateTestRail:
        description: 'E2E Testergebnisse nach TestRail exportieren'
        required: true
        default: false
        type: boolean
      actionsRepositoryBranch:
        description: Zu benutzender Branch des Repositories mcbscore-github-actions
        required: false
        default: main
      componentVersion:
        description: Die Version der Komponente
        required: true

jobs:
  build:
    # self-hosted Runner für die Steps benutzen, um Zugriff auf MD Systeme zu haben
    runs-on: [self-hosted,k8s]
    env:
      ACTIONS_REPOSITORY: freenet-group/mcbscore-github-actions
      ACTIONS_PATH: mcbscore/github
      METIS_REPOSITORY: freenet-group/metis
      METIS_REPOSITORY_PATH: metis
      RELEASE_ASSETS_PATH: release
      COMPONENT_VERSION: ${{ inputs.componentVersion }}
      
    steps:
      # Owner für alle Dateien des $GITHUB_WORKSPACE auf den Runner User setzen
      - name: Change Owner to Runner User
        if: ${{ always() }}
        run: |
          githubUser='${{ github.actor }}'
          githubToken='${{ secrets.GH_R_PACKAGES }}'
          docker login ghcr.io -u "$githubUser" -p "$githubToken"
          docker run --rm -v "$(pwd):/target" -w /target -t ghcr.io/freenet-group/container-base-images/ubuntu_2004_lts:latest sh -c "chown $(id -u):$(id -g) -R /target"

      # Leeren Workspace sicherstellen
      - name: Ensure clean workspace
        run: |
          echo "Cleaning up previous run"
          rm -rf -- *

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Read AWS Secrets
        uses: ./.github/actions/read-aws-secrets
        with:
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          awsParameterPairs: |
            /github/secrets/mcbs_token = TOKEN

      # Die internen Actions auschecken
      - name: checkout mcbscore-github-actions
        uses: actions/checkout@v3
        with:
          repository: ${{ env.ACTIONS_REPOSITORY }}
          token: ${{ env.TOKEN }}
          path: ${{ env.ACTIONS_PATH }}
          ref: ${{ github.event.inputs.actionsRepositoryBranch }}

      - name: Checkout freenet-group/metis Repository
        uses: actions/checkout@v3
        with:
          token: ${{ env.TOKEN }}
          fetch-depth: 0
          repository: ${{ env.METIS_REPOSITORY }}
          path: ${{ env.METIS_REPOSITORY_PATH }}

      # ##################################################################################
      # Initialize Workflow
      # ##################################################################################

      - name: Initialize Workflow
        uses: ./mcbscore/github/actions/init-workflow
        with:
          installNodeJs: true
          installJava: true
          installJq: true
          

      - name: Download release
        uses: ./mcbscore/github/actions/download-release-assets
        with:
          version: ${{ env.TAG_PREFIX }}${{ env.COMPONENT_VERSION }}
          assetPattern: metis-shell-${{ env.COMPONENT_VERSION }}.jar
          targetPath: ./${{ env.RELEASE_ASSETS_PATH }}
          token: ${{ env.TOKEN }}
          repository: ${{ env.METIS_REPOSITORY }}

      # Testumgebung konfigurieren
      - name: Configure environment
        shell: bash
        run: |
          sed -i 's%{restServerUrl}%https:\/\/metis-dev.md-abr-np.k8s.freenet-group.de\/metis-rest%' ./test/config/testConfig.js
          sed -i 's%{frontendUrl}%https:\/\/metis-ui-dev.md-abr-np.k8s.freenet-group.de%' ./test/config/testConfig.js
          cat ./test/config/testConfig.js
          
          # Datei ausfuehrbar machen
          chmod +x ./${ACTIONS_PATH}/workflows/metis/common/database-init.sh
         
          npm install
      
      # Backend Service Testen
      - name: Start Backend Test
        shell: bash
        if: ${{ github.event.inputs.serviceToTest == 'backend' || github.event.inputs.serviceToTest == 'all' }}
        env:
          LOAD_TEST_DATA: true
          REPOSITORY_PATH: ${{ env.METIS_REPOSITORY_PATH }}
          RELEASE_PATH: ${{ env.RELEASE_ASSETS_PATH }}
          SPRING_PROFILE: dev
        run: |
          ./${ACTIONS_PATH}/workflows/metis/common/database-init.sh

          node_modules/gulp/bin/gulp.js testRest

      # Frontend Test starten und Ergebnisse ins XML und HTML- Format konvertieren
      - name: Frontend Test vorbereiten
        if: ${{ github.event.inputs.serviceToTest == 'frontend' || github.event.inputs.serviceToTest == 'all' }}
        shell: bash
        env:
          LOAD_TEST_DATA: true
          REPOSITORY_PATH: ${{ env.METIS_REPOSITORY_PATH }}
          RELEASE_PATH: ${{ env.RELEASE_ASSETS_PATH }}
          SPRING_PROFILE: dev
        run: |
          ./${ACTIONS_PATH}/metis/common/database-init.sh
          
          sed -i 's%{TRUsed}%${{ inputs.updateTestRail }}%' ./test/testrail-conf.js
          sed -i 's%{TRProject}%MEA%' ./test/testrail-conf.js
          sed -i 's%{TRSuiteName}%METIS-GUI v3.6%' ./test/testrail-conf.js
          sed -i 's%{TRPlanName}%METIS_GUI_3.6.6%' ./test/testrail-conf.js
          sed -i 's%{TRRunName}%METIS-GUI v3.6.6%' ./test/testrail-conf.js
          sed -i 's%{TRUrl}%https:\/\/testrail.mobilcom.de%' ./test/testrail-conf.js
          sed -i 's%{TRNote}%https:\/\/testrail.mobilcom.de%' ./test/testrail-conf.js
          cat ./test/testrail-conf.js
          
          # Fehlende Software installieren
          sudo apt-get update && sudo apt-get install --no-install-recommends -y libnss3 libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb
 
      - name: Chrome installieren
        if: ${{ github.event.inputs.serviceToTest == 'frontend' || github.event.inputs.serviceToTest == 'all' }}
        uses: browser-actions/setup-chrome@latest
      
      - name: Start Frontend Test
        if: ${{ github.event.inputs.serviceToTest == 'frontend' || github.event.inputs.serviceToTest == 'all' }}
        shell: bash
        run: |
          node_modules/gulp/bin/gulp.js testFrontend --browserPath=$(which chrome)
         
      # Testergebnisse ins XML und HTML- Format konvertieren
      - name: Publish Unit Test Results
        if: ${{ always() }}
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          junit_files: '**/reports/*.xml'
