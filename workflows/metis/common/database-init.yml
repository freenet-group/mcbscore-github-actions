name: "Test-Datenbank löschen und initialisieren"

on:
  workflow_call:
    inputs:
      componentVersion:
        description: Die Version der metis-shell Komponente
        required: true
      environment:
        description: Die Zielumgebung
        required: true
        type: choice
        options:
          - "dev"
          - "testauto"
      loadTestData:
        description: nach dem Zurücksetzen der Datenbank Testdaten einspielen
        type: boolean
        required: false
        default: false
      metisRepositoryBranch:
        description: Zu benutzender Branch des Repositories freenet-group/metis
        type: string
        required: false
        default: main

jobs:
  init-database:
    env:
      METIS_REPOSITORY: freenet-group/metis
      REPOSITORY_PATH: repository
      RELEASE_ASSETS_PATH: release
      SPRING_PROFILE: ${{ inputs.environment }}
    steps:
      # Inputs zu handlichen Variablen umwandeln
      - name: Setup variables
        env:
          GH_INPUT_ENV: ${{ inputs.environment }}
        shell: bash
        run: |
          prof=${GH_INPUT_ENV%%(*}    # ab erster Klammer abschneiden
          prof=${prof//[[:space:]]/}  # trimmen
          printf '%s=%s\n' SPRING_PROFILE "$prof" | tee -a -- "$GITHUB_ENV"

      - name: Checkout freenet-group/metis Repository
        uses: actions/checkout@v3
        with:
          token: ${{ env.TOKEN }}
          fetch-depth: 0
          repository: ${{ env.METIS_REPOSITORY }}
          ref: ${{ inputs.metisRepositoryBranch }}
          path: ${{ env.REPOSITORY_PATH }}

      # Make download executable
      - run: chmod +x ${{ env.ACTIONS_PATH }}/actions/download-release-assets/download.sh
        shell: bash

      - name: download_asset
        shell: bash
        run: ${{ env.ACTIONS_PATH }}/actions/download-release-assets/download.sh
        env:
          REPOSITORY: ${{ env.METIS_REPOSITORY }}
          VERSION: ${{ env.TAG_PREFIX }}${{ inputs.componentVersion }}
          PATTERN: metis-shell-${{ inputs.componentVersion }}.jar
          TOKEN: ${{ env.TOKEN }}
          TARGET_PATH: ${{ env.RELEASE_ASSETS_PATH }}

      - name: Start metis-shell
        shell: bash
        env:
          GH_INPUT_COMPONENT_VERSION: ${{ inputs.componentVersion }}
          GH_INPUT_LOAD_TEST_DATA: ${{ inputs.loadTestData }}
        run: |
          commands=( resetTestData stacktrace )
          if "${GH_INPUT_LOAD_TEST_DATA:=true}"; then
            commands=(
              "${commands[@]}"
              "loadTestData --inputFileName '${REPOSITORY_PATH}/metis-rest/src/main/resources/testDataSetFULL.xml'"
              stacktrace
            )
          fi

          printf 'Spring-shell commands:\n'; printf '\t%s\n' "${commands[@]}"
          printf '%s\n' "${commands[@]}" \
          | (set -x; java -Xmx2g -Dfile.encoding=UTF-8 "-Dspring.profiles.active=$SPRING_PROFILE" \
            -jar "release/metis-shell-${GH_INPUT_COMPONENT_VERSION}.jar") \
          | tee metis-shell.out

          # Status prüfen (Exceptions führen leider nicht zu Spring Shell Exit Status != 0):
          checkMessage() {
            if ! grep -q "$@" -- metis-shell.out; then echo "Erwartete Meldung (grep $@) nicht gefunden" >&2; return 1; fi
          }
          checkMessage -P '\bresetTestData succeeded\b'
          if "$GH_INPUT_LOAD_TEST_DATA"; then checkMessage -P '\bloadTestData succeeded\b'; fi
