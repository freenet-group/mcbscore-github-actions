name: Build

on:
  push:
    branches-ignore:
      - release
  pull_request:
    branches-ignore:
      - release
      - develop
  workflow_dispatch:
    inputs:
      gradleOptions:
        description: Zusätzliche optionale Gradle Parameter
        required: false
      epic:
        description: EPIC als eventuelle Releaseklammer (META-170 = keine / unbestimmt)
        required: false
        default: META-170
      deploymentRepositoryBranch:
        description: Branch von Repository ms-deployment, der benutzt werden soll
        required: false
        default: main
      actionsRepositoryBranch:
        description: Zu benutzender Branch des Repositories mcbscore-github-actions
        required: false
        default: main

jobs:
  build:
    # self-hosted Runner für die Steps benutzen, um Zugriff auf MD Systeme zu haben
    runs-on: [self-hosted, vm]
    env:
      ACTIONS_REPOSITORY: freenet-group/mcbscore-github-actions
      ACTIONS_PATH: mcbscore/github

    steps:
      # Owner für alle Dateien des $GITHUB_WORKSPACE auf den Runner User setzen
      - name: Change Owner to Runner User
        if: ${{ always() }}
        run: |
          githubUser='${{ github.actor }}'
          githubToken='${{ secrets.GH_R_PACKAGES }}'
          docker login ghcr.io -u "$githubUser" -p "$githubToken"
          docker run --rm -v "$(pwd):/target" -w /target -t ghcr.io/freenet-group/container-base-images/ubuntu_2004_lts:latest sh -c "chown $(id -u):$(id -g) -R /target"

      # Leeren Workspace sicherstellen
      - name: Ensure clean workspace
        run: |
          echo "Cleaning up previous run"
          rm -rf -- *

      - name: Checkout Repository
        id: checkout-repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read AWS Secrets
        uses: ./.github/actions/read-aws-secrets
        with:
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          awsParameterPairs: |
            /github/secrets/mcbs_token = TOKEN,
            /github/secrets/mcbs_user = USER,
            /github/secrets/mcbstest_credentials = MCBSTEST_CREDENTIALS,
            /github/secrets/mcbstest_username = LIQUIBASE_USERNAME,
            /github/secrets/mcbstest_password = LIQUIBASE_PASSWORD,
            /github/common/jira/api_url = JIRA_API_URL,
            /github/secrets/mcbstest_jiracloud_credentials = MCBSTEST_JIRACLOUD_CREDENTIALS,
            /github/common/jira/jira_cloud_url = JIRA_CLOUD_URL 

      # Die internen Actions auschecken
      - name: checkout mcbscore-github-actions
        uses: actions/checkout@v4
        with:
          repository: ${{ env.ACTIONS_REPOSITORY }}
          token: ${{ env.TOKEN }}
          path: ${{ env.ACTIONS_PATH }}
          ref: ${{ github.event.inputs.actionsRepositoryBranch }}

      # ##################################################################################
      # Initialize Workflow
      # ##################################################################################

      - name: Initialize Workflow
        uses: ./mcbscore/github/actions/init-workflow
        with:
          installJava: true
          installGithubCli: true
          installJq: true

      # ##################################################################################
      # Version ermitteln
      # ##################################################################################

      - id: determine-build-type-and-branch-name
        name: Determine Build Type And Branch Name
        uses: ./mcbscore/github/actions/build-type-and-branch-name

      - id: determine-component-version
        name: Determine Component Version
        uses: ./mcbscore/github/actions/determine-component-version-jc
        with:
          component: ${{ env.JIRA_COMPONENT }}
          included_components: ${{ env.INCLUDED_COMPONENTS }}

      # ##################################################################################
      # Release bauen
      # ##################################################################################

      - name: Set release version in db changes
        if: env.BUILD_TYPE == 'RELEASE' && hashFiles('.github/**/dbChanges.yml') != ''
        shell: bash
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

          find '${{ env.DB_CHANGES_BASE_DIRECTORY }}${{ env.DB_CHANGES_DIRECTORY }}' -type f -exec sed -i 's/{releaseVersion}/${{ env.COMPONENT_VERSION }}/g' {} +

          changesDetected=`git status --porcelain`

          if [ -n "$changesDetected" ]
          then
            echo "Committing changes"
            git commit -am "ReleaseVersion in DB Changes eingetragen"
            git push
          fi

          git tag -f -a sql-${{ env.TAG_PREFIX }}${{ env.COMPONENT_VERSION }} -m "tagging sql-${{ env.TAG_PREFIX }}${{ env.COMPONENT_VERSION }}"
          git push --tags -f

      - name: Scripte prüfen
        if: ${{ (env.BUILD_TYPE == 'RELEASE' || env.BUILD_TYPE == 'DEVELOP') }}
        run: sh ./gradlew -PLI_username=${{ env.LIQUIBASE_USERNAME }} -PLI_password='${{ env.LIQUIBASE_PASSWORD }}' -PLI_contexts=production -PARTIFACT_VERSION=${{ env.COMPONENT_VERSION }} -PGITHUB_USER=${{ env.USER }} -PGITHUB_TOKEN='${{ env.TOKEN }}' createDatabaseChangeScripts ${{ github.event.inputs.gradleOptions }}

      - id: gradle-build
        name: Gradle Build
        uses: ./mcbscore/github/actions/gradle-build
        with:
          artifactoryUserName: ${{ secrets.MD_ARTIFACTORY_USER }}
          artifactoryPassword: ${{ secrets.MD_ARTIFACTORY_PW }}
          sonarqubeToken: ${{ secrets.SONARQUBE_TOKEN }}
          sonarqubeUrl: ${{ secrets.SONARQUBE_HOST_URL }}
          # TODO smokeTest wieder an, wenn Testdatenbank an neue BusinessTransactions angepasst
          # gradleCommand: clean build smokeTest
          gradleOptions: ${{ github.event.inputs.gradleOptions }}
          enableSonarCheckOnAllBranches: true

      # JUnit Ergebnisse publizieren
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          junit_files: '**/test-results/**/*.xml'

      # Existierende Draft Releases löschen
      - name: Delete draft releases
        if: env.BUILD_TYPE == 'DEVELOP'
        uses: ./mcbscore/github/actions/delete-draft-release
        env:
          GITHUB_TOKEN: ${{ env.TOKEN }}

      # Release Upload pirun
      - name: Read build.properties (pirun)
        shell: bash
        run: cat metis-pirun/.github/build.properties >> $GITHUB_ENV

      - id: determine-commit-to-tag
        name: Ermittelt den Commit, an dem das Tag gesetzt werden soll
        if: env.BUILD_TYPE == 'RELEASE' || env.BUILD_TYPE == 'DEVELOP'
        shell: bash
        run: |
          commit_sha=$(git rev-parse HEAD)
          echo "commit_sha=$commit_sha" >> "$GITHUB_OUTPUT"

      - name: Upload Release JAR (pirun)
        if: ${{ (env.BUILD_TYPE == 'RELEASE' || env.BUILD_TYPE == 'DEVELOP') && env.APPLICATION_JAR_NAME != '' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_PREFIX }}${{ env.COMPONENT_VERSION }}
          target_commitish: ${{ steps.determine-commit-to-tag.outputs.commit_sha }}
          files: ${{ env.APPLICATION_JAR_PATH }}${{ env.APPLICATION_JAR_NAME }}-${{ env.COMPONENT_VERSION }}.jar
          token: ${{ env.TOKEN }}
          name: ${{ env.COMPONENT_VERSION }}
          draft: ${{ env.DRAFT }}

      # Release Upload masterdata
      - name: Read build.properties (masterdata)
        shell: bash
        run: cat metis-masterdata/.github/build.properties >> $GITHUB_ENV

      - name: Upload Release JAR (masterdata)
        if: ${{ (env.BUILD_TYPE == 'RELEASE' || env.BUILD_TYPE == 'DEVELOP') && env.APPLICATION_JAR_NAME != '' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_PREFIX }}${{ env.COMPONENT_VERSION }}
          target_commitish: ${{ steps.determine-commit-to-tag.outputs.commit_sha }}
          files: ${{ env.APPLICATION_JAR_PATH }}${{ env.APPLICATION_JAR_NAME }}-${{ env.COMPONENT_VERSION }}.jar
          token: ${{ env.TOKEN }}
          name: ${{ env.COMPONENT_VERSION }}
          draft: ${{ env.DRAFT }}

      # Release Upload hofactoring
      - name: Read build.properties (hofactoring)
        shell: bash
        run: cat metis-hofactoring/.github/build.properties >> $GITHUB_ENV

      - name: Upload Release JAR (hofactoring)
        if: ${{ (env.BUILD_TYPE == 'RELEASE' || env.BUILD_TYPE == 'DEVELOP') && env.APPLICATION_JAR_NAME != '' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_PREFIX }}${{ env.COMPONENT_VERSION }}
          target_commitish: ${{ steps.determine-commit-to-tag.outputs.commit_sha }}
          files: ${{ env.APPLICATION_JAR_PATH }}${{ env.APPLICATION_JAR_NAME }}-${{ env.COMPONENT_VERSION }}.jar
          token: ${{ env.TOKEN }}
          name: ${{ env.COMPONENT_VERSION }}
          draft: ${{ env.DRAFT }}

      # Release Upload shell
      - name: Read build.properties (shell)
        shell: bash
        run: cat metis-shell/.github/build.properties >> $GITHUB_ENV

      - name: Upload Release JAR (shell)
        if: ${{ (env.BUILD_TYPE == 'RELEASE' || env.BUILD_TYPE == 'DEVELOP') && env.APPLICATION_JAR_NAME != '' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_PREFIX }}${{ env.COMPONENT_VERSION }}
          target_commitish: ${{ steps.determine-commit-to-tag.outputs.commit_sha }}
          files: ${{ env.APPLICATION_JAR_PATH }}${{ env.APPLICATION_JAR_NAME }}-${{ env.COMPONENT_VERSION }}.jar
          token: ${{ env.TOKEN }}
          name: ${{ env.COMPONENT_VERSION }}
          draft: ${{ env.DRAFT }}

      # Release Upload rest
      - name: Read build.properties (rest)
        shell: bash
        run: cat metis-rest/.github/build.properties >> $GITHUB_ENV

      - name: Upload Release JAR (rest)
        if: ${{ (env.BUILD_TYPE == 'RELEASE' || env.BUILD_TYPE == 'DEVELOP') && env.APPLICATION_JAR_NAME != '' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_PREFIX }}${{ env.COMPONENT_VERSION }}
          target_commitish: ${{ steps.determine-commit-to-tag.outputs.commit_sha }}
          files: ${{ env.APPLICATION_JAR_PATH }}${{ env.APPLICATION_JAR_NAME }}-${{ env.COMPONENT_VERSION }}.jar
          token: ${{ env.TOKEN }}
          name: ${{ env.COMPONENT_VERSION }}
          draft: ${{ env.DRAFT }}

      # ##################################################################################
      # Re-Merge
      # ##################################################################################
      - name: Merge development -> staging
        if: env.BUILD_TYPE == 'RELEASE'
        uses: devmasx/merge-branch@master
        with:
          type: now
          from_branch: release
          target_branch: develop
          github_token: ${{ env.TOKEN }}

      # Docker Image erzeugen
      - name: Docker Image erzeugen
        if: env.BUILD_TYPE == 'RELEASE' || env.BUILD_TYPE == 'DEVELOP'
        uses: ./mcbscore/github/actions/create-microservice-docker-image
        with:
          componentName: ms-${{ env.COMPONENT }}
          componentVersion: ${{ env.COMPONENT_VERSION }}
          jar: ${{ env.APPLICATION_JAR_PATH }}${{ env.APPLICATION_JAR_NAME }}-${{ env.COMPONENT_VERSION }}.jar
          javaVersion: ${{ env.JAVA_VERSION }}

      # Starte Deployment auf K8s
      - name: Invoke kubernetes workflow
        if: env.BUILD_TYPE == 'DEVELOP'
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: deployment_k8s_only.yml
          token: ${{ env.TOKEN }}
          inputs: >
            {
              "component": "${{ env.COMPONENT }}",
              "componentVersion": "${{ env.COMPONENT_VERSION }}",
              "environment": "dev",
              "actionsRepositoryBranch": "${{ inputs.actionsRepositoryBranch }}",
              "deploymentRepositoryBranch": "${{ inputs.deploymentRepositoryBranch }}",
              "dryRun": "false"
            }

      # Starte DB changes Workflow
      - name: Invoke db changes workflow
        if: env.BUILD_TYPE == 'RELEASE' && hashFiles('.github/**/dbChanges.yml') != ''
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: DB Changes
          token: ${{ env.TOKEN }}
          inputs: >
            {
              "component": "${{ env.COMPONENT }}",
              "componentVersion": "${{ env.COMPONENT_VERSION }}",
              "tagPrefix": "${{ env.TAG_PREFIX }}"
            }
      
      # Starte postBuild auf RELEASE
      - name: Invoke postBuild workflow
        if: env.BUILD_TYPE == 'RELEASE' && hashFiles('.github/**/postBuild.yml') != ''
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: PostBuild
          token: ${{ env.TOKEN }}
          inputs: >
            {
              "releaseVersion": "${{ env.COMPONENT_VERSION }}",
              "issueList": "${{ env.ISSUE_LIST }}",
              "epic": "${{ github.event.inputs.epic }}",
              "actionsRepositoryBranch": "${{ github.event.inputs.actionsRepositoryBranch }}"
            }

      # metis-test auschecken
      - name: checkout metis-test
        if: env.BUILD_TYPE == 'RELEASE'
        uses: actions/checkout@v4
        with:
          repository: freenet-group/metis-test
          token: ${{ env.TOKEN }}
          path: metis-test-repo

      # Tag am metis-test Repo setzen
      - name: tag metis-test repository
        if: env.BUILD_TYPE == 'RELEASE'
        shell: bash
        run: |
          cd metis-test-repo
          tag='metis_${{ env.COMPONENT_VERSION }}'
          git tag -f -a "$tag" -m "$tag"
          git push origin "$tag"
