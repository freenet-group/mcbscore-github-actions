name: DeveloperPortal Upload
run-name: DeveloperPortal Upload von  ${{ github.event.inputs.component }}:${{ github.event.inputs.componentVersion }} f체r ${{ github.event.inputs.environment }}

on:
  workflow_dispatch:
    inputs:
      component:
        description: Der Name der Komponente
        required: true
      componentVersion:
        description: Die Version der Komponente
        required: true
      tagPrefix:
        description: Der Pr채fix des Tags
        required: false
      environment:
        description: Die Zielumgebung
        required: true
      actionsRepositoryBranch:
        description: Zu benutzender Branch des Repositories mcbscore-github-actions
        required: false
        default: main
      deploymentRepositoryBranch:
        description: Welcher Branch von Repository ms-deployment benutzt werden soll
        required: false
        default: main

jobs:
  developerPortalUpload:
    # self-hosted Runner f체r die Steps benutzen, um Zugriff auf MD Systeme zu haben
    runs-on: [self-hosted, k8s]
    env:
      ACTIONS_REPOSITORY: freenet-group/mcbscore-github-actions
      ACTIONS_PATH: mcbscore/github
      DEPLOYMENT_PATH: mcbscore/deployment
      NODEJS_VERSION: 12

    steps:
      # Owner f체r alle Dateien des $GITHUB_WORKSPACE auf den Runner User setzen
      - name: Change Owner to Runner User
        if: ${{ always() }}
        run: |
          docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GH_R_PACKAGES }}
          docker run --rm -v `pwd`:/target -w /target -t ghcr.io/freenet-group/container-base-images/ubuntu_2004_lts:latest sh -c "chown $(id -u):$(id -g) -R /target"

      # Leeren Workspace sicherstellen
      - name: Ensure clean workspace
        run: |
          echo "Cleaning up previous run"
          rm -rf *

      # Repository auschecken unter $GITHUB_WORKSPACE
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Read AWS Secrets
        uses: ./.github/actions/read-aws-secrets
        with:
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          awsParameterPairs: |
            /github/secrets/mcbs_token = TOKEN, 
            /github/secrets/mcbs_app.client_id_sts = CLIENT_ID_STS,
            /github/secrets/mcbs_app.client_secret_sts = CLIENT_SECRET_STS,
            /github/secrets/authorization_uri = AUTHORIZATION_URI

      # Auschecken des Deployment Repositories
      - name: Checkout Deployment Data / Scripts
        uses: actions/checkout@v3
        with:
          repository: freenet-group/ms-deployment
          token: ${{ env.TOKEN }}
          path: ${{ env.DEPLOYMENT_PATH }}
          ref: ${{ github.event.inputs.deploymentRepositoryBranch }}

      # Die internen Actions auschecken
      - name: checkout mcbscore-github-actions
        uses: actions/checkout@v3
        with:
          repository: ${{ env.ACTIONS_REPOSITORY }}
          token: ${{ env.TOKEN }}
          path: ${{ env.ACTIONS_PATH }}
          ref: ${{ github.event.inputs.actionsRepositoryBranch }}

      # ##################################################################################
      # Initialize Workflow
      # ##################################################################################
      - name: Initialize Workflow
        uses: ./mcbscore/github/actions/init-workflow
        with:
          installJavaWithNashornEngine: true
          installJq: true
          installNodeJs: true

      # Open API Yaml Dateien aus Release extrahieren
      - name: Download API documentation
        uses: ./mcbscore/github/actions/download-release-assets
        with:
          version: ${{ github.event.inputs.tagPrefix }}${{ github.event.inputs.componentVersion }}
          assetPattern: '.yaml'
          targetPath: './apiDoc'
          token: ${{ env.TOKEN }}

      # Developer Portal Upload
      - name: Developer Portal Upload
        uses: ./mcbscore/github/actions/developer-portal-upload
        with:
          component: ${{ github.event.inputs.component }}
          componentVersion: ${{ github.event.inputs.componentVersion }}
          stage: ${{ github.event.inputs.environment }}
          tagPrefix: ${{ github.event.inputs.tagPrefix }}
          componentConfigPath: ${{ env.DEPLOYMENT_PATH }}
