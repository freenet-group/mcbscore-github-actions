name: Deployment

on:
  workflow_dispatch:
    inputs:
      stage:
        description: 'Die Ziel Stage'
        required: true
      aws_key_name:
        description: 'Der Name des AWS Key Secrets'
        required: true
      aws_secret_name:
        description: 'Der Name des AWS Secret Secrets'
        required: true
      componentVersion:
        description: 'Die Release Version. Wenn nicht angegeben, wird vom gewÃ¤hlten Branch deployed'
        required: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      TOKEN: ${{ secrets.GH_MCBS_TOKEN }}

    steps:
      # Repository auschecken unter $GITHUB_WORKSPACE
      - id: checkout-repository
        name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Die internen Actions auschecken
      - name: checkout mcbscore-github-actions
        uses: actions/checkout@v3
        with:
          repository: ${{ env.ACTIONS_REPOSITORY }}
          token: ${{ env.TOKEN }}
          path: ${{ env.ACTIONS_PATH }}
          ref: ${{ inputs.actionsRepositoryBranch }}

      - name: Set serverless.yml for release
        if: ${{ github.event.inputs.componentVersion != null }}
        shell: bash
        run: |
          echo "SERVERLESS_YML=/release/serverless.yaml" >> $GITHUB_ENV

      - name: Download Release
        uses: ./mcbscore/github/actions/download-release-assets
        with:
          version: ${{ inputs.componentVersion }}
          assetPattern: 'serverless-${{ github.event.inputs.componentVersion }}.tar.gz'
          targetPath: './release'
          token: ${{ env.TOKEN }}

      - name: Unzip release
        id: unzipRelease
        if: ${{ github.event.inputs.componentVersion != null }}
        shell: bash
        run: |
          cd release
          tar -xvzf serverless-${{ github.event.inputs.componentVersion }}.tar.gz

      - id: init-workflow
        name: Initialize Workflow
        uses: ./mcbscore/github/actions/init-workflow
        with:
          installNodeJs: true
          installJq: true

      - name: Install Serverless Framework
        run: npm install -g serverless

      - name: Serverless AWS authentication
        run: sls config credentials --provider aws --key ${{ secrets[github.event.inputs.aws_key_name] }} --secret ${{ secrets[github.event.inputs.aws_secret_name] }}

      - name: Install NPM dependencies
        run: npm install

      - name: Deploy Lambda functions from Release
        if: ${{ github.event.inputs.componentVersion != null }}
        run: |
          export COMPONENT_VERSION=${{ github.event.inputs.componentVersion }}
          sls deploy --config release/serverless.yaml --stage ${{ github.event.inputs.stage }}

      - name: Deploy Lambda functions from Branch
        if: ${{ github.event.inputs.componentVersion == null }}
        run: sls deploy --stage ${{ github.event.inputs.stage }}
