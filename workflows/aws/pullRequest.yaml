name: Pull Request

on:
  pull_request:
    types: [opened, reopened, edited, labeled, unlabeled, synchronize]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Pflichtprüfungen
  check:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Semantic PR-Title Check
        if: always()
        uses: amannn/action-semantic-pull-request@v5.4.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Configure which types are allowed.
          # Default: https://github.com/commitizen/conventional-commit-types
          types: |
            bump
            ci
            chore
            feat
            fix
            improvement
            refactor
            test
          requireScope: false

      - name: Prüft die GitHub PR Labels auf Vollständigkeit
        if: always()
        uses: mheap/github-action-required-labels@v5
        with:
          count: 1
          mode: 'exactly'
          add_comment: true
          labels: 'release:patch, release:minor, release:major'
          message: "Pull-Request wurde aufgrund fehlender Release-Labels abgelehnt. \n
            Es muss exakt eines dieser Labels gesetzt werden: \n
            - release:patch\n
            - release:minor\n
            - release:major"

      - name: UTF-8 encoding prüfen und invalide Dateien auflisten
        shell: bash
        run: |
          if find "$GITHUB_WORKSPACE" -type f -not '(' -iname '*.properties' -o -iname '*.xml' ')' -exec file --mime '{}' ';' \
              | grep --invert-match --perl-regexp '\bcharset=(binary|us-ascii|utf-8)$'; then
            echo "Non-UTF-8 Dateien gefunden"
            exit 1
          fi

  # Führt automatisierte Fixes und Tests aus
  test:
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: eu-central-1
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      # Setup
      - uses: actions/checkout@v4

      - name: workflow.config einlesen
        id: read-properties
        run: |
          tee -a "$GITHUB_OUTPUT" < .github/workflow.config

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.read-properties.outputs.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://npm.pkg.github.com/'

      - name: Dependencies installieren
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GH_R_PACKAGES }}

      - name: Build
        run: npm run build

      # Automatisch Fixes ausführen
      - name: Autofixes ausführen oder Fehler melden
        run: npm run lint:fix && npm run prettier:write

      - name: Änderungen aus dem Autofix committen
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'chore: run prettier:write and lint:fix'

      # Tests starten
      - name: Tests ausführen und Coverage generieren
        run: npm run test --stage=pr-${{ github.event.number }}

      # Coverage als Comment posten
      - name: Coverage Report als PR-Kommentar posten
        uses: lucassabreu/comment-coverage-clover@v0.13.0
        with:
          file: ${{ steps.read-properties.outputs.CLOVER_COVERAGE_FILE }}
          with-chart: false
