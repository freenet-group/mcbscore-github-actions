name: Release

on:
  pull_request:
    types: [ closed ]
  workflow_dispatch:
    inputs:
      gradleOptions:
        description: Zusätzliche optionale Gradle Parameter
        required: false
      branch:
        description: 'Von welchem Branch soll ein Release gebaut werden z.B. "feature/ABRMS-*" "oder bugfix/MCBS-*"?'
        required: false
      ticket:
        description: 'Welches Ticket (MCBS-1234 / ABRMS-1234) soll für das Release verwendet werden?'
        required: true
      version:
        description: 'Welche Version für das neue Release z.B. "8.32.1"?'
        required: false
      pre-release:
        default: false
        description: 'Ist dies ein Pre-Release?'
        required: false
        type: boolean

jobs:
  release:
    if: ${{ github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch' }}
    runs-on: [ self-hosted, k8s ]
    outputs:
      deleteList: ${{ steps.create-delete-list.outputs.deleteList }}    
    env:
      TZ: Europe/Berlin
      LANG: de_DE.UTF-8
    steps:
      - name: locale konfigurieren
        run: sudo locale-gen "$LANG" && sudo update-locale LANG="$LANG"

      - name: Repository auschecken
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: AWS Secrets auslesen und in ENV schreiben
        uses: ./.github/actions/read-aws-secrets
        with:
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          awsParameterPairs: |
            /github/secrets/mcbs_user = USER,
            /github/secrets/mcbs_token = TOKEN,
            /github/secrets/mcbstest_jiracloud_credentials = MCBSTEST_JIRACLOUD_CREDENTIALS,
            /github/common/jira/jira_cloud_url = JIRA_CLOUD_URL

      - name: Release Label einlesen
        id: release-label
        uses: actions-ecosystem/action-release-label@v1
        with:
          label_prefix: 'release:'

      - name: Letztes Release Tag holen
        id: get-latest-tag
        uses: actions-ecosystem/action-get-latest-tag@v1
        with:
          initial_version: 0.0.0
          semver_only: true

      - name: Semantic Version hochzählen
        id: bump-semver
        uses: actions-ecosystem/action-bump-semver@v1
        with:
          current_version: ${{ steps.get-latest-tag.outputs.tag  }}
          level: ${{ steps.release-label.outputs.level || 'patch' }}

      - name: Semantic Version überschreiben, wenn eine spezifische Version angegeben wurde
        id: version-calculation
        env:
          NEW_VERSION: ${{ steps.bump-semver.outputs.new_version }}
          INPUT_VERSION: ${{ github.event.inputs.version }}
        run: |
          # Setze die neue kalkulierte Version in die Outputs
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT

          # Überschreibe die neue kalkulierte Version, wenn eine spezifische Version angegeben wurde
          if [ -n "${INPUT_VERSION}" ]; then
            echo "new_version=${INPUT_VERSION}" >> $GITHUB_OUTPUT
          fi

      - name: Neuen Versions-Tag einchecken
        uses: actions-ecosystem/action-push-tag@v1
        with:
          tag: ${{ steps.version-calculation.outputs.new_version }}
          message: '${{ steps.version-calculation.outputs.new_version }}: PR #${{ github.event.pull_request.number }} ${{ github.event.pull_request.title }}'

      - name: Java Version aus gradle.properties auslesen
        id: java_version
        run: |
          JAVA_VERSION=$(grep 'JAVA_VERSION' gradle.properties | cut -d'=' -f2 | xargs)
          echo "JAVA_VERSION=$JAVA_VERSION"
          echo "JAVA_VERSION=$JAVA_VERSION" >> $GITHUB_ENV

      - name: Set up JDK
        id: setup-java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'zulu'

      - name: Gradle Build mit CyclonedxBom (SBOM)
        shell: bash
        run: |
          sh ./gradlew -PARTIFACT_VERSION=${{ steps.version-calculation.outputs.new_version }} -PGITHUB_USER=${{ env.USER }} -PGITHUB_TOKEN=${{ env.TOKEN }} clean build publish ${{ github.event.inputs.gradleOptions }}

      - name: Issue-List Alternative aus Diff zur neuen Version erzeugen
        id: jira_keys
        uses: varnerknut/jira-extract-issue-keys-from-tags@1.3
        with:
          token: ${{ env.TOKEN }}
          head-tag: ${{ steps.version-calculation.outputs.new_version }}

      - name: Setup jq
        uses: freenet-actions/setup-jq@v3

      - name: Release-Template einlesen und ausfüllen
        id: update_release_template
        env:
          ISSUE_KEYS: ${{ steps.jira_keys.outputs.issue-keys }}
          INPUT_TICKET: ${{ github.event.inputs.ticket }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          JIRA_CLOUD_URL: ${{ env.JIRA_CLOUD_URL }}
          COVERAGE_OUTPUT: ${{ steps.fetch-coverage.outputs.coverage }}
        shell: bash
        run: |
          template_file=".github/templates/release_template_javalib.md"
          issueList=""
          issueListLines=""
          linkIssuesListLines=""
          allComponentList=""
          dependencyList=""
          linkedIssuesListLines=""
          epicList=""
          
          # Setting default outputs
          echo "issue_list=" >> "$GITHUB_OUTPUT"
          echo "renovate=false" >> "$GITHUB_OUTPUT"
          echo "renovate_title=" >> "$GITHUB_OUTPUT"
          echo "epic_list=" >> "$GITHUB_OUTPUT"
          echo "epic_due_date=" >> "$GITHUB_OUTPUT"
          echo "dependencies=false" >> "$GITHUB_OUTPUT"

          # Alle Issues auslesen
          if [ -n "$ISSUE_KEYS" ]; then
            issueList="$ISSUE_KEYS"
          fi

          # Prüfen ob der Input "ticket" gesetzt wurde, wenn ja, dann hinzufügen
          if [ -n "$INPUT_TICKET" ]; then
            if [ -z "$issueList" ]; then
              issueList="$INPUT_TICKET"
            else
              issueList+=",$INPUT_TICKET"
            fi
          fi

          # Prüfen ob das label "renovate" im PR gesetzt wurde
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            prNumber=$(jq -r ".pull_request.number" "$GITHUB_EVENT_PATH")
            apiResponse=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${GITHUB_REPOSITORY}/issues/${prNumber}/labels")

            # Prüfen ob es sich um ein Array oder einen String handelt
            if jq -e 'type == "array"' <<<"$apiResponse" > /dev/null; then
              prLabels=$(jq -r ".[].name" <<<"$apiResponse")
            else
              prLabels=$(jq -r ".name" <<<"$apiResponse")
            fi

            # ABRMS-5265 ist ein Renovate-Platzhalterticket, wenn renovate im PR-Label enthalten ist, dann hinzufügen
            if echo "$prLabels" | grep -q "renovate"; then
              if [ -z "$issueList" ]; then
                issueList="ABRMS-5265"
              else
                issueList+=",ABRMS-5265"
              fi
            fi
          fi

          # Issue-Liste bereinigen
          issue_list=$(echo "$issueList" | tr ',' '\n' | sort -u | tr '\n' ',' | sed 's/,$//')
          
          # IssueList / Implemented Issues
          echo "issue_list=$issue_list" >> "$GITHUB_OUTPUT"
          echo "Folgende Issues werden analysiert: $issue_list"
          IFS=',' read -ra issues <<< "$issue_list"
          for issueNumber in "${issues[@]}"; do
            # Tabellen Eintrag erstellen
            echo "$issueNumber wird eingelesen"
          
            # Renovate Ticket überspringen, Rest aber prüfen
            if [ "$issueNumber" = "ABRMS-5265" ]; then
              title="${{ github.event.pull_request.title }}"
              issueListLines+="| ABRMS-5265 | $title | Renovate | Renovate |\n"
              echo "renovate=true" >> "$GITHUB_OUTPUT"
              echo "renovate_title=$title" >> "$GITHUB_OUTPUT"
              continue  # Rest überspringen
            fi
          
            # Jira Ticket einlesen
            echo "Jira API wird zu $issueNumber befragt"
            API_ENDPOINT="${JIRA_CLOUD_URL}issue/$issueNumber"
            BASIC_AUTH=$(printf %s "$MCBSTEST_JIRACLOUD_CREDENTIALS" | base64 -w0)
            AUTH_HEADER="Authorization: Basic $BASIC_AUTH"
            issue_info=$(curl -L -H "$AUTH_HEADER" -H "Accept: application/json" "$API_ENDPOINT")
          
            # Extracting the epic name and dueDate
            echo "Epic name for $issueNumber is being extracted"
            if epicKey=$(jq -r -e '.fields.parent.key' <<<"$issue_info"); then  
              if [ -z "$epicList" ]; then epicList="$epicKey"; else epicList="$epicList,$epicKey"; fi  
              echo "Extracted epicKey: $epicKey"  
              API_ENDPOINT="${{ env.JIRA_CLOUD_URL }}issue/$epic_name"
              epic_issue_info=$(curl -L -H "${AUTH_HEADER}" -H "Accept: application/json" "${API_ENDPOINT}")
              epic_dueDate=$(echo "$epic_issue_info" | jq -r '.fields.duedate')
              if [ -n "$epic_dueDate" ] && [ "$epic_dueDate" != "null" ]; then
                echo "epic_due_date=$epic_dueDate" >> "$GITHUB_OUTPUT"
              fi
            fi
          
            # Titel einlesen
            echo "Titel zu $issueNumber extrahieren"
            title=$(jq -r '.fields.summary' <<<"$issue_info")

            # Jira-Labels einlesen
            echo "Jira-Labels zu $issueNumber extrahieren"
            jiraLabels=$(jq -r '.fields.labels[]' <<<"$issue_info" | paste -sd ",")

            # Komponenten extrahieren
            echo "Komponenten zu $issueNumber extrahieren"
            componentList=$(jq -r '.fields.components[].name' <<<"$issue_info" | paste -sd ",")
            allComponentList+=$componentList
          
            # Dependencies extrahieren
            echo "Dependencies zu $issueNumber extrahieren"
            if custom_field_value=$(jq -r -e '.fields.customfield_10686' <<<"$issue_info"); then
              dependencyList+="\t * :warning: $issueNumber: $custom_field_value\n"
            else
              echo "No dependencies found for issue $issueNumber"
            fi

            # Ticket Tabelle ausfüllen
            echo "Tabelleneintrag zum Ticket $issueNumber wird erstellt"
            issueListLines+="| $issueNumber | $title | $jiraLabels | $componentList |\n"
          
            # Verknüpfte Tickets
            echo "Verknüpfte Tickets zu $issueNumber einlesen und Tabelle befüllen"
            jq -c '.fields.issuelinks[]' <<<"$issue_info" | while read -r linkedIssue; do
              # Prüfe auf ausgehende Links
              isOutward=$(jq 'has("outwardIssue")' <<<"$linkedIssue")
              if [ "$isOutward" = "true" ]; then
                linkedRelation=$(jq -r '.type.outward' <<<"$linkedIssue")
                linkedIssueNumber=$(jq -r '.outwardIssue.key' <<<"$linkedIssue")
                linkedSummary=$(jq -r '.outwardIssue.fields.summary' <<<"$linkedIssue")
                linkedStatus=$(jq -r '.outwardIssue.fields.status.name' <<<"$linkedIssue")
              else
                linkedRelation=$(jq -r '.type.inward' <<<"$linkedIssue")
                linkedIssueNumber=$(jq -r '.inwardIssue.key' <<<"$linkedIssue")
                linkedSummary=$(jq -r '.inwardIssue.fields.summary' <<<"$linkedIssue")
                linkedStatus=$(jq -r '.inwardIssue.fields.status.name' <<<"$linkedIssue")
              fi

              linkedIssuesListLines+="| $linkedIssueNumber | $linkedSummary | $linkedStatus | $linkedRelation |\n"
              echo "Verknüpftes Ticket erkannt: $linkedIssueNumber - $linkedSummary"
            done
          done
          
          # Platzhalter austauschen
          echo "Platzhalter im Template austauschen"
          
          ## Tabellen
          # Spezielle Sonderzeichen austauschen
          cleanedIssueListLines=$(printf '%s' "$issueListLines" | sed 's/[&/\#]/\\&/g')
          cleanedLinkedIssuesListLines=$(printf '%s' "$linkedIssuesListLines" | sed 's/[&/\#]/\\&/g')

          echo "IssueList setzen"
          echo "$cleanedIssueListLines"
          sed -i "/^$/N;/\n<!-- IMPLEMENTED_ISSUES_PLACEHOLDER -->/s#.*#$cleanedIssueListLines#" "$template_file"

          echo "Verlinkte Tickets setzen"
          echo "$cleanedLinkedIssuesListLines"
          sed -i "/^$/N;/\n<!-- IMPLEMENTED_LINKED_ISSUES_PLACEHOLDER -->/s#.*#$cleanedLinkedIssuesListLines#" "$template_file"

          ## EPIC
          echo "EPIC setzen"
          if [ -n "$epicList" ]; then
            echo "epic_list=$epicList" >> "$GITHUB_OUTPUT"
            sed -i "s/<!-- EPIC_PLACEHOLDER -->/$epicList/" "$template_file";
          else
            sed -i "s/<!-- EPIC_PLACEHOLDER -->/:white_check_mark: Keine Änderung/" "$template_file";
          fi
          
          ## Java
          echo "Java setzen"
          sed -i 's/<!-- JAVA_VERSION_PLACEHOLDER -->/${{ steps.setup-java.outputs.version }}/' "$template_file";
          
          ## Dependencies
          echo "Dependencies setzen"
          if [ -n "$dependencyList" ]; then
            echo "dependencies=true" >> "$GITHUB_OUTPUT"
            dependencyList="\n$dependencyList"
            sed -i "s/<!-- DEPENDENCIES_PLACEHOLDER -->/$dependencyList/" "$template_file";
          else 
            sed -i 's/<!-- DEPENDENCIES_PLACEHOLDER -->/:white_check_mark: Keine Dependencies/' "$template_file";
          fi
          
          ## JUnit
          echo "JUnit setzen"
          url="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/"
          escaped_url=$(sed 's/[\/&]/\\&/g' <<< "$url")
          sed -i "s/<!-- JUNIT_RESULT_PLACEHOLDER -->/$escaped_url/" "$template_file"
          
          ## Cucumber
          echo "Cucumber setzen"
          url="${{ github.SERVER_URL }}/${{ github.REPOSITORY }}/releases/"
          escaped_url=$(sed 's/[\/&]/\\&/g' <<< "$url")
          sed -i "s/<!-- CUCUMBER_RESULT_PLACEHOLDER -->/$escaped_url/" "$template_file"
          
          ## Coverage
          echo "Coverage setzen"
          sed -i "s/<!-- COVERAGE_PLACEHOLDER -->/$COVERAGE_OUTPUT/" "$template_file"

      - name: Release erstellen
        uses: softprops/action-gh-release@v2
        with:
          body_path: ".github/templates/release_template_javalib.md"
          files: |
            ${{ env.DEPENDENCYTRACK_BOM_PATH }}${{ env.DEPENDENCYTRACK_BOM_NAME }}
          generate_release_notes: true
          name: ${{ steps.version-calculation.outputs.new_version }}
          prerelease: ${{ github.event.inputs.pre-release }}
          tag_name: ${{ steps.version-calculation.outputs.new_version }}
          target_commitish: ${{ steps.checkout-repository.outputs.commit }}
          token: ${{ env.TOKEN }}

      - name: postBuild Workflow starten
        if: ${{ hashFiles('.github/**/postBuild.yml') != '' && (github.event.inputs['pre-release'] == 'false' || github.event.inputs['pre-release'] == false) }}
        uses: benc-uk/workflow-dispatch@v1.2.3
        with:
          workflow: PostBuild
          token: ${{ env.TOKEN }}
          inputs: >
            {
              "releaseVersion": "${{ steps.version-calculation.outputs.new_version }}",
              "issueList": "${{ steps.update_release_template.outputs.issue_list }}",
              "hasDependencies": "${{ steps.update_release_template.outputs.dependencies }}",
              "renovate": ${{ steps.update_release_template.outputs.renovate }}  
            }

      - name: Setup Github CLI
        if: failure() || cancelled()
        uses: freenet-actions/setup-github-cli@v3

      - name: Tag/Release löschen, wenn der Build fehlgeschlagen ist oder abgebrochen wurde
        if: failure() || cancelled()
        id: create-delete-list
        env:
          NEW_VERSION: ${{ steps.version-calculation.outputs.new_version }}
          GH_TOKEN: ${{ env.TOKEN }}
        shell: bash
        run: |
          # nur ausführen, wenn neue Version bekannt ist
          if [ -n "${{ steps.version-calculation.outputs.new_version }}" ]; then
            version="${{ steps.version-calculation.outputs.new_version }}"
            # Wenn bereits ein Release zur Version erstellt wurde, dann lösche dieses. Ansonsten wird nur der Tag gelöscht
            if gh release list --json tagName --jq ".[] | select(.tagName == \"$version\") | .tagName" | grep -q .; then
              gh release delete "$version" --cleanup-tag --yes
            else
              git tag -d "$version"
              git push origin ":$version"
            fi
            # Repo bestimmen
            repo=$(gh repo view --json name -q ".name")
            # Organisation bestimmen
            org=$(gh repo view --json owner -q ".owner.login")            
            # Liste der zugehörigen Packages bestimmen
            packageList=$(gh api --paginate "/orgs/$org/packages?package_type=maven" -q '.[] | select(.repository.name == "'$repo'") | .name')
            echo -e "Version $version muss aus den folgenden Packages entfernt werden:\n$packageList\n" 
            # Variable für Lösch-JSON
            deleteList="{\"include\":["
            # Version in Packages suchen
            for package in $packageList; do
              id=$(gh api "/orgs/$org/packages/maven/$package/versions" -q '.[] | select(.name == "'$version'") | .id')
              if [ -z "$id" ]; then
                echo "Keine Version '$version' des Packages '$package' gefunden!"
                continue
              fi
              echo "Trage Package '$package' mit der ID $id zum Löschen der Version '$version' in Liste ein."
              deleteList+="{\"package\": \"$package\", \"id\": \"$id\"},"
            done
            deleteList+="]}"
            deleteList=${deleteList/,]/]}
            if [[ "$deleteList" == *"[]"* ]]; then
              echo "Keine Version '$version' in den Packages gefunden!"              
            else
              echo -e "\nLöschliste:"
              echo "$deleteList" | jq
              # JSON in Ausgabe schreiben
              echo "deleteList=$deleteList" >> "$GITHUB_OUTPUT"
            fi
          fi

  # Löschmatrix für die Packages
  failureCleanup:
    runs-on: ubuntu-latest
    needs: release
    if:  ${{needs.release.outputs.deleteList}}
    strategy:
      matrix: ${{fromJson(needs.release.outputs.deleteList)}}
    steps:
        - name: Setup Github CLI
          uses: freenet-actions/setup-github-cli@v3

        - name: Lösche Versionen aus den Packages
          env:
            GH_TOKEN: ${{ env.TOKEN }}
          run: |
            package=${{ matrix.package }}
            id=${{ matrix.id }}
            echo "Lösche Package '$package' mit der ID $id"
            gh api -X DELETE "/orgs/$org/packages/maven/$package/versions/$id"