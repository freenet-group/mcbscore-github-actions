name: 'Deploy Proxy'
description: 'Action zum Deployment von Proxies'

inputs:
  proxyName:
    description: 'Der Name des Proxies'
    required: true
  company:
    description: 'Die Zielumgebung (md, fm, km)'
    required: true
  component:
    description: 'Der Name der Komponente'
    required: true
  componentVersion:
    description: 'Die Version der Komponente'
    required: true
  host:
    description: 'Der Zielhost'
    required: true
  deploymentUser:
    description: 'Der Benutzer für das Deployment'
    required: true
  sshKey:
    description: 'Der SSH Schlüssel'
    required: false
  externalProxy:
    description: 'Flag für externes Deployment'
    required: false
  regtestaltProxy:
    description: 'Flag für regtestalt Deployment'
    required: false
  regtestneuProxy:
    description: 'Flag für regtestneu Deployment'
    required: false
  b2baltProxy:
    description: 'Flag für b2balt Deployment'
    required: false
  b2bneuProxy:
    description: 'Flag für b2bneu Deployment'
    required: false
  ngbillingProxy:
    description: 'Flag für ngbilling Deployment'
    required: false
  additionalTarParams:
    description: 'Ermöglicht die Angabe zusätzlicher Parameter für den tar Befehl'
    required: false

runs:
  using: "composite"
  steps:

    # Proxy ROOT Pfad ermitteln
    - name: Determine proxy root path
      shell: bash
      run: |
        if  [[ ${{ inputs.company }} == km ]] ;
        then
          echo "PROXY_BASE_PATH=klarmobil" >> $GITHUB_ENV
        else
          echo "PROXY_BASE_PATH=${{ inputs.company }}" >> $GITHUB_ENV
        fi

    # ssh Konfig
    - name: Setup ssh
      if: ${{ inputs.sshKey != '' }}
      shell: bash
      run: |
        printf '' > id_rsa
        chmod 600 id_rsa
        printf %s "${{ inputs.sshKey }}" >> id_rsa

    - name: Deploy Proxy
      shell: bash
      run: |
        if [[ '${{ inputs.externalProxy }}' == "true" ]] ; 
        then
          proxyPath=proxies-extern
          replaceCmd="find ./${{ inputs.proxyName }} -type f -exec sed -i 's/nginx\/proxies/nginx\/proxies-extern/g' '{}' +"
          replaceUpstreamCmd=''
        elif [[ '${{ inputs.regtestaltProxy }}' == "true" ]] ; 
        then
          proxyPath=proxies-regtestalt
          replaceCmd="find ./${{ inputs.proxyName }} -type f -exec sed -i 's/nginx\/proxies/nginx\/proxies-regtestalt/g' '{}' +"
          replaceUpstreamCmd=''
        elif [[ '${{ inputs.regtestneuProxy }}' == "true" ]] ; 
        then
          proxyPath=proxies-regtestneu
          replaceCmd="find ./${{ inputs.proxyName }} -type f -exec sed -i 's/nginx\/proxies/nginx\/proxies-regtestneu/g' '{}' +"
          replaceUpstreamCmd=''
        elif [[ '${{ inputs.b2baltProxy }}' == "true" ]] ; 
        then
          proxyPath=proxies-b2balt
          replaceCmd="find ./${{ inputs.proxyName }} -type f -exec sed -i 's/nginx\/proxies/nginx\/proxies-b2balt/g' '{}' +"
          replaceUpstreamCmd="find ./${{ inputs.proxyName }} -type f -exec sed -i -r 's/(mcbs\.|MCBS\.)(.[^\/;\)]*)/&.B2BALT/g' '{}' +"
        elif [[ '${{ inputs.b2bneuProxy }}' == "true" ]] ; 
        then
          proxyPath=proxies-b2bneu
          replaceCmd="find ./${{ inputs.proxyName }} -type f -exec sed -i 's/nginx\/proxies/nginx\/proxies-regb2bneu/g' '{}' +"
          replaceUpstreamCmd="find ./${{ inputs.proxyName }} -type f -exec sed -i -r 's/(mcbs\.|MCBS\.)(.[^\/;\)]*)/&.B2BNEU/g' '{}' +"
        elif [[ '${{ inputs.ngbillingProxy }}' == "true" ]] ; 
        then
          proxyPath=proxies-ngbilling
          replaceCmd="find ./${{ inputs.proxyName }} -type f -exec sed -i 's/nginx\/proxies/nginx\/proxies-ngbilling/g' '{}' +"
          replaceUpstreamCmd="find ./${{ inputs.proxyName }} -type f -exec sed -i -r 's/(mcbs\.|MCBS\.)(.[^\/;\)]*)/&.NGBILLING/g' '{}' +"
        else
          proxyPath=proxies
          replaceCmd=''
          replaceUpstreamCmd=''
        fi
        
        if [[ '${{ inputs.sshKey }}' != '' ]]; then
          echo "key"
          keyParameter='-o StrictHostKeyChecking=no -i id_rsa'
        else
          echo "no key"
          keyParameter=''
        fi
        
        scp $keyParameter \
          -r ./release/${{ inputs.component }}-${{ inputs.company }}-${{ inputs.componentVersion }}.tar.gz \
          "${{ inputs.deploymentUser }}@${{ inputs.host }}:/tmp/${{ inputs.component }}-${{ inputs.company }}-${{ inputs.componentVersion }}-$proxyPath.tar.gz"

        ssh $keyParameter '${{ inputs.deploymentUser }}@${{ inputs.host }}' bash -e -s <<-SSH
          cd '/etc/nginx/$proxyPath/${{ env.PROXY_BASE_PATH }}'
          sudo rm -rf -- '${{ inputs.proxyName }}' || echo "Kein Proxy vorhanden"
          sudo mkdir '/var/log/proxies/${{ inputs.proxyName }}' || echo "Logverzeichnis existiert"
          tar xfvz '/tmp/${{ inputs.component }}-${{ inputs.company }}-${{ inputs.componentVersion }}-$proxyPath.tar.gz' '${{ inputs.additionalTarParams }}' --no-same-owner
          $replaceCmd
          $replaceUpstreamCmd
          sudo service nginx configtest
          sudo service nginx reload
          rm '/tmp/${{ inputs.component }}-${{ inputs.company }}-${{ inputs.componentVersion }}-$proxyPath.tar.gz'
        SSH

    # ssh Konfig aufräumen
    - name: Remove ssh key
      if: ${{ always() && inputs.sshKey != '' }}
      shell: bash
      run: rm -v id_rsa
