name: Create Releasenote
description: 'Auswertung der Issues eines Repositories seit dem letzten Tag, Bereitstellen von Issue-Infos für eventuelle Release-Notes, Erzeugen einer neuen Version für ein nachfolgendes Releasebuild'
inputs:
  component:
    description: der Name der zu erzeugenden Komponente (erforderlich für Auswertung der Komponenten)
    required: true
  componentVersion:
    description: die zur Komponente gehörende Version
    required: true
  hasSql:
    description: Datenbankänderungen (true|false)
    required: false
    default: false
  hasConfiguration:
    description: Config-Anpassungen (true|false)
    required: false
    default: false
  hasDependencies:
    description: Abhängigkeiten (true|false)
    required: false
    default: false
  dependentIssues:
    description: Liste der Issues mit Abhängigkeiten und zugehörigem Text
    required: false
    default: false  
  coverage:
    description: Numerische Testabdeckung
    required: false
    default: "-"
  releaseUrl:
    description: Die Downloadadresse für das Release
    required: true
  junitResultUrl:
    description: Die Downloadadresse für das JUnit-Testergebnis
    required: true
  cucumberResultUrl:
    description: Die Downloadadresse für das Cucumber-Testergebnis
    required: true
  epic:
    description: Das EPIC als Releaseklammer
    required: false
    default: META-170
  jiraWebUrl:
    description: Die JIRA URL
    required: true
  javaVersion:
    description: Das relevante JDK
    required: false 
    default: 'azuljdk-11.0.2r11.29.11' 

runs:
  using: "composite"
  steps: 
    - id: createReleaseNote
      env:
        ISSUE_FILE: issue_info.csv
      shell: bash
      run: |
        
        # Releasenote schreiben
        # Setzen des Releasenote-Namens
        release="${{ inputs.component }}_${{inputs.componentVersion}}"
        echo "${release}"
      
        # Sprung ins Arbeitsverzeichnis für die Releasenotes
        cd markdown
        # Übersicht
        today=`date +%d-%m-%Y`
        echo -e "| $today |[$release](${{ github.SERVER_URL }}/${{ github.REPOSITORY }}/wiki/$release)| |" >> ${{ inputs.component }}-Releases.md
        # echo -e "\n|A|AA|" >> ${{ inputs.component }}-Releases.md
        # cat ${{ inputs.component }}-Releases.md
        # Releasepage
        echo "## Release" > $release.md
        # EPIC ?
        if [ "${{ inputs.epic }}" = "META-170" ]; then echo "- [x] keine umfassende Releasezuordnung" >>  $release.md; else echo "- ${{ inputs.jiraWebUrl }}${{ inputs.epic }}" >> $release.md; fi
        
        echo "## Java" >> $release.md
        echo "Java : ${{ inputs.javaVersion }}" >> $release.md
        
        echo "## Konfiguration" >> $release.md
        if [ "${{ inputs.hasConfiguration }}" = "JA" ]; then echo "- [x] ms-configuration" >>  $release.md; else echo "- [ ] ms-configuration" >> $release.md; fi
        
        echo "## DB-Changes" >> $release.md
        if [ "${{ inputs.hasSql }}" = "JA" ]; then echo "- [x] DB-Changes" >>  $release.md; else echo "- [ ] DB-Changes" >> $release.md; fi
        
        echo "## Dependencies" >> $release.md
        if [ "${{ inputs.hasDependencies }}" = "JA" ]; then echo "- [x] Dependencies  " >>  $release.md; echo "  ${{ inputs.dependentIssues }}" >>  $release.md; else echo "- [ ] Dependencies" >> $release.md; fi
        
        echo "## Testergebnisse" >> $release.md
        echo "### JUnit-Result : "  >> $release.md
        echo "${{ inputs.junitResultUrl }}"  >> $release.md
        echo "### CUCUMBER-Result : "  >> $release.md
        echo "${{ inputs.cucumberResultUrl }}"  >> $release.md
        echo "### Coverage" >> $release.md
        if [ "${{ inputs.coverage }}" = "-" ]; then
          echo "${{ inputs.coverage }}" >> $release.md
        else
          echo "${{ inputs.coverage }} %" >> $release.md
        fi
        
        echo "## Implementierte Inhalte" >> $release.md
        echo "| Issue | Beschreibung | Status | Stichwörter | Komponenten | Lösungsversion | betr. Version |" >> $release.md
        echo "| ----- | ------------ | ------ | ----------- | ----------- | -------------- | ------------- |" >> $release.md
        while IFS= read -r line; do
          echo "| [$(echo $line | cut -d";" -f1 )](${{ inputs.jiraWebUrl }}$(echo $line | cut -d";" -f1 ) )  | $(echo $line | cut -d";" -f2 ) | $(echo $line | cut -d";" -f3 ) | $(echo $line | cut -d";" -f6 ) | $(echo $line | cut -d";" -f4 ) | $(echo $line | cut -d";" -f8 ) | $(echo $line | cut -d";" -f9 )" >> $release.md
          issueList=$(echo "$issueList $(echo $line | cut -d";" -f1 )")
        done < ../$ISSUE_FILE
          
        echo "## Downloads" >> $release.md
        echo " ${{ inputs.releaseUrl }}" >> $release.md

        echo "##  " >> $release.md
        echo "ImplementedIssues: $issueList" >> $release.md
        
        # cat $release.md
        
        # Check-In
        git pull
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add "$release.md"
        git add "${{ inputs.component }}-Releases.md"
        git diff-index --quiet HEAD || git commit -m "Add changes"
        git push
        cd ..
