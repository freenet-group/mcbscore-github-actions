name: Deploy Microservice
description: Action zum Deployment von Microservices

inputs:
  component:
    description: Der Name der Komponente
    required: true
  stage:
    description: Die Stage für das Deployment
    required: true
  componentConfigPath:
    description: Pfad in dem die Konfiguration der Komponente liegt
    required: true
  dockerImage:
    description: Docker-Image Name[:Tag]; ob das benutzt wird, regeln aber die Deployment-Properties des konkreten Services
    required: false
  checkMkUser:
    description: Der Benutzer für den CheckMk Zugriff
    required: true
  checkMkSecret:
    description: Das Secret für den CheckMk Zugriff
    required: true
  deploymentUser:
    description: Der Benutzer für das Deployment
    required: true
  sshKey:
    description: Der SSH Schlüssel
    required: false
  dockerRegistryToken:
    description: |
      Ein Github Token zum Lesen (pull) des Docker Images aus der Github-Container-Registry; nur
      notwendig, wenn überhaupt (gemäß den Deployment-Properties) per Docker gestartet wird und das
      Image ein Login braucht.
    required: false

runs:
  using: "composite"
  steps:

    # Make deployment.sh executable
    - run: chmod +x ./${{ inputs.componentConfigPath }}/scripts/microservice/deployment.sh
      shell: bash

    # Make checkNginxUpstream.sh executable
    - run: chmod +x ./${{ inputs.componentConfigPath }}/scripts/microservice/checkNginxUpstream.sh
      shell: bash

    # ssh Konfig
    - name: Setup ssh
      if: ${{ inputs.sshKey != '' }}
      shell: bash
      run: |
        printf '' > ./${{ inputs.componentConfigPath }}/id_rsa
        chmod 600 ./${{ inputs.componentConfigPath }}/id_rsa
        printf %s "${{ inputs.sshKey }}" >> ./${{ inputs.componentConfigPath }}/id_rsa

    - id: standard_or_domain_deployment
      shell: bash
      run: |
        workingDirectory=$(pwd)
        cd ${{ inputs.componentConfigPath }}
        dockerRegistryToken='${{ inputs.dockerRegistryToken }}'

        PROPERTY_FILE=./properties/${{ inputs.component }}/deployment-${{ inputs.stage }}.properties
        COMPONENT='${{ inputs.component }}'
        STAGE='${{ inputs.stage }}'
        DOCKER_IMAGE='${{ inputs.dockerImage }}'
        DOCKER_LOGIN_ENABLED=$(if [ -n "$dockerRegistryToken" ]; then echo y; fi)
        DEPLOYMENT_USER='${{ inputs.deploymentUser }}'
        SSH_KEY='${{ inputs.sshKey }}'
        CHECK_MK_USER='${{ inputs.checkMkUser }}'
        CHECK_MK_SECRET='${{ inputs.checkMkSecret }}'

        export COMPONENT STAGE DOCKER_IMAGE DOCKER_LOGIN_ENABLED DEPLOYMENT_USER SSH_KEY CHECK_MK_USER CHECK_MK_SECRET

        echo "Starte Deployment"
        if [ -n "$dockerRegistryToken" ]; then
          ./scripts/microservice/deployment.sh <<< "${dockerRegistryToken}"
        else
          ./scripts/microservice/deployment.sh
        fi
        
        cd -- "$workingDirectory"

    # ssh Konfig aufräumen
    - name: Remove ssh key
      if: ${{ always() && inputs.sshKey != '' }}
      shell: bash
      run: rm -v ./${{ inputs.componentConfigPath }}/id_rsa