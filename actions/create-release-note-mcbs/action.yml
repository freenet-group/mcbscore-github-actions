name: Create MCBS Releasenote
description: 'Auswertung der Issues eines Repositories seit dem letzten Tag, Bereitstellen von Issue-Infos für eventuelle Release-Notes, Erzeugen einer neuen Version für ein nachfolgendes Releasebuild'
inputs:
  component:
    description: der Name der zu erzeugenden Komponente (erforderlich für Auswertung der Komponenten)
    required: false
    default: MCBS
  componentVersion:
    description: die zur Komponente gehörende Version
    required: true
  hasSql:
    description: Datenbankänderungen (true|false)
    required: true
  hasDependencies:
    description: Abhängigkeiten (true|false)
    required: true
  dependentIssues:
    description: Liste der Issues mit Abhängigkeiten und zugehörigem Text
    required: true
  releaseUrl:
    description: Die Downloadadresse für das Release
    required: true
  epic:
    description: Das EPIC als Releaseklammer
    required: false
    default: META-170
  jiraWebUrl:
    description: Die JIRA URL
    required: true
  javaVersion:
    description: Das relevante JDK
    required: true

runs:
  using: "composite"
  steps: 
    - id: createReleaseNote
      env:
        ISSUE_FILE: issue_info.csv
      shell: bash
      run: |
        
        # Releasenote schreiben
        # Setzen des Releasenote-Namens
        release="${{ inputs.component }}_${{inputs.componentVersion}}"
        echo "${release}"
      
        # Sprung ins Arbeitsverzeichnis für die Releasenotes
        cd markdown
        # Übersicht
        today=`date +%d-%m-%Y`
        echo -e "| $today |[$release](${{ github.SERVER_URL }}/${{ github.REPOSITORY }}/wiki/$release)| |" >> ${{ inputs.component }}-Releases.md
        # echo -e "\n|A|AA|" >> ${{ inputs.component }}-Releases.md
        # cat ${{ inputs.component }}-Releases.md
        # Releasepage
        echo "## Release" > $release.md
        # EPIC ?
        if [ "${{ inputs.epic }}" = "META-170" ]; then echo "- [x] keine umfassende Releasezuordnung" >>  $release.md; else echo "- ${{ inputs.jiraWebUrl }}${{ inputs.epic }}" >> $release.md; fi
        
        #Freigabe
        echo "## Freigabeprofil" >> $release.md
        echo "| Komponente | geplant | freigegeben |" >> $release.md
        echo "| ---------- | ------- | ----------- |" >> $release.md
        echo "| MCBS (allg.) | X | |"  >> $release.md
        # echo "| MCBSServices | X | |"  >> $release.md
        
        #Java-Version
        echo "## Java" >> $release.md
        echo "| JAVA-Version | ${{ inputs.javaVersion }} |" >> $release.md
        echo "| ------------ | - " >> $release.md
        
        
        #Sonstiges
        echo "## Ergänzungen" >> $release.md
        # echo "| BE-Version |  |" >> $release.md
        echo "| Bemerkungen |  |" >> $release.md
        echo "| ----- | - " >> $release.md
        
        
        echo "## DB-Changes" >> $release.md
        if [ "$hasSql" = "JA" ]; then 
          echo "- [x] DB-Changes  " >>  $release.md
          echo "     GIT :  " >> $release.md
          echo "    " >> $release.md
          echo "     Produktion :  " >> $release.md  
          echo "    " >> $release.md
        
          echo "## DB-Schema-Anpassungen" >> $release.md
          echo "| DB | Tabelle | Inhalt | Issue | " >> $release.md
          echo "| ----- | ------------ | ------ | ----------- |" >> $release.md
          echo "| | | | |" >> $release.md;
        else 
          echo "- [ ] DB-Changes" >> $release.md; 
        fi
        
        echo "## Dependencies" >> $release.md
        if [ "${{ inputs.hasDependencies }}" = "JA" ]; then echo "- [x] Dependencies  " >>  $release.md; echo "  ${{ inputs.dependentIssues }}" >>  $release.md; else echo "- [ ] Dependencies" >> $release.md; fi
        
        echo "## Implementierte Inhalte" >> $release.md
        echo "| Issue | Beschreibung | Status | Stichwörter | Komponenten | Lösungsversion | betr. Version |" >> $release.md
        echo "| ----- | ------------ | ------ | ----------- | ----------- | -------------- | ------------- |" >> $release.md
        while IFS= read -r line; do
          echo "| [$(echo $line | cut -d";" -f1 )](${{ inputs.jiraWebUrl }}$(echo $line | cut -d";" -f1 ) )  | $(echo $line | cut -d";" -f2 ) | $(echo $line | cut -d";" -f3 ) | $(echo $line | cut -d";" -f6 ) | $(echo $line | cut -d";" -f4 ) | $(echo $line | cut -d";" -f8 ) | $(echo $line | cut -d";" -f9 )" >> $release.md
          issueList=$(echo "$issueList $(echo $line | cut -d";" -f1 )")
        done < ../$ISSUE_FILE
        
        echo "## weiterführende Dokumentation" >> $release.md
        
        echo "## Downloads" >> $release.md
        echo "gitHub :  " >> $release.md
        echo " ${{ inputs.releaseUrl }}  " >> $release.md
        # echo "Artifactory : " >> $release.md
        # echo "https://artifactory.mobilcom.de/artifactory/simple/md-release/de/md/mcbs/${{ inputs.componentVersion }}/"  >> $release.md
        echo "##  " >> $release.md
        echo "ImplementedIssues: $issueList" >> $release.md
        
        # cat $release.md
        
        # Check-In
        git pull
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add "$release.md"
        git add "${{ inputs.component }}-Releases.md"
        git diff-index --quiet HEAD || git commit -m "Add changes"
        git push
        cd ..
