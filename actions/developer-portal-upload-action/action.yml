name: Developer Portal Upload
description: Action zum Upload der API Dokumentation eines Services in das Developer Portal

inputs:
  component:
    description: Der Name der Komponente
    required: true
  componentVersion:
    description: Die Version der Komponente
    required: true
  stage:
    description: Die Stage für den Upload
    required: true
  tagPrefix:
    description: 'Der Präfix des Tags'
    required: false
#  clientId:
#    description: Die ClientId um sich zu authentifizieren
#    required: true
#  clientSecret:
#    description: Das ClientSecret um sich zu authentifizieren
#    required: true

runs:
  using: "composite"
  steps:

    # Make developerPortalUpload.sh executable
    - shell: bash
      run: chmod +x ${{ github.action_path }}/developerPortalUpload.sh

    - shell: bash
      run: |
        authHeader="Authorization: token ${{ env.TOKEN }}"
        echo "1"
        function gh_curl() {
          curl -H "${authHeader}" \
            -H "Accept: application/vnd.github.v3.raw" \
            $@
        }

        echo "2 ${{ env.GITHUB_API_URL }}"
        echo "2.1 ${{ github.api_url }}"
        curl -H "${authHeader}"
        echo "2.2"
        parser=". | map(select(.tag_name == \"${{ inputs.tagPrefix }}${{ inputs.componentVersion }}\"))[0].created_at"
        echo "3"
        RELEASE_CREATED_AT=`gh_curl -s ${{ env.GITHUB_API_URL }}/repos/${{ github.repository }}/releases?per_page=100 | jq -r "$parser"`
        echo "4"

        export RELEASE_CREATED_AT
        echo "5"

        echo "Starte Developer Portal Upload"
        ${{ github.action_path }}/developerPortalUpload.sh
      env:
        COMPONENT: ${{ inputs.component }}
        COMPONENT_VERSION: ${{ inputs.componentVersion }}
        STAGE: ${{ inputs.stage }}
#        CLIENT_ID: ${{ inputs.clientId }}
#        CLIENT_SECRET: ${{ inputs.clientSecret }}
